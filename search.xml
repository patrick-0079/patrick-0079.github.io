<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Eureka 的学习笔记</title>
    <url>/2022/12/14/19-30-57/</url>
    <content><![CDATA[<h1 id="Netflix-eureka-学习笔记"><a href="#Netflix-eureka-学习笔记" class="headerlink" title="Netflix eureka 学习笔记"></a><strong>Netflix eureka</strong> 学习笔记</h1><h2 id="注册中心简介"><a href="#注册中心简介" class="headerlink" title="注册中心简介"></a>注册中心简介</h2><p>微服务架构中的通讯录, 记录服务和服务地址的映射关系</p>
<h2 id="常见的注册中心"><a href="#常见的注册中心" class="headerlink" title="常见的注册中心"></a>常见的注册中心</h2><ul>
<li><em><strong>Netflix Eureka</strong></em></li>
<li><em><strong>Alibaba Nacos</strong></em></li>
<li>HashiCorp Consul</li>
<li><strong>Apache Zookeeper</strong></li>
<li>CoreOS etcd</li>
<li>CNCF CoreDNS</li>
</ul>
<h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><ol>
<li>Consistency(一致性)</li>
<li>Availability(可用性)</li>
<li>Partition tolerance(分区容错性)  <div class="note info simple"><p>CAP 中三者最多同时实现两个</p>
</div></li>
</ol>
<h2 id="注册中心中的角色"><a href="#注册中心中的角色" class="headerlink" title="注册中心中的角色"></a>注册中心中的角色</h2><ul>
<li>Server(注册中心)</li>
<li>Consumer(消费者)</li>
<li>Provider(生产者)</li>
</ul>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden="">  stateDiagram-v2
    Provider --&gt; Server: Register(注册)/Renew(心跳)/Cancel(下线)
    Consumer --&gt; Server: Get registry(拉取实例列表)
    Consumer --&gt; Provider: Remote call(远程调用)
  </pre></div>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="note info simple"><p>注册中心实例需要在 Spring boot 启动类添加 @EnableEurekaServer 注解</p>
</div>

<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9998</span> <span class="comment"># 实例端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">## 实例名称, 相同实例名称相同</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">## Eureka自我保护模式是否可以开启</span></span><br><span class="line">        <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span> <span class="comment">## 清理间隔时间 (ms), 默认60000</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">eureka</span> <span class="comment">## 主机名, 不配置会自动获取</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">## 是否使用IP地址注册, 不使用IP注册其他服务将不能直接获取该实例IP</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">${spring.cloud.client.ip-address}:${server.port}</span> <span class="comment">## 实例ID, 与eureka.instance.prefer-ip-address搭配可使注册中心网页实例显示IP:port</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">## 是否拉去注册信息, 单节点注册中心需要关闭</span></span><br><span class="line">        <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">## 是否将自己注册到注册中心, 单节注册中心点需要关闭</span></span><br><span class="line">        <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span> <span class="comment">## 拉取实例注册信息间隔(s), 默认30</span></span><br><span class="line">        <span class="attr">service-url:</span> <span class="comment">## 注册中心地址, 多节点注册中心需要互相注册</span></span><br><span class="line">            <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8761/eureka/,</span> <span class="string">http://127.0.0.1:8762/eureka/</span> <span class="comment">## 添加多个注册中心地址时可以用逗号分隔, 或写成数组形式, Eureka节点间会互相同步</span></span><br><span class="line">            <span class="comment">## 添加 Spring security 后需要改为 http://${spring.security.user.name}:${spring.security.user.password}@${Host}:${Port}/eureka/ 进行 BasicHttp 验证</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note warning simple"><p>eureka.client.service.defaultZone 中如需添加多个注册中心地址, 尽量用逗号分隔, 使用数组形式时服务发现可能会不进行 basichttp 验证</p>
</div>
<div class="note warning simple"><p>eureka.client.service.defaultZone 中地址尽量以 / 结尾, 否则某些版本会报错</p>
</div>

<h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li>DiscoverClient<br>通过元数据获取服务信息</li>
<li>LoadBalancerClient<br>通过负载均衡器获取服务信息</li>
<li>@LoadBalanced<br>RestTemplate远程调用时自动拉取服务实例信息, 添加@LoadBalanced注解后前两种方法将的 RestTemplate 不能使用 IOC 中的 bean</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><mark class="hl-label default">Config.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<mark class="hl-label default">ControllerTest.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/consumer")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DiscoveryClient discoveryClient; <span class="comment">// 元数据对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoadBalancerClient loadBalancerClient; <span class="comment">// 负载均衡器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ControllerTest</span><span class="params">(RestTemplate restTemplate, DiscoveryClient discoveryClient, LoadBalancerClient loadBalancerClient)</span> {</span><br><span class="line">        <span class="built_in">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="built_in">this</span>.discoveryClient = discoveryClient;</span><br><span class="line">        <span class="built_in">this</span>.loadBalancerClient = loadBalancerClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/discoveryClient")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">discoveryClient</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"&lt;h1&gt;discoveryClient:&lt;/h1&gt;&lt;br&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部服务列表</span></span><br><span class="line">        List&lt;String&gt; serviceIds = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">if</span> (serviceIds.isEmpty()) {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceIds: empty&lt;br&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceIds: "</span>).append(serviceIds).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据服务名称获取服务</span></span><br><span class="line">        List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(<span class="string">"eureka-provider"</span>);</span><br><span class="line">        <span class="keyword">if</span> (serviceInstances.isEmpty()) {</span><br><span class="line">            stringBuilder.append(<span class="string">"eureka-provider: null&lt;br&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stringBuilder.append(<span class="string">"eureka-provider:"</span>).append(serviceInstances).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> serviceInstances.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 远程调用</span></span><br><span class="line">        stringBuilder.append(<span class="string">"remote call result: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteUrl</span> <span class="operator">=</span> <span class="string">"http://"</span> + serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort() + <span class="string">"/provider/test"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteCallResult</span> <span class="operator">=</span> restTemplate.getForEntity(remoteUrl, String.class).getBody();</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(remoteCallResult);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/LoadBalancerClient")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">LoadBalancerClient</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"&lt;h1&gt;LoadBalancerClient:&lt;/h1&gt;&lt;br&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据服务名称获取服务</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> loadBalancerClient.choose(<span class="string">"eureka-provider"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == serviceInstance) {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceInstance: null &lt;br&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceInstance: "</span>).append(serviceInstance).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 远程调用</span></span><br><span class="line">        stringBuilder.append(<span class="string">"remote call result: "</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteUrl</span> <span class="operator">=</span> <span class="string">"http://"</span> + serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort() + <span class="string">"/provider/test"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteCallResult</span> <span class="operator">=</span> restTemplate.getForEntity(remoteUrl, String.class).getBody();</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(remoteCallResult);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/LoadBalanced")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">LoadBalanced</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"&lt;h1&gt;LoadBalanced:&lt;/h1&gt;&lt;br&gt;"</span>);</span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://eureka-provider/provider/test"</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.append(<span class="string">"remote call result: "</span>).append(responseEntity.getBody()).toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="自我保护模式"><a href="#自我保护模式" class="headerlink" title="自我保护模式"></a>自我保护模式</h2><p>Eureka 发现实例的心跳比例在 15 min 内低于 85% 时触发. Eureka会将实例保护起来不会过期, 并发出警告. 当网络故障恢复后Eureka将解除自我保护模式<br>Eureka客户端具有缓存功能, 所有注册中心实例都下线时, 其他实例也可根据缓存通信<br>负载均衡策略会自动剔除下线实例</p>
<h2 id="Eureka-常用的-API"><a href="#Eureka-常用的-API" class="headerlink" title="Eureka 常用的 API"></a>Eureka 常用的 API</h2><table>
<thead>
<tr>
<th align="left">请求名称</th>
<th align="center">请求方式</th>
<th align="center">HTTP地址</th>
<th align="center">请求描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">注册新服务</td>
<td align="center">POST</td>
<td align="center">/eureka/apps/{appID}</td>
<td align="center">传递JSON或者XML格式参数内容，HTTP code为204时表示成功</td>
</tr>
<tr>
<td align="left">取消注册服务</td>
<td align="center">DELETE</td>
<td align="center">/eureka/apps/{appID}/{instanceID}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">发送服务心跳</td>
<td align="center">PUT</td>
<td align="center">/eureka/apps/{appID}/{instanceID}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">查询所有服务</td>
<td align="center">GET</td>
<td align="center">/eureka/apps</td>
<td align="center">HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">查询指定appID的服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/apps/{appID}</td>
<td align="center">HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">查询指定appID&amp;instanceID</td>
<td align="center">GET</td>
<td align="center">/eureka/apps/{appID}/{instanceID}</td>
<td align="center">获取指定appID以及InstanceId的服务信息，HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">查询指定instanceID服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/apps/instances/{instanceID}</td>
<td align="center">获取指定instanceID的服务列表，HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">变更服务状态</td>
<td align="center">PUT</td>
<td align="center">/eureka/apps/{appID}/{instanceID}/status?value=DOWN</td>
<td align="center">服务上线、服务下线等状态变动，HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">变更元数据</td>
<td align="center">PUT</td>
<td align="center">/eureka/apps/{appID}/{instanceID}/metadata?key=value</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">查询指定IP下的服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/vips/{vipAddress}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">查询指定安全IP下的服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/svips/{svipAddress}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
</tbody></table>
<h2 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h2><p>实例默认每 30s 会向 Eureka 发送一次心跳<br>Eureka会剔除 90s 未发送心跳的实例</p>
<h2 id="健康检测"><a href="#健康检测" class="headerlink" title="健康检测"></a>健康检测</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入 <a href="https://codingstrain.com/spring-boot-for-cloud-actuator/">actuator</a> 的 jar 包<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>配置<mark class="hl-label default">application.yml</mark> 文件 <figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">management:</span> <span class="comment">## 度量指标监控与健康检查</span></span><br><span class="line">    <span class="attr">endpoints:</span></span><br><span class="line">        <span class="attr">web:</span></span><br><span class="line">            <span class="attr">exposure:</span></span><br><span class="line">                <span class="attr">include:</span> <span class="string">shutdown</span> <span class="comment">## 添加 shutdown 端点, 即 /actuator/shutdown URI</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">        <span class="attr">shutdown:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">## 开启 shutdown 端点</span></span><br></pre></td></tr></tbody></table></figure>
 <div class="note warning simple"><p>如需开启 shutdown 端点必须同时将 management.endpoint.shutdown.enabled 设置为 true</p>
</div></li>
<li>访问 /actuator URI即可查看该实例状况</li>
</ol>
<h3 id="远程停服"><a href="#远程停服" class="headerlink" title="远程停服"></a>远程停服</h3><p>开启 shutdown 端点后 POST 访问 /actuator/shutdown URI 即可将服务远程关闭,返回信息:</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"message"</span><span class="punctuation">:</span> <span class="string">"Shutting down, bye..."</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="整合Spring-Security"><a href="#整合Spring-Security" class="headerlink" title="整合Spring Security"></a>整合Spring Security</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><mark class="hl-label green">Spring boot 3.0.0</mark>  + <mark class="hl-label green">Spring cloud 2022.0.0-RC2</mark>  版本组合会周期性触发空指针异常, 日志信息为
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">2022-12-10T16:01:33.097+08:00  WARN 5620 --- [get_127.0.0.1-0] c.n.eureka.util.batcher.TaskExecutors: Discovery WorkerThread error</span><br><span class="line"></span><br><span class="line">java.lang.NullPointerException: Cannot invoke "String.toLowerCase()" because the return value of "java.lang.Throwable.getMessage()" is null</span><br><span class="line">    at com.netflix.eureka.cluster.ReplicationTaskProcessor.maybeReadTimeOut(ReplicationTaskProcessor.java:196) ~[eureka-core-2.0.0-rc.4.jar:2.0.0-rc.4]</span><br><span class="line">    at com.netflix.eureka.cluster.ReplicationTaskProcessor.process(ReplicationTaskProcessor.java:95) ~[eureka-core-2.0.0-rc.4.jar:2.0.0-rc.4]</span><br><span class="line">    at com.netflix.eureka.util.batcher.TaskExecutors$BatchWorkerRunnable.run(TaskExecutors.java:190) ~[eureka-core-2.0.0-rc.4.jar:2.0.0-rc.4]</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]</span><br></pre></td></tr></tbody></table></figure>
<p>版本降为 <mark class="hl-label green">Spring boot 2.7.6</mark>  + <mark class="hl-label green">Spring cloud 2021.0.5</mark>  后问题没有复现</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>eureka.client.service-url.defaultZone<br>需改为 http://${spring.security.user.name}:${spring.security.user.password}@${Host}:${Port}/eureka 的形式</p>
<h3 id="CSRF-处理"><a href="#CSRF-处理" class="headerlink" title="CSRF 处理"></a>CSRF 处理</h3><p>通常有两种简单的处理方式</p>
<ul>
<li>使 CSRF 忽略 /eureka/** 的所有请求</li>
<li>关闭 CSRF</li>
</ul>
<h4 id="使-CSRF-忽略-x2F-eureka-x2F-的所有请求"><a href="#使-CSRF-忽略-x2F-eureka-x2F-的所有请求" class="headerlink" title="使 CSRF 忽略 /eureka/** 的所有请求:"></a>使 CSRF 忽略 /eureka/** 的所有请求:</h4><mark class="hl-label default">Config.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .authorizeHttpRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().ignoringRequestMatchers(<span class="string">"/eureka/**"</span>)</span><br><span class="line"></span><br><span class="line">                .and().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="关闭-CSRF"><a href="#关闭-CSRF" class="headerlink" title="关闭 CSRF"></a>关闭 CSRF</h4><mark class="hl-label default">Config.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .formLogin()</span><br><span class="line">                .and().httpBasic() <span class="comment">// 配置 HTTP 基本身份验证, 为了兼容 http://${spring.security.user.name}:${spring.security.user.password}@${Host}:${Port}/eureka 登录方式</span></span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeHttpRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡:"></a>负载均衡:</h2><p>主流的负载均衡方案分为服务器负载均衡(集中式负载均衡)和客户端负载均衡(进程内负载均衡)<br>高版本 Spring cloud 默认使用 LoadBalance 代替 Ribbon 执行负载均衡</p>
<h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><p>Ribbon 是一个基于 HTTP 和 TCP 的客户端负载均衡工具</p>
<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><mark class="hl-label green">Spring boot 2.7.6</mark>  + <mark class="hl-label green">Spring cloud 2021.0.5</mark>  整合 Ribbon 会出现负载均衡无法获取注册实例情况,经过调试发现, Ribbon 可用从 Eureka 获取所有实例详细, 但最终没有保存下来. 
<p>版本降为 <mark class="hl-label green">Spring boot 2.2.4.RELEASE</mark>  + <mark class="hl-label green">Spring cloud Hoxton.SR1</mark>  后问题没有复现</p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>高版本的 Spring cloud 默认负载均衡变为 LoadBalance ,使用 Ribbon 时需要手动导入 jar 包</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-cloud-starter-netflix-ribbon.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><table>
<thead>
<tr>
<th>策略名称</th>
<th>对应类名</th>
<th>原理</th>
</tr>
</thead>
<tbody><tr>
<td>轮询</td>
<td>RoundRobinRule</td>
<td>按默认顺序每次调用按序取 provider</td>
</tr>
<tr>
<td>权重随机</td>
<td>WeightedResponseTimeRule</td>
<td>根据每个 provider 响应时间分配权重.<br>响应时间越长, 权重越小刚开始时为轮询策略, 同时开启计时器,<br>每 30 秒计算一次各个 provider 的平均响应时间, 之后按权重随机选择 provider</td>
</tr>
<tr>
<td>随机</td>
<td>RandomRule</td>
<td>随机选择 provider</td>
</tr>
<tr>
<td>最少并发</td>
<td>BestAvailableRule</td>
<td>选择请求并发数量最小的可用的 provider</td>
</tr>
<tr>
<td>重试</td>
<td>RetryRule</td>
<td>轮询策略的服务不可用时不做处理,<br>重试策略的服务不可用时会重新尝试连接其它节点</td>
</tr>
<tr>
<td>可用性敏感</td>
<td>AvailabilityFilteringRule</td>
<td>过滤性能差的 provider<br><ul><li>过去一段时间内始终连接失败的 provider</li><li>处于高并发状态的 provider</li></ul></td>
</tr>
<tr>
<td>区域敏感性</td>
<td>ZoneAvoidanceRule</td>
<td>以区域为单位, 过滤不可用的区域<br>当一个区域内有服务不可用或者响应变慢时, 降低该区域中服务的权重</td>
</tr>
</tbody></table>
<div class="note info simple"><p>Ribbon 的默认负载均衡策略是 ZoneAvoidanceRule</p>
</div>

<div class="note warning simple"><p>高版本的 Spring boot 需要配置<br><code>spring.cloud.loadbalancer.cache.enabled = false</code>或</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${caffeine.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    IRule <span class="title function_">randomRule</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h5>]]></content>
      <categories>
        <category>Note</category>
        <category>Java</category>
        <category>Spring</category>
        <category>Spring boot</category>
        <category>Spring cloud</category>
        <category>Spring cloud Netflix</category>
        <category>Eureka</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Spring boot</tag>
        <tag>Netflix</tag>
        <tag>Eureka</tag>
        <tag>Registration</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy 的学习笔记</title>
    <url>/2022/12/14/11-52-35/</url>
    <content><![CDATA[<h1 id="Groovy-学习笔记"><a href="#Groovy-学习笔记" class="headerlink" title="Groovy 学习笔记"></a><strong>Groovy</strong> 学习笔记</h1><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">version = <span class="number">1.0</span> <span class="comment">// 为Project的内置属性指定值</span></span><br><span class="line">description = <span class="string">'demo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定Project义属性, 所有实现了ExtensionAware接口的API都可通过ext添加属性</span></span><br><span class="line"><span class="comment">// gradle -P key=value task 启动时为project添加属性</span></span><br><span class="line"><span class="comment">// gradle -D org.gradle.project.key=value task 启动时为project添加属性</span></span><br><span class="line">ext.project_var0 = <span class="string">'value'</span> </span><br><span class="line">ext {</span><br><span class="line">    project_var1 = <span class="string">'value'</span></span><br><span class="line">    project_var2 = <span class="string">'value'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task _01 {</span><br><span class="line">    println <span class="string">"------------------------Task 01"</span> <span class="comment">// 构建阶段执行</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task _02 {</span><br><span class="line">    println <span class="string">"------------------------Task 02"</span></span><br><span class="line">    doLast {<span class="comment">// 运行阶段执行的Action, 晚于doFirst执行</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">3</span>){</span><br><span class="line">            print i + <span class="string">' '</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    doFirst {<span class="comment">// 运行阶段执行的Action</span></span><br><span class="line">        <span class="keyword">def</span> s = <span class="string">"hello"</span></span><br><span class="line">        println <span class="string">"First action: $s"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="attr">name:</span> <span class="string">'_03'</span>) {</span><br><span class="line">    doFirst {</span><br><span class="line">        println <span class="string">"tasks属性的类型: ${tasks.class}"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有task</span></span><br><span class="line">        tasks.each {e -&gt;</span><br><span class="line">            println e</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="attr">name:</span> <span class="string">'_04'</span>, <span class="attr">dependsOn:</span> <span class="string">'_02'</span>) {</span><br><span class="line">    doFirst {</span><br><span class="line">        println <span class="string">"Task 04 依赖 Task 02"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="attr">name:</span> <span class="string">'_05'</span>, <span class="attr">type:</span> Copy) {<span class="comment">// type的默认类型为DefaultTask, Copy类型的Task为复制文件任务</span></span><br><span class="line">    from <span class="string">'build.gradle'</span> <span class="comment">// 源文件</span></span><br><span class="line">    into <span class="string">'back'</span> <span class="comment">// 目标文件夹</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task _06(<span class="attr">dependsOn:</span> <span class="string">'_02'</span>, <span class="attr">type:</span> DefaultTask)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloTask</span> <span class="keyword">extends</span> <span class="title class_">DefaultTask</span> { <span class="comment">// 自定义Task类</span></span><br><span class="line">    <span class="comment">// @Optional</span></span><br><span class="line">    <span class="meta">@Internal</span></span><br><span class="line">    <span class="keyword">def</span> message = <span class="string">'Hello Task'</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TaskAction</span> <span class="comment">// 是用 @TaskAction 修饰的方法视为Action</span></span><br><span class="line">    <span class="keyword">def</span> hello() {</span><br><span class="line">        println <span class="string">"HelloTask -&gt; hello(): $message"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> info() {</span><br><span class="line">        println <span class="string">"HelloTask -&gt; info(): $message"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task hello(<span class="attr">type:</span> HelloTask) {</span><br><span class="line">    doFirst {</span><br><span class="line">        info()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task hello2(<span class="attr">type:</span> HelloTask) {</span><br><span class="line">    message = <span class="string">'HELLO2'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用外部自定义Task类</span></span><br><span class="line">task myTask(<span class="attr">type:</span> test.MyTask)</span><br><span class="line"></span><br><span class="line">task myTask2(<span class="attr">type:</span> test.MyTask) {</span><br><span class="line">    file = file(<span class="string">'dist.txt'</span>)</span><br><span class="line">    doLast {</span><br><span class="line">        show()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">'java'</span> <span class="comment">// 引入java插件</span></span><br><span class="line"></span><br><span class="line">task compile(<span class="attr">type:</span> JavaCompile) {<span class="comment">// 编译Java代码任务</span></span><br><span class="line"></span><br><span class="line">    source = fileTree(<span class="string">'src/main/java'</span>)</span><br><span class="line">    classpath = sourceSets.main.compileClasspath</span><br><span class="line">    destinationDirectory = file(<span class="string">'build/classes/main'</span>)</span><br><span class="line">    options.fork = <span class="literal">true</span></span><br><span class="line">    options.incremental = <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task run(<span class="attr">type:</span> JavaExec, <span class="attr">dependsOn:</span> <span class="string">'compile'</span>) {<span class="comment">// 运行Java代码任务</span></span><br><span class="line"></span><br><span class="line">    classpath = sourceSets.main.runtimeClasspath</span><br><span class="line">    mainClass = <span class="string">'Test'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task showProps { <span class="comment">// 显示Project和Task的内置属性</span></span><br><span class="line">    description = <span class="string">'showProps'</span> <span class="comment">// 为Task的内置属性配置值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定Task义属性</span></span><br><span class="line">    ext.task_var0 = <span class="string">'value'</span> </span><br><span class="line">    ext {</span><br><span class="line">        task_var1 = <span class="string">'value'</span></span><br><span class="line">        task_var2 = <span class="string">'value'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    doFirst {</span><br><span class="line">        println version</span><br><span class="line">        println description <span class="comment">// 当Project和Task有相同属性时, 优先使用Task的属性</span></span><br><span class="line">        println project.description</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task fileContentCopy { <span class="comment">// 增量式构建</span></span><br><span class="line">    <span class="keyword">def</span> sourceTxt = fileTree(<span class="string">"source"</span>)</span><br><span class="line">    <span class="keyword">def</span> dest = file(<span class="string">'dist.txt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增量构建的关键</span></span><br><span class="line">    inputs.dir sourceTxt</span><br><span class="line">    outputs.file dest</span><br><span class="line"></span><br><span class="line">    doLast {</span><br><span class="line">        dest.withPrintWriter {writer -&gt;</span><br><span class="line">            sourceTxt.each {s -&gt;</span><br><span class="line">                writer.write(s.text)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sourceSets { <span class="comment">// 配置被依赖的源代码路径</span></span><br><span class="line">    xModel <span class="comment">// 可将xModel项目的代码放在src/xModel/main中, 资源放在src/xModel/rsources, Gradle会创建compileXModelJava, processXModelResources, xModelClasses三个Task</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">repositories { <span class="comment">// 定义仓库</span></span><br><span class="line"></span><br><span class="line">    mavenLocal()</span><br><span class="line">    <span class="comment">// mavenCentral() // Maven默认仓库</span></span><br><span class="line">    <span class="comment">// maven {</span></span><br><span class="line">    <span class="comment">//     allowInsecureProtocol = true</span></span><br><span class="line">    <span class="comment">//     显示指定Maven仓库</span></span><br><span class="line">    <span class="comment">//     url "https://maven.aliyun.com/repository/public"</span></span><br><span class="line">    <span class="comment">//     显示指定本地仓库</span></span><br><span class="line">    <span class="comment">//     url "C:/Users/patrick/.m2/repository"</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阿里云镜像</span></span><br><span class="line">    <span class="comment">// maven { url 'https://maven.aliyun.com/repository/public/'}</span></span><br><span class="line">    maven{url <span class="string">'https://maven.aliyun.com/nexus/content/groups/public/'</span>}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">configurations { <span class="comment">//配置组</span></span><br><span class="line">    xDependence <span class="comment">// 配置名为XDependence的依赖组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java 插件添加的依赖组</span></span><br><span class="line">    implementation <span class="comment">// 主项目依赖组</span></span><br><span class="line">    compileOnly <span class="comment">// 编译时依赖组</span></span><br><span class="line">    runtimeOnly <span class="comment">// 运行时依赖组</span></span><br><span class="line">    testImplementation <span class="comment">// 测试依赖组</span></span><br><span class="line">    testCompileOnly <span class="comment">// 测试编译时依赖组</span></span><br><span class="line">    testRuntimeOnly <span class="comment">// 测试运行时依赖组</span></span><br><span class="line">    archives <span class="comment">// 打包时依赖组</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies { <span class="comment">// 配置依赖</span></span><br><span class="line">    xDependence <span class="attr">group:</span> <span class="string">'commons-logging'</span>, <span class="attr">name:</span> <span class="string">'commons-logging'</span>, <span class="attr">version:</span> <span class="string">'1.2'</span></span><br><span class="line">    xDependence <span class="string">'com.baomidou:mybatis-plus-boot-starter:3.5.1'</span> <span class="comment">// 简写</span></span><br><span class="line"></span><br><span class="line">    xDependence (<span class="attr">group:</span> <span class="string">'net.coobird'</span>, <span class="attr">name:</span> <span class="string">'thumbnailator'</span>, <span class="attr">version:</span> <span class="string">'0.4.17'</span>) {</span><br><span class="line">        <span class="comment">// 额外配置</span></span><br><span class="line">    }</span><br><span class="line">    xDependence (<span class="string">'org.jetbrains:annotations:23.0.0'</span>) { <span class="comment">// 简写</span></span><br><span class="line">        <span class="comment">// 额外配置</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    xDependence <span class="string">'com.alibaba:fastjson:1.2.80'</span>, <span class="string">'com.google.guava:guava:31.1-jre'</span> <span class="comment">// 一次为一个组添加多个依赖</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task showDependences { <span class="comment">// 打印依赖</span></span><br><span class="line">    doFirst {</span><br><span class="line">        println configurations.xDependence.asPath</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义插件, Gradle会为此类生成代理, 此类不能为final类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写 apply 方法</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) {</span><br><span class="line">        project.extensions.creat(<span class="string">"user"</span>, User) <span class="comment">// 为项目额外定义属性</span></span><br><span class="line"></span><br><span class="line">        project.task(<span class="string">'showUser'</span>) { <span class="comment">// 定义任务</span></span><br><span class="line">            doLast {</span><br><span class="line">                println <span class="string">"用户名: ${project.user.name}"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    String name = <span class="string">""</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> HelloPlugin <span class="comment">// 引入自定义插件</span></span><br><span class="line">user.name = <span class="string">"Patrick"</span> <span class="comment">// 为插件引入的项目属性赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用外部自定义插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> MyPlugin</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>


<hr>
<div class="flink"><div class="flink-name">Groovy 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="http://www.groovy-lang.org/documentation.html" title="Groovy Documentation" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://www.groovy-lang.org/img/groovy-logo-white.svg" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Groovy Documentation">
              </div>
              <div class="flink-item-name">Groovy Documentation</div> 
              <div class="flink-item-desc" title="Groovy 参考文档">Groovy 参考文档</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Language</category>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy</tag>
        <tag>Baisc grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua 的学习笔记</title>
    <url>/2022/12/14/09-16-35/</url>
    <content><![CDATA[<h1 id="Lua-学习笔记"><a href="#Lua-学习笔记" class="headerlink" title="Lua 学习笔记"></a><strong>Lua</strong> 学习笔记</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>Lua 中的单行注释用 <code>--</code> 表示</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- Hello World</span></span><br><span class="line"><span class="comment">-- Hello Lua</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>Lua 中的多行注释由 <code>--[[</code> 开始, 以 <code>--]]</code> 结束</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">Hello World</span></span><br><span class="line"><span class="comment">Hello Lua    </span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>Lua中一共有 22 个关键字</p>
<ul>
<li>and<br>  布尔运算和</li>
<li>break<br>  跳出循环</li>
<li>do<br>  代码块开始标记</li>
<li>else<br>  分支语句表示默认分支</li>
<li>elseif<br>  分支语句表示另一个条件分支</li>
<li>end<br>  代码块结束标记</li>
<li>false<br>  条件假</li>
<li>for<br>  循环语句关键字</li>
<li>function<br>  函数声明关键字</li>
<li>if<br>  分支语句关键字</li>
<li>in<br>  迭代关键字</li>
<li>local<br>  局部变量声明关键字</li>
<li>nil<br>  空类型声明关键字</li>
<li>not<br>  布尔运算非</li>
<li>or<br>  布尔运算或</li>
<li>repeat<br>  直到循环声明关键字</li>
<li>return<br>  函数返回关键字</li>
<li>then<br>  分支语句关键字</li>
<li>true<br>  条件真</li>
<li>until<br>  直到循环声明关键字</li>
<li>while<br>  当循环声明关键字</li>
<li>goto<br>  跳转语句关键字</li>
</ul>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>Lua 中的变量分为全局变量和局部变量, 声明变量时未加 <code>loacl</code> 关键字的变量为全局变量</p>
<div class="note info simple"><p>全局变量的首字母通常大写</p>
</div>

<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">Var = <span class="literal">nil</span> <span class="comment">-- 全局变量</span></span><br><span class="line"><span class="keyword">local</span> var = <span class="literal">nil</span> <span class="comment">-- 局部变量</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Lua 中由8种数据类型, 分别是</p>
<ul>
<li>nil</li>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>table</li>
<li>function</li>
<li>userdata</li>
<li>thread</li>
</ul>
<h3 id="nil-类型"><a href="#nil-类型" class="headerlink" title="nil 类型"></a>nil 类型</h3><p>nil类型的变量只有一种值, 即nil, 表示空</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var) == <span class="string">'nil'</span>) <span class="comment">-- output: true</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h3><p>Lua 中所有数据类型都可视作 boolean 类型, false 和 nil 看作是 false，其他的都为 true</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="literal">true</span> <span class="comment">-- boolean   false 和 nil 看作是 false，其他的都为 true</span></span><br><span class="line">var = <span class="literal">false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: boolean</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="number-类型"><a href="#number-类型" class="headerlink" title="number 类型"></a>number 类型</h3><p>Lua 中 的数字默认可分为 64 位整数和 64 位浮点数</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: number</span></span><br><span class="line">var = <span class="number">0.3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: number</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span>) <span class="comment">-- output: 0.3</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h3><p>Lua 中声明 string 类型变量由三种方式, 声明单行 string 可用 <code>'</code> 或 <code>"</code> , 声明多行 string 可用 <code>[[</code> 开始, <code>]]</code> 结束</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="string">'abc'</span></span><br><span class="line">var = <span class="string">"abc"</span></span><br><span class="line">var = <span class="string">[[</span></span><br><span class="line"><span class="string">    abc</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: string</span></span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label orange">注意</mark>   在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字, 字符串连接使用的是 .. , 使用 # 来获取字符串的长度
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"2"</span> + <span class="string">"6"</span>) <span class="comment">-- output: 8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'2'</span> .. <span class="string">'6'</span>) <span class="comment">-- output: 26</span></span><br><span class="line"><span class="keyword">local</span> var = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">print</span>(#var) <span class="comment">-- output: 3</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="funcyion-类型"><a href="#funcyion-类型" class="headerlink" title="funcyion 类型"></a>funcyion 类型</h3><p>Lua 的函数类型变量分为有名函数和匿名函数</p>
<div class="note info simple"><p>匿名函数通常用作给函数传参来使用</p>
</div>
<div class="tabs" id="function-declaration"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#function-declaration-1">有名函数</button></li><li class="tab"><button type="button" data-href="#function-declaration-2">匿名函数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="function-declaration-1"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">var</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: function</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="function-declaration-2"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>))  <span class="comment">-- output: function</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="table-类型"><a href="#table-类型" class="headerlink" title="table 类型"></a>table 类型</h3><p>Lua 中唯一的一种内置的数据结构就是表, 由许多 k, v 键值对组成</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = {}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: table</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="userdata-类型"><a href="#userdata-类型" class="headerlink" title="userdata 类型"></a>userdata 类型</h3><p>Lua 中的 userdata 类型变量表示任意存储在变量中的C数据结构</p>
<h3 id="thread-类型"><a href="#thread-类型" class="headerlink" title="thread 类型"></a>thread 类型</h3><p>Lua 中的 thread 类型变量表示执行的独立线路，用于执行协同程序</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Lua 中的函数是一种数据类型, 具体声明结构为</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_name</span><span class="params">(arg1, arg2, arg3, ...)</span></span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span>={...} <span class="comment">-- 将可变参数转换为表</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">len</span> = <span class="built_in">select</span>(<span class="string">"#"</span>,...) <span class="comment">-- 获取可变参数长度</span></span><br><span class="line">    <span class="keyword">local</span> arg1 = <span class="built_in">select</span>(<span class="number">1</span>, ...) <span class="comment">--用于返回从起点 n 开始到结束位置的所有参数列表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'1'</span>, <span class="number">2</span>, arg3</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<p>函数调用形式为</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> r1, r2, r3 = fun(<span class="string">'arg1'</span>, <span class="string">'arg2'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="keyword">end</span>, <span class="string">'1'</span>) <span class="comment">-- 函数调用</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>lua 中 . 和 : 的区别</strong><br>首先在lua中使用 <code>:</code> 定义的函数会自动传入一个名为self的变量，这个变量是隐含的，self同c++中的this一样，表示当前对象的指针, 而 <code>.</code> 定义的函数中没有self  </p>
<p>例如:</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">Class = {}</span><br><span class="line">Class.<span class="built_in">__index</span> = Class</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class.new</span><span class="params">(x,y)</span></span></span><br><span class="line">    <span class="keyword">local</span> cls = {}</span><br><span class="line">    <span class="built_in">setmetatable</span>(cls, Class)</span><br><span class="line">    cls.x = x</span><br><span class="line">    cls.y = y</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:test</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 等价于</span></span><br><span class="line">    <span class="comment">-- function Class.test(self)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">self</span>.x,<span class="built_in">self</span>.y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">object = Class.new(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"> </span><br><span class="line">object:test() <span class="comment">-- 等价于</span></span><br><span class="line">object.test(object)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>Lua 中声明表时可对表进行初始化</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = {index1 = <span class="string">'index1'</span>, index2 = <span class="number">2</span>}</span><br></pre></td></tr></tbody></table></figure>
<p>填充表时可用<code>.</code>运算符或<code>[]</code>运算符</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">table</span>.index1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">table</span>[<span class="string">'index2'</span>] = <span class="string">'index2'</span></span><br></pre></td></tr></tbody></table></figure>
<p>删除表中的值时直接将该元素置为 nil 即可</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">table</span>.index2 = <span class="literal">nil</span></span><br></pre></td></tr></tbody></table></figure>
<p>访问表中元素时可用索引去取值, 或者使用<a href="/2022/12/14/09-16-35/#%E9%81%8D%E5%8E%86%E8%A1%A8">^遍历的方法访问表</a></p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>[<span class="string">'index1'</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.index2)</span><br><span class="line"><span class="comment">-- 遍历的方法见循环语句</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>当声明表并对其初始化时不填写索引或之后用 [数字] 的方式填表中的充值, 那么此时这个表可视为数组</p>
<div class="note warning simple"><p>Lua 的默认索引是从 <mark class="hl-label orange">1</mark>  开始的</p>
</div>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> array = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line">array[<span class="number">4</span>] = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>]) <span class="comment">-- output: 1</span></span><br></pre></td></tr></tbody></table></figure>
<p>可使用<a href="/2022/12/14/09-16-35/#%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84">^遍历的方法访问数组</a></p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>Lua 中使用 <code>::tag_name::</code>的形式声明标签, 通常标签和 <code>goto</code> 关键字搭配使用</p>
<h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>Lua 可以对多个变量同时赋值, 例如<code>local a, b = 1,2</code></p>
<div class="note info simple"><p>当变量个数和值的个数不一致时，Lua会以变量个数为基础采取以下策略:</p>
<ul>
<li>变量个数 &gt; 值的个数      按变量个数补足nil</li>
<li>变量个数 &lt; 值的个数      多余的值会被忽略</li>
</ul>
</div>

<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">elseif</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环语句中可用 <code>break</code> 关键字跳出当前循环, 或搭配标签和 <code>goto</code>关键字实现 continue</p>
<div class="hide-block"><button type="button" class="hide-button" style="">查看break和continue的使用
    </button><div class="hide-content"><div class="tabs" id="break-continue"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#break-continue-1">break</button></li><li class="tab"><button type="button" data-href="#break-continue-2">continue</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="break-continue-1"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line">    <span class="keyword">break</span> <span class="comment">-- 跳出循环</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="break-continue-2"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">:: continue::<span class="keyword">while</span> condition <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line">    <span class="keyword">goto</span> continue</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></div>

<h3 id="当型循环"><a href="#当型循环" class="headerlink" title="当型循环"></a>当型循环</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="直到型循环"><a href="#直到型循环" class="headerlink" title="直到型循环"></a>直到型循环</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">:: continue::<span class="keyword">repeat</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">until</span>(condition)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="普通-for-循环"><a href="#普通-for-循环" class="headerlink" title="普通 for 循环"></a>普通 for 循环</h4><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- 1 从 1（exp1） 变化到 5（exp2），每次变化以 2（exp3） 为步长递增 1，并执行一次 "执行体". exp3 是可选的，如果不指定，默认为1</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="遍历表"><a href="#遍历表" class="headerlink" title="遍历表"></a>遍历表</h4><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Lua 中有以下运算符</p>
<ul>
<li><p>+	加法</p>
</li>
<li><p>-	减法</p>
</li>
<li><p>*	乘法</p>
</li>
<li><p>/	    除法</p>
</li>
<li><p>%	    取余</p>
</li>
<li><p>^	    乘幂</p>
</li>
<li><p>-	负号</p>
</li>
<li><p>//	整除运算符(&gt;=lua5.3)</p>
</li>
<li><p>==	等于</p>
</li>
<li><p>~=	不等于</p>
</li>
<li><p>&gt;	大于</p>
</li>
<li><p>&lt;	小于</p>
</li>
<li><p>&gt;=	大于等于</p>
</li>
<li><p>&lt;=	小于等于</p>
</li>
<li><p>and	逻辑与</p>
</li>
<li><p>or	逻辑或</p>
</li>
<li><p>not	逻辑非</p>
</li>
<li><p>..	连接两个字符串</p>
</li>
<li><p>#	一元运算符，返回字符串或表的长度</p>
</li>
</ul>
<p>运算优先级由高到低排列为</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="center">^</td>
</tr>
<tr>
<td>2</td>
<td align="center">not,    - (unary)</td>
</tr>
<tr>
<td>3</td>
<td align="center">*,      /,       %</td>
</tr>
<tr>
<td>4</td>
<td align="center">+,      -</td>
</tr>
<tr>
<td>5</td>
<td align="center">..</td>
</tr>
<tr>
<td>6</td>
<td align="center">&lt;,      &gt;,      &lt;=,     &gt;=,     ~=,    ==</td>
</tr>
<tr>
<td>7</td>
<td align="center">and</td>
</tr>
<tr>
<td>8</td>
<td align="center">or</td>
</tr>
</tbody></table>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Lua 中引如其他模块使用<code>require("module_name")</code>函数, 此时当前程序内会引入一个其他模块名称的表</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"module"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">module</span>.constant)</span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">"module"</span>) <span class="comment">-- 模块别名</span></span><br><span class="line"><span class="built_in">print</span>(m.constant)</span><br></pre></td></tr></tbody></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看module.lua内容
    </button><div class="hide-content"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件名为 module.lua</span></span><br><span class="line"><span class="built_in">module</span> = {} <span class="comment">-- 定义一个名为 module 的模块</span></span><br><span class="line"><span class="built_in">module</span>.constant = <span class="string">"constant"</span> <span class="comment">-- 将一个数据添加进 module 表</span></span><br></pre></td></tr></tbody></table></figure></div></div>

<h2 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h2><p>元表用于为表定义一些行为, 为表添加元表的方法为</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a_table = {}                  <span class="comment">-- 普通表</span></span><br><span class="line"><span class="keyword">local</span> metatable = {}                <span class="comment">-- 元表</span></span><br><span class="line"><span class="built_in">setmetatable</span>(a_table,metatable)     <span class="comment">-- 把 mymetatable 设为 mytable 的元表</span></span><br><span class="line"></span><br><span class="line">metatable[<span class="string">'__index'</span>] = <span class="function"><span class="keyword">function</span><span class="params">(target_table, key)</span></span> <span class="comment">-- 添加元表函数</span></span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">"key2"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"metatablevalue"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(a_table.key1,a_table.key2) <span class="comment">-- output： value1    metatablevalue</span></span><br></pre></td></tr></tbody></table></figure>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>函数作用</th>
</tr>
</thead>
<tbody><tr>
<td>__index</td>
<td>当通过键来访问 table 的时候，如果这个键没有值，那么Lua就会寻找该table的metatable（假定有metatable）中的__index 键. 如果__index包含一个表，Lua会在表格中查找相应的键</td>
</tr>
<tr>
<td>__newindex</td>
<td>当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作</td>
</tr>
<tr>
<td>__call</td>
<td>在把普通表视作函数并调用时调用</td>
</tr>
<tr>
<td>__tostring</td>
<td>修改表的输出行为</td>
</tr>
<tr>
<td>__add</td>
<td>对应的运算符 ‘+’</td>
</tr>
<tr>
<td>__sub</td>
<td>对应的运算符 ‘-‘</td>
</tr>
<tr>
<td>__mul</td>
<td>对应的运算符 ‘*’</td>
</tr>
<tr>
<td>__div</td>
<td>对应的运算符 ‘/‘</td>
</tr>
<tr>
<td>__mod</td>
<td>对应的运算符 ‘%’</td>
</tr>
<tr>
<td>__unm</td>
<td>对应的运算符 ‘-‘</td>
</tr>
<tr>
<td>__concat</td>
<td>对应的运算符 ‘..’</td>
</tr>
<tr>
<td>__eq</td>
<td>对应的运算符 ‘==’</td>
</tr>
<tr>
<td>__lt</td>
<td>对应的运算符 ‘&lt;’</td>
</tr>
<tr>
<td>__le</td>
<td>对应的运算符 ‘&lt;=’</td>
</tr>
</tbody></table>
<h2 id="协同程序（coroutine）"><a href="#协同程序（coroutine）" class="headerlink" title="协同程序（coroutine）"></a>协同程序（coroutine）</h2><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>coroutine.create(func)</td>
<td>创建 coroutine，返回 coroutine， 参数是一个函数，当和 resume 配合使用的时候就唤醒函数调用</td>
</tr>
<tr>
<td>coroutine.resume()</td>
<td>启动 coroutine，和 create 配合使用</td>
</tr>
<tr>
<td>coroutine.yield()</td>
<td>挂起 coroutine，将 coroutine 设置为挂起状态，这个和 resume 配合使用能有很多有用的效果</td>
</tr>
<tr>
<td>coroutine.status()</td>
<td>查看 coroutine 的状态（coroutine 的状态有三种：dead，suspended，running）</td>
</tr>
<tr>
<td>coroutine.wrap()</td>
<td>创建 coroutine，返回一个函数，一旦你调用这个函数，就进入 coroutine，和 create 功能重复</td>
</tr>
<tr>
<td>coroutine.running()</td>
<td>返回正在跑的 coroutine，一个 coroutine 就是一个线程，当使用running的时候，就是返回一个 corouting 的线程号</td>
</tr>
</tbody></table>
<div class="tabs" id="create-coroutine"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#create-coroutine-1">使用 create() 创建 coroutine</button></li><li class="tab"><button type="button" data-href="#create-coroutine-2">使用 wrap() 创建 coroutine</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="create-coroutine-1"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(arg)</span></span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">running</span>())</span><br><span class="line">            <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(<span class="built_in">arg</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'status '</span> .. <span class="built_in">coroutine</span>.<span class="built_in">status</span>(co))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">4</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> is_success, r =  <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">'arg'</span>)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'status '</span> .. <span class="built_in">coroutine</span>.<span class="built_in">status</span>(co))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="create-coroutine-2"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> wr = <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(arg)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">arg</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">wr(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I/O"></a>I/O</h2><p>IO模式</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="left">读模式</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">写模式</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">追加模式</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="left">更新模式，所有之前的数据都保留</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="left">更新模式，所有之前的数据都删除</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="left">追加更新模式，所有之前的数据都保留，只允许在文件尾部做写入</td>
</tr>
<tr>
<td align="center">rb</td>
<td align="left">读模式（二进制方式）</td>
</tr>
<tr>
<td align="center">wb</td>
<td align="left">写模式（二进制方式）</td>
</tr>
<tr>
<td align="center">ab</td>
<td align="left">追加模式(二进制方式）</td>
</tr>
<tr>
<td align="center">r+b</td>
<td align="left">更新模式，所有之前的数据都保留（二进制方式）</td>
</tr>
<tr>
<td align="center">w+b</td>
<td align="left">更新模式，所有之前的数据都删除（二进制方式）</td>
</tr>
<tr>
<td align="center">a+b</td>
<td align="left">追加更新模式，所有之前的数据都保留，只允许在文件尾部做写入（二进制方式）</td>
</tr>
</tbody></table>
<h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>) <span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file) <span class="comment">-- 设置默认输出文件为 test.lua</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"--  test.lua 文件末尾注释"</span>) <span class="comment">-- 在文件最后一行添加 Lua 注释</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file) <span class="comment">-- 关闭打开的文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> file = <span class="built_in">io</span>.<span class="built_in">open</span> (<span class="string">'module.lua'</span>, <span class="string">'r'</span>) <span class="comment">-- 以只读方式打开文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file) <span class="comment">-- 设置默认输入文件为 test.lua</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">read</span>()) <span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br></pre></td></tr></tbody></table></figure>
<p>io.read()参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>“*n”</td>
<td>读取一个数字并返回它</td>
</tr>
<tr>
<td>“*a”</td>
<td>从当前位置读取整个文件</td>
</tr>
<tr>
<td>“*l”(默认)</td>
<td>读取下一行，在文件尾 (EOF) 处返回 nil</td>
</tr>
<tr>
<td>number</td>
<td>返回一个指定字符个数的字符串，或在 EOF 时返回</td>
</tr>
</tbody></table>
<p>其他的 io 函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>io.tmpfile()</td>
<td>返回一个临时文件句柄，该文件以更新模式打开，程序结束时自动删除</td>
</tr>
<tr>
<td>io.type(file)</td>
<td>检测obj是否一个可用的文件句柄</td>
</tr>
<tr>
<td>io.flush()</td>
<td>向文件写入缓冲中的所有数据</td>
</tr>
<tr>
<td>io.lines(optional file name)</td>
<td>返回一个迭代函数，每次调用将获得文件中的一行内容，当到文件尾时，将返回 nil，但不关闭文件</td>
</tr>
</tbody></table>
<h3 id="完全模式"><a href="#完全模式" class="headerlink" title="完全模式"></a>完全模式</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>) <span class="comment">-- 以只读方式打开文件</span></span><br><span class="line"><span class="built_in">print</span>(file:<span class="built_in">read</span>()) <span class="comment">-- 输出文件第一行</span></span><br><span class="line">file:<span class="built_in">close</span>() <span class="comment">-- 关闭打开的文件</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>) <span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">"--test"</span>) <span class="comment">-- 在文件最后一行添加 Lua 注释</span></span><br><span class="line">file:<span class="built_in">close</span>() <span class="comment">-- 关闭打开的文件</span></span><br></pre></td></tr></tbody></table></figure>
<p>file:read()参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>“*n”</td>
<td>读取一个数字，根据 Lua 的转换文法返回浮点数或整数</td>
</tr>
<tr>
<td>“*a”</td>
<td>从当前位置开始读取整个文件</td>
</tr>
<tr>
<td>“*l”</td>
<td>读取一行并忽略行结束标记 (默认)</td>
</tr>
<tr>
<td>“*L”</td>
<td>读取一行并保留行结束标记</td>
</tr>
</tbody></table>
<p>其他函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>file:seek(optional whence, optional offset)</td>
<td>设置和获取当前文件位置,成功则返回最终的文件位置(按字节),失败则返回nil加错误信息</td>
</tr>
<tr>
<td>file:flush()</td>
<td>向文件写入缓冲中的所有数据</td>
</tr>
<tr>
<td>io.lines(optional file name)</td>
<td>打开指定的文件 filename 为读模式并返回一个迭代函数，每次调用将获得文件中的一行内容，当到文件尾时，将返回 nil，并自动关闭文件. 若不带参数时io.lines() &lt;=&gt; io.input():lines(); 读取默认输入设备的内容，但结束时不关闭文件</td>
</tr>
</tbody></table>
<div class="note info simple"><p>file:seek()参数:</p>
<ol>
<li>whence 值可以是:</li>
</ol>
<ul>
<li>“set”: 从文件头开始</li>
<li>“cur”: 从当前位置开始[默认]</li>
<li>“end”: 从文件尾开始</li>
</ul>
<ol start="2">
<li>offset 偏移量(默认为0)</li>
</ol>
</div>

<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span>(<span class="built_in">type</span>(<span class="literal">true</span>) == <span class="string">"number"</span>, <span class="string">"true 不是一个数字"</span>)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="error"><a href="#error" class="headerlink" title="error()"></a>error()</h3><p>error(messahe, level) 函数可终止正在执行的函数，并返回message的内容作为错误信息(error函数永远都不会返回)<br>通常情况下，error会附加一些错误位置的信息到message头部</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>messaage</td>
<td>错误信息</td>
</tr>
<tr>
<td>level</td>
<td>指示获得错误的位置<br>Level=1[默认]: 为调用error位置(文件+行号)<br>Level=2: 指出哪个调用error的函数的函数<br>Level=0: 不添加错误位置信息</td>
</tr>
</tbody></table>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="pcall"><a href="#pcall" class="headerlink" title="pcall()"></a>pcall()</h4><p>pcall接收一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回值true或者或false, errorinfo<br>pcall以一种”保护模式”来调用第一个参数，因此pcall可以捕获函数执行中的任何错误<br>通常在错误发生时，希望落得更多的调试信息，而不只是发生错误的位置. 但pcall返回时，它已经销毁了调用桟的部分内容</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span> <span class="params">(x, y, z)</span></span> <span class="built_in">error</span>(<span class="string">'ERROR'</span>) <span class="keyword">end</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'SUCCESS'</span>)</span><br><span class="line">    <span class="comment">-- 没有错误</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'ERROR'</span>)</span><br><span class="line">    <span class="comment">-- 一些错误</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="xpcall"><a href="#xpcall" class="headerlink" title="xpcall()"></a>xpcall()</h4><p>xpcall接收第二个参数——一个错误处理函数，当错误发生时，Lua会在调用桟展开（unwind）前调用错误处理函数，于是就可以在这个函数中使用debug库来获取关于错误的额外信息了<br>debug库提供了两个通用的错误处理函数: </p>
<ul>
<li>debug.debug(): 提供一个Lua提示符，让用户来检查错误的原因</li>
<li>debug.traceback(): 根据调用桟来构建一个扩展的错误消息<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> myfunction = <span class="function"><span class="keyword">function</span> <span class="params">(x, y)</span></span></span><br><span class="line">   x = y / <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> myerrorhandler =  <span class="function"><span class="keyword">function</span> <span class="params">( err )</span></span></span><br><span class="line">   <span class="built_in">print</span>( <span class="string">"ERROR:"</span>, err )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">status</span> = <span class="built_in">xpcall</span>(myfunction, myerrorhandler, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">status</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<hr>
<div class="flink"><div class="flink-name">Lua 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="http://www.lua.org/manual/5.4/" title="Lua 5.4 Reference Manual" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://www.lua.org/manual/5.4/logo.gif" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Lua 5.4 Reference Manual">
              </div>
              <div class="flink-item-name">Lua 5.4 Reference Manual</div> 
              <div class="flink-item-desc" title="Lua 5.4 参考文档">Lua 5.4 参考文档</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Language</category>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Baisc grammar</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 的学习笔记</title>
    <url>/2022/12/13/10-01-00/</url>
    <content><![CDATA[<h1 id="Markdown-学习笔记"><a href="#Markdown-学习笔记" class="headerlink" title="Markdown 学习笔记"></a><strong>Markdown</strong> 学习笔记</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td># Heading level 1</td>
<td><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td>
<td><p style="font-size:32px">Heading level 1</p></td>
</tr>
<tr>
<td>Heading level 1<br>===============</td>
<td><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td>
<td><p style="font-size:32px">Heading level 1</p></td>
</tr>
<tr>
<td>## Heading level 2</td>
<td><code>&lt;h2&gt;Heading level 2&lt;/h2&gt;</code></td>
<td><p style="font-size:24px">Heading level 2</p></td>
</tr>
<tr>
<td>Heading level 2<br>—————</td>
<td><code>&lt;h1&gt;Heading level 2&lt;/h1&gt;</code></td>
<td><p style="font-size:24px">Heading level 2</p></td>
</tr>
<tr>
<td>### Heading level 3</td>
<td><code>&lt;h3&gt;Heading level 3&lt;/h3&gt;</code></td>
<td><p style="font-size:18.72px">Heading level 3</p></td>
</tr>
<tr>
<td>#### Heading level 4</td>
<td><code>&lt;h4&gt;Heading level 4&lt;/h4&gt;</code></td>
<td><p style="font-size:16px">Heading level 4</p></td>
</tr>
<tr>
<td>##### Heading level 5</td>
<td><code>&lt;h5&gt;Heading level 5&lt;/h5&gt;</code></td>
<td><p style="font-size:13.28px">Heading level 5</p></td>
</tr>
<tr>
<td>###### Heading level 6</td>
<td><code>&lt;h6&gt;Heading level 6&lt;/h6&gt;</code></td>
<td><p style="font-size:12px">Heading level 6</p></td>
</tr>
<tr>
<td>###### Head { #id }</td>
<td><code>&lt;h6 id="id"&gt;Heading&lt;/h6&gt;</code></td>
<td><p style="font-size:12px">Head</p></td>
</tr>
</tbody></table>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>使用空白行分隔段落</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>段落一\n段落二</td>
<td><code>&lt;p&gt;段落一&lt;/p&gt;&lt;p&gt;段落二&lt;/p&gt;</code></td>
<td><p>段落一</p><p>段落二</p></td>
</tr>
</tbody></table>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>使用<code>&lt;br&gt;</code>或两个空格实现换行</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>使用 ** 或 __ 包裹需要变成粗体的文字, 注意: __ 前必须有空格, 而 ** 不必有</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>这是**粗体**</td>
<td><code>这是&lt;strong&gt;粗体&lt;/strong&gt;</code></td>
<td>这是<strong>粗体</strong></td>
</tr>
<tr>
<td>这是__粗体__</td>
<td><code>这是&lt;strong&gt;粗体&lt;/strong&gt;</code></td>
<td>这是<strong>粗体</strong></td>
</tr>
</tbody></table>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>使用 * 或 _ 包裹需要变成斜体的文字, 注意: _ 前必须有空格, 而 * 不必有</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>这是*斜体*</td>
<td><code>这是&lt;em&gt;斜体&lt;/em&gt;</code></td>
<td>这是<em>斜体</em></td>
</tr>
<tr>
<td>这是__斜体__</td>
<td><code>这是&lt;em&gt;斜体&lt;/em&gt;</code></td>
<td>这是<em>斜体</em></td>
</tr>
</tbody></table>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用 ~~ 包裹需删除的文字</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>这是要~~删除~~的内容</td>
<td><code>这是要&lt;s&gt;删除&lt;/s&gt;的内容</code></td>
<td>这是要<del>删除</del>的内容</td>
</tr>
</tbody></table>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在段落前添加 &gt; 创建引用块, &gt; 的数量是嵌套的层数</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>&gt; 这里是引用段落</td>
<td><code>&lt;blockquote&gt;这里是引用段落&lt;/blockquote&gt;</code></td>
<td><blockquote>这里是引用段落</blockquote></td>
</tr>
<tr>
<td>&gt; 这里是引用段落的引用段落</td>
<td><code>&lt;blockquote&gt;这里是引用段落&lt;blockquote&gt;这里是引用段落引用段落&lt;/blockquote&gt;&lt;/blockquote&gt;</code></td>
<td><blockquote>这里是引用段落<blockquote>这里是引用段落引用段落</blockquote></blockquote></td>
</tr>
</tbody></table>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>1. First item<br>2. Second item<br>3. Third item<br>4. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>
</tr>
<tr>
<td>1. First item<br>1. Second item<br>1. Third item<br>1. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>
</tr>
<tr>
<td>1. First item<br>3. Second item<br>5. Third item<br>7. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>
</tr>
<tr>
<td>1. First item<br>1. Second item<br>▯▯▯▯1.Indented item<br>▯▯▯▯1.Indented item<br>1. Third item<br>1. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;ol&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code><br><code>&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item<ol><li>Indented item</li><li>Indented item</li></ol></li><li>Fourth item</li></ol></td>
</tr>
</tbody></table>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要在保留列表连续性的同时在列表中添加另一种元素, 请将该元素缩进四个空格或一个制表符<br>代码块通常采用四个空格或一个制表符缩进. 当它们被放在列表中时, 请将它们缩进八个空格或两个制表符</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>- First item<br>- Second item<br>- Third item<br>- Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td>
</tr>
<tr>
<td>* First item<br>* Second item<br>* Third item<br>* Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td>
</tr>
<tr>
<td>+ First item<br>+ Second item<br>+ Third item<br>+ Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td>
</tr>
<tr>
<td>_ First item<br>_ Second item<br>▯▯_ Indented item<br>▯▯_ Indented item<br>_ Third item<br>_ Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;ul&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code><br><code>&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ul></td>
</tr>
</tbody></table>
<h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>带有复选框的项目列表<br>语法为:</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] Write the press release</span><br><span class="line"><span class="bullet">-</span> [ ] Update the website</span><br><span class="line"><span class="bullet">-</span> [ ] Contact the media</span><br></pre></td></tr></tbody></table></figure>
<p>效果为:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Write the press release</li>
<li><input disabled="" type="checkbox"> Update the website</li>
<li><input disabled="" type="checkbox"> Contact the media</li>
</ul>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h3><p>用 ` 或 `` 在一行内包裹一句代码, 代码中若出现则用 `` 包裹代码块</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>输出 `Hello` 用 Python 实现为: print(‘`hello`‘)</td>
<td><code>输出 \`Hello\` 用 Python 实现为: &lt;code&gt;print('`hello`')&lt;/code&gt;</code></td>
<td>输出 `Hello` 用 Python 实现为: <code>print('`hello`')</code></td>
</tr>
</tbody></table>
<h3 id="跨行代码块"><a href="#跨行代码块" class="headerlink" title="跨行代码块"></a>跨行代码块</h3><p>将代码块的每一行缩进至少四个空格或一个制表符, 或使用 ```(language) 包裹代码块</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>print(‘hello’)<br>    print(‘world’)</td>
<td>取决于解析器</td>
<td><code>print('hello')<br>print('world')</code></td>
</tr>
</tbody></table>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在单独一行上使用三个或多个 * , -, _ ，并且不能包含其他内容. 为了兼容性，请在分隔线的前后均添加空白行.</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>--- 或 ___ 或 ***</td>
<td><code>&lt;tr&gt;</code></td>
<td></td></tr><tr>
</tr>
</tbody></table>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h3><table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>[链接名称](链接地址)</td>
<td><code>&lt;a href='链接地址'&gt;链接名称&lt;/a&gt;</code></td>
<td><a href="https://patrick-0079.github.io/">Patrick’s blog</a></td>
</tr>
<tr>
<td>&lt;链接地址&gt;</td>
<td><code>&lt;a href='链接地址'&gt;链接地址&lt;/a&gt;</code></td>
<td><a href="https://patrick-0079.github.io/">https://patrick-0079.github.io/</a></td>
</tr>
</tbody></table>
<h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>语法为 <em>[链接名称][引用序号]</em>, 然后将 <em>[引用序号]: 链接地址</em> 放在之后的段落中, 例如<br><a href="https://patrick-0079.github.io/">Patrick’s blog</a></p>
<h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>语法为 <em>![图片alt](图片链接 “图片title”)</em>, 对应的 HTML 为 <code>&lt;img src="图片链接" alt="图片alt" title="图片title"&gt;</code>, 例如:</p>
<p><a href="https://patrick-0079.github.io/"><img src="https://patrick-0079.github.io/images/logo.ico" alt="Patrick" title="Patrick"></a></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>Markdown中的特殊字符可通过在其前面加 \ 转义</p>
<h2 id="内联-HTML"><a href="#内联-HTML" class="headerlink" title="内联 HTML"></a>内联 HTML</h2><p>在需要内联的 HTML 块前后加空白行</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>语法:</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">| 表头1  | 表头2  |  表头3 | 表头4  |</span><br><span class="line">| ------ | :----- | -----: | :----: |</span><br><span class="line">| 1行1列 | 1行2列 | 1行3列 | 1行3列 |</span><br><span class="line">| 2行1列 | 2行2列 | 2行3列 | 2行3列 |</span><br></pre></td></tr></tbody></table></figure>
<p>其中 — 意为默认对齐,  :— 意为左对齐,  —: 意为右对齐,  :—: 意为居中对齐</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>语法为 <em>[^角标文字]</em>, 然后将 <em>[角标文字]: 解释内容</em> 放在之后的段落中, 例如 Patrick’s blog<a href="/2022/12/14/10-01-00/">^1</a></p>
<h2 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h2><p>用法为</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is the definition of the first term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is one definition of the second term.</span><br><span class="line">: This is another definition of the second term.</span><br></pre></td></tr></tbody></table></figure>
<p>所生成的 HTML 为:</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>First Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is the definition of the first term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Second Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is one definition of the second term. <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is another definition of the second term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>所呈现效果为:<br>First Term<br>▯▯This is the definition of the first term.<br>Second Term<br>▯▯This is one definition of the second term.<br>▯▯This is another definition of the second term.</p>
<h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p>直接使用通过键入表情符号短代码来插入表情符号<br>例如:</p>
<p><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> -&gt; 😂</p>
<h2 id="butterfly支持标签"><a href="#butterfly支持标签" class="headerlink" title="butterfly支持标签"></a>butterfly支持标签</h2><p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br>來源: Butterfly</p>
<p>逗号用 &amp;sbquo; 代替</p>
<h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% note simple %}</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default simple %}</span><br><span class="line">default 提示塊標籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary simple %}</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success simple %}</span><br><span class="line">success 提示塊標籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info simple %}</span><br><span class="line">info 提示塊標籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning simple %}</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger simple %}</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note simple"><p>默認 提示塊標籤</p>
</div>

<div class="note default simple"><p>default 提示塊標籤</p>
</div>

<div class="note primary simple"><p>primary 提示塊標籤</p>
</div>

<div class="note success simple"><p>success 提示塊標籤</p>
</div>

<div class="note info simple"><p>info 提示塊標籤</p>
</div>

<div class="note warning simple"><p>warning 提示塊標籤</p>
</div>

<div class="note danger simple"><p>danger 提示塊標籤</p>
</div>


<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% note 'fab fa-cc-visa' simple %}</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note blue 'fas fa-bullhorn' simple %}</span><br><span class="line">2021年快到了....</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note pink 'fas fa-car-crash' simple %}</span><br><span class="line">小心開車 安全至上</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note red 'fas fa-fan' simple%}</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note orange 'fas fa-battery-half' simple %}</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note purple 'far fa-hand-scissors' simple %}</span><br><span class="line">剪刀石頭布</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note green 'fab fa-internet-explorer' simple %}</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p>
</div>
<div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p>
</div>
<div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p>
</div>
<div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p>
</div>
<div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p>
</div>
<div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p>
</div>
<div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p>
</div>
<div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p>
</div>
<div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p>
</div>
<div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p>
</div>
<div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p>
</div>
<div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p>
</div>
<div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p>
</div>
<div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p>
</div>

<h3 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h3><h4 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color: bg;color: color">display
  </button><span class="hide-content">content</span></span>, 例如
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">哪個英文字母最酷？ {% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %}</span><br><span class="line"></span><br><span class="line">門裏站着一個人? {% hideInline 閃 %}</span><br></pre></td></tr></tbody></table></figure>
<p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案
  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p>
<p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click
  </button><span class="hide-content">閃</span></span></p>
<h4 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% hideBlock display,bg,color %}</span><br><span class="line">content</span><br><span class="line">{% endhideBlock %}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>content: 文本内容</li>
<li>display: 按钮显示的文字(可选)</li>
<li>bg: 按钮的背景颜色(可选)</li>
<li>color: 按钮文字的颜色(可选)<br>例如<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">查看答案</span><br><span class="line">{% hideBlock 查看答案 %}</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">{% endhideBlock %}</span><br></pre></td></tr></tbody></table></figure>
查看答案<div class="hide-block"><button type="button" class="hide-button" style="">查看答案
    </button><div class="hide-content"><p>傻子，怎么可能有答案</p>
</div></div></li>
</ul>
<h4 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% hideToggle display,bg,color %}</span><br><span class="line">content</span><br><span class="line">{% endhideToggle %}</span><br></pre></td></tr></tbody></table></figure>
<p>例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% hideToggle Butterfly安装方法 %}</span><br><span class="line">在你的博客根目录里</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">{% endhideToggle %}</span><br></pre></td></tr></tbody></table></figure>
<details class="toggle"><summary class="toggle-button" style="">Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p>
<p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
<p>如果想要安装比较新的dev分支，可以</p>
<p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
</div></details>


<h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h3><p>使用mermaid标签可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图）<br><a href="https://mermaid-js.github.io/mermaid/#/">mermaid文档</a></p>
<h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>使用方法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs Unique name, [index] %}</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line">                Will be used in #id's as prefix for each tab with their index numbers.</span><br><span class="line">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                Only for current url of post/page must be unique!</span><br><span class="line">[index]       : Index number of active tab.</span><br><span class="line">                If not specified, first tab (1) will be selected.</span><br><span class="line">                If index is -1, no tab will be selected. It's will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption of current tab.</span><br><span class="line">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')</span><br><span class="line">                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></tbody></table></figure>
<p>例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs test1, 2 %}</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab active"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}</span><br><span class="line"></span><br><span class="line">[url]         : 鏈接</span><br><span class="line">[text]        : 按鈕文字</span><br><span class="line">[icon]        : [可選] 圖標</span><br><span class="line">[color]       : [可選] 按鈕背景顔色(默認style時）</span><br><span class="line">                      按鈕字體和邊框顔色(outline時)</span><br><span class="line">                      default/blue/pink/red/purple/orange/green</span><br><span class="line">[style]       : [可選] 按鈕樣式 默認實心</span><br><span class="line">                      outline/留空</span><br><span class="line">[layout]      : [可選] 按鈕佈局 默認為line</span><br><span class="line">                      block/留空</span><br><span class="line">[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊</span><br><span class="line">                      center/right/留空</span><br><span class="line">[size]        : [可選] 按鈕大小</span><br><span class="line">                      larger/留空</span><br></pre></td></tr></tbody></table></figure>

<h3 id="inlineImg"><a href="#inlineImg" class="headerlink" title="inlineImg"></a>inlineImg</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% inlineImg [src] [height] %}</span><br><span class="line"></span><br><span class="line">[src]      :    圖片鏈接</span><br><span class="line">[height]   ：   圖片高度限制【可選】</span><br></pre></td></tr></tbody></table></figure>

<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% label text color %}</span><br><span class="line">color: default/blue/pink/red/purple/orange/green</span><br></pre></td></tr></tbody></table></figure>
<p>例如<br><code>{% label text blue %}</code><mark class="hl-label blue">text</mark> </p>
<h3 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% timeline title,color %}</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">{% endtimeline %}</span><br></pre></td></tr></tbody></table></figure>

<p>例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% timeline 2022 %}</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">{% endtimeline %}</span><br></pre></td></tr></tbody></table></figure>
<div class="timeline undefined"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p>
</div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p>
</div></div><div class="timeline-item-content"><p>這是測試頁面</p>
</div></div></div>

<h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><p>友链</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% flink %}</span><br><span class="line">link.yml内容</span><br><span class="line">{% endflink %}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<div class="flink"><div class="flink-name">Markdown 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://markdown.com.cn/" title="Markdown Documentation" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://markdown.com.cn/hero.png" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Markdown Documentation">
              </div>
              <div class="flink-item-name">Markdown Documentation</div> 
              <div class="flink-item-desc" title="Markdown 官方教程">Markdown 官方教程</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://butterfly.js.org/" title="Butterfly theme 文档" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://butterfly.js.org/img/avatar.png" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Butterfly theme 文档">
              </div>
              <div class="flink-item-name">Butterfly theme 文档</div> 
              <div class="flink-item-desc" title="Butterfly theme 官方博客">Butterfly theme 官方博客</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Tool</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Baisc grammar</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello</title>
    <url>/2022/12/13/13-52-03/</url>
    <content><![CDATA[<h1 id="Hello-This-is-Patrick’s-blog"><a href="#Hello-This-is-Patrick’s-blog" class="headerlink" title="Hello, This is Patrick’s blog!"></a><em><strong>Hello, This is Patrick’s blog!</strong></em></h1><p><a href="/about/"></a></p><h2><a href="/about/">关于我</a></h2><p></p>
<hr>
<div class="flink"><div class="flink-name">相关博客</div><div class="flink-desc">点一下, 打开宝盒</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://xavier72bit.github.io/" title="Xavier" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://xavier72bit.github.io/img/touxiang.jpg" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Xavier">
              </div>
              <div class="flink-item-name">Xavier</div> 
              <div class="flink-item-desc" title="Xavier的博客主页">Xavier的博客主页</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Index</category>
        <category>Hello</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 的学习笔记</title>
    <url>/2022/12/14/21-44-00/</url>
    <content><![CDATA[<h1 id="Nginx-学习笔记"><a href="#Nginx-学习笔记" class="headerlink" title="Nginx 学习笔记"></a><strong>Nginx</strong> 学习笔记</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">#user nobody; # 启动用户</span><br><span class="line"></span><br><span class="line">worker_processes  6; # 业务进程数量（子进程）</span><br><span class="line"># 主进程名叫master，启动nginx后，master会启动worker，一般worker数量不超过ngingx可用的CPU内核数量</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024; # 单个业务进程可接受的连接数</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># http模块</span><br><span class="line">http {</span><br><span class="line">    include       mime.types; # 引入mime.type模块</span><br><span class="line">    default_type  application/octet-stream; # 若mime类型未匹配成功， 默认使用的传输方式方式（ octet-stream 二进制字节流）传输</span><br><span class="line"></span><br><span class="line">    sendfile        on; # Linux的sendfile（socket、file、len）高效网络传输，即数据0拷贝</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65; # 连接超时时间</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    # http.sever模块，即nginx的服务模块（虚拟主机），可有多个，匹配顺序从头到尾</span><br><span class="line">    server {</span><br><span class="line">        listen       80; # 服务主机监听的端口号</span><br><span class="line">        server_name  localhost; # 服务主机的主机名、域名，可有多个，*为通配符，也可以用正则表达式</span><br><span class="line">        # listen与server_name元组应具有唯一性</span><br><span class="line"></span><br><span class="line">        # URI匹配</span><br><span class="line">        location / {</span><br><span class="line">            root   html; # URI指向的文件夹。注意：路径分割不可用反斜线</span><br><span class="line">            index  index.html index.htm; # 默认页</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        #                   状态码      跳转页面</span><br><span class="line">        error_page   500 502 503 504  /50x.html; # 错误页配置</span><br><span class="line">        location = /50x.html { # 当URI为/50x.html时</span><br><span class="line">            root   html; # 在nginx根目录的html目录寻找</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name Patrick SpongeBob;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root C:/Patrick-program/nginx-1.23.2/learn-test/8080;</span><br><span class="line">            index hello.html;</span><br><span class="line">        }</span><br><span class="line">        location /index { # 多个location时，执行最长匹配原则</span><br><span class="line">            root learn-text/8080; # 最终指向路径为/8080/index</span><br><span class="line">            index hello.html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen 9000;</span><br><span class="line">        server_name _9000;</span><br><span class="line"></span><br><span class="line">        location /{</span><br><span class="line">            proxy_pass http://127.0.0.1:8000; # 代理其他url</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    upstream patrick_severs { # 别名</span><br><span class="line">        server 127.0.0.1:8000 weight=7; # weight 是权重，不写默认是1</span><br><span class="line">        server 127.0.0.1:8001 weight=2 down; # down意味着下线</span><br><span class="line">        server 127.0.0.1:8002 backup; # backup意味着是备用机，一般情况不会被访问</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen 9001;</span><br><span class="line">        server_name _9001;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            proxy_pass http://patrick_severs; # 利用别名代理其他url，实现负载均衡，当服务挂掉时，会执行retry</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen 9002;</span><br><span class="line">        server_name _9002;</span><br><span class="line"></span><br><span class="line">        location ~/(js|img|css) { # 利用正则表达式匹配路径,~*和~好像没区别，都不区分大小写</span><br><span class="line">            # 正则表达式匹配</span><br><span class="line">            # ~ 区分大小写匹配</span><br><span class="line">            # ~* 不区分大小写匹配</span><br><span class="line">            # !~和!~*分别为区分大小写不匹配及不区分大小写不匹配</span><br><span class="line">            # ^ 以什么开头的匹配</span><br><span class="line">            # $ 以什么结尾的匹配</span><br><span class="line">            # = 表示精确匹配</span><br><span class="line">            # 转义字符\可以转. * ?等</span><br><span class="line">            # (v1|v2|v3|v4):或匹配模式</span><br><span class="line">            # * 代表任意字符</span><br><span class="line"></span><br><span class="line">            # 首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</span><br><span class="line"></span><br><span class="line">            # 文件及目录匹配</span><br><span class="line">            # -f和!-f用来判断是否存在文件</span><br><span class="line">            # -d和!-d用来判断是否存在目录</span><br><span class="line">            # -e和!-e用来判断是否存在文件或目录</span><br><span class="line">            # -x和!-x用来判断文件是否可执行</span><br><span class="line">            proxy_pass http://127.0.0.1:8000; </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /page {</span><br><span class="line">            #               匹配内容                    替换内容                    规则</span><br><span class="line">            rewrite     ^/page/([0-9]+)/([0-9]+)$    /page?pageNum=$1&amp;size=$2    break;</span><br><span class="line">            # 规则取值</span><br><span class="line">            # last        相当于apache里面的[L]标记，表示rewrite。</span><br><span class="line">            # break       本条规则匹配完成后，终止匹配，不再匹配后面的规则。</span><br><span class="line">            # redirect    返回302临时重定向，浏览器地址会显示跳转后的URL地址。</span><br><span class="line">            # permanent   返回301永久重定向，浏览器地址会显示跳转后的URL地址。</span><br><span class="line">            proxy_pass http://127.0.0.1:8000; </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen 9003;</span><br><span class="line">        server_name _9003;</span><br><span class="line"></span><br><span class="line">        location /{</span><br><span class="line">            proxy_pass http://127.0.0.1:8000;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /href {</span><br><span class="line">            valid_referers 127.0.0.1; # 检测请求头里的Referer的网址（可配多个值用空格分隔），取值还可以是none（不存在Referer请求头）、blocked（Referer请求头的值被防火墙或代理服务器删除或伪装，不以http://或https://开头）</span><br><span class="line">            if ($invalid_referer) { # 当检测不通过时</span><br><span class="line">                return 401; # 返回401</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            proxy_pass http://127.0.0.1:8000;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        error_page   401  /401.html;</span><br><span class="line">        location = /401.html {</span><br><span class="line">            root   learn-test/error-page;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Network</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>Nginx</tag>
        <tag>Maintenance</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring security 的学习笔记</title>
    <url>/2022/12/14/14-29-47/</url>
    <content><![CDATA[<h1 id="Spring-security-学习笔记"><a href="#Spring-security-学习笔记" class="headerlink" title="Spring security 学习笔记"></a><strong>Spring security</strong> 学习笔记</h1><h2 id="关键过滤器"><a href="#关键过滤器" class="headerlink" title="关键过滤器"></a>关键过滤器</h2><h3 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span></span>
<p>方法级权限过滤器，位于过滤链最底部</p>
<h3 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.web.access.ExceptionTranslationFilter</span></span>
<p>异常过滤器，处理认证授权过程中抛出的异常</p>
<h3 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span></span>
<p>校验/login（POST）请求提交的用户名和密码</p>
<h2 id="过滤器加载流程"><a href="#过滤器加载流程" class="headerlink" title="过滤器加载流程"></a>过滤器加载流程</h2><p>使用Spring Security配置过滤器（懒加载）</p>
<ol>
<li>在 <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> DelegatingFilterProxy
  </button><span class="hide-content">org.springframework.web.filter.DelegatingFilterProxy</span></span> 类的 doFilter() 方法中执行<span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> initDelegate
  </button><span class="hide-content">Filter initDelegate(WebApplicationContext wac)</span></span> 方法来获取<span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #4d4d4d"> FilterChainProxy
  </button><span class="hide-content">org.springframework.security.web.FilterChainProxy</span></span>这个过滤器链</li>
<li>在 <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> FilterChainProxy
  </button><span class="hide-content">org.springframework.security.web.FilterChainProxy</span></span> 类的 doFilter() 方法中 执行 <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> doFilterInternal
  </button><span class="hide-content">void doFilterInternal(ServletRequest request‚ ServletResponse response‚ FilterChain chain)</span></span> 方法来注册Spring Security的过滤器</li>
</ol>
<h2 id="涉及到的过滤器"><a href="#涉及到的过滤器" class="headerlink" title="涉及到的过滤器"></a><strong>涉及到的过滤器</strong></h2><div class="hide-block"><button type="button" class="hide-button" style="">查看详情
    </button><div class="hide-content"><h3 id="DisableEncodeUrlFilter"><a href="#DisableEncodeUrlFilter" class="headerlink" title="DisableEncodeUrlFilter"></a>DisableEncodeUrlFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.session.DisableEncodeUrlFilter</span></span></p>
<p>Disables encoding URLs using the HttpServletResponse to prevent including the session id in URLs which is not considered URL because the session id can be leaked in things like HTTP access logs.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>禁用使用HttpServletResponse对URL进行编码，以防止在URL中包含会话id，因为会话id可能会在HTTP访问日志等内容中泄漏，因此不被视为URL。</p>
</div></details>

<h3 id="WebAsyncManagerIntegrationFilter"><a href="#WebAsyncManagerIntegrationFilter" class="headerlink" title="WebAsyncManagerIntegrationFilter"></a>WebAsyncManagerIntegrationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter</span></span></p>
<p>Provides integration between the SecurityContext and Spring Web’s WebAsyncManager by using the SecurityContextCallableProcessingInterceptor.beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, Callable) to populate the SecurityContext on the Callable.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>通过使用SecurityContextCallableProcessingInterceptor.beforencurrentHandling（org.springframework.Web.context.request.NativeWebRequest，Callable）在可调用对象上填充SecurityContext，提供SecurityContext和Spring Web的WebAsyncManager之间的集成。</p>
</div></details>

<h3 id="SecurityContextPersistenceFilter"><a href="#SecurityContextPersistenceFilter" class="headerlink" title="SecurityContextPersistenceFilter"></a><del>SecurityContextPersistenceFilter</del></h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.context.SecurityContextPersistenceFilter</span></span></p>
<p>Populates the SecurityContextHolder with information obtained from the configured SecurityContextRepository prior to the request and stores it back in the repository once the request has completed and clearing the context holder. By default it uses an HttpSessionSecurityContextRepository. See this class for information HttpSession related configuration options.<br>This filter will only execute once per request, to resolve servlet container (specifically Weblogic) incompatibilities.<br>This filter MUST be executed BEFORE any authentication processing mechanisms. Authentication processing mechanisms (e.g. BASIC, CAS processing filters etc) expect the SecurityContextHolder to contain a valid SecurityContext by the time they execute.<br>This is essentially a refactoring of the old HttpSessionContextIntegrationFilter to delegate the storage issues to a separate strategy, allowing for more customization in the way the security context is maintained between requests.<br>The forceEagerSessionCreation property can be used to ensure that a session is always available before the filter chain executes (the default is false, as this is resource intensive and not recommended).</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>使用请求之前从配置的SecurityContextRepository获得的信息填充SecurityContextHolder，并在请求完成并清除上下文持有者后将其存储回存储库中。默认情况下，它使用HttpSessionSecurityContextRepository。有关HttpSession相关配置选项的信息，请参阅此类。<br>每个请求只执行一次该过滤器，以解决servlet容器（特别是Weblogic）不兼容问题。<br>必须在任何身份验证处理机制之前执行此筛选器。身份验证处理机制（例如BASIC、CAS处理过滤器等）期望SecurityContextHolder在执行时包含有效的SecurityContext。<br>这本质上是对旧HttpSessionContextIntegrationFilter的重构，以将存储问题委托给一个单独的策略，从而允许在请求之间维护安全上下文的方式进行更多的定制。<br>forceEagleSessionCreation属性可用于确保在筛选器链执行之前会话始终可用（默认值为false，因为这是资源密集型的，不建议使用）。</p>
</div></details>

<p>已弃用,替代者: SecurityContextHolderFilter:</p>
<p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.context.SecurityContextHolderFilter</span></span></p>
<p>A javax.servlet.Filter that uses the SecurityContextRepository to obtain the SecurityContext and set it on the SecurityContextHolder. This is similar to SecurityContextPersistenceFilter except that the SecurityContextRepository.saveContext(SecurityContext, HttpServletRequest, HttpServletResponse) must be explicitly invoked to save the SecurityContext. This improves the efficiency and provides better flexibility by allowing different authentication mechanisms to choose individually if authentication should be persisted.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>javax.servlet。使用SecurityContextRepository获取SecurityContext并在SecurityContextHolder上设置它的筛选器。除了SecurityContextRepository之外，这与SecurityContextPersistenceFilter类似。必须显式调用saveContext（SecurityContext、HttpServletRequest、HttpServletsResponse）来保存SecurityContext。这通过允许不同的身份验证机制单独选择是否应持久化身份验证，提高了效率并提供了更好的灵活性。</p>
</div></details>

<h3 id="HeaderWriterFilter"><a href="#HeaderWriterFilter" class="headerlink" title="HeaderWriterFilter"></a>HeaderWriterFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.header.HeaderWriterFilter</span></span></p>
<p>Filter implementation to add headers to the current response. Can be useful to add certain headers which enable browser protection. Like X-Frame-Options, X-XSS-Protection and X-Content-Type-Options.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>筛选器实现以向当前响应添加标头。添加启用浏览器保护的某些标头可能很有用。与X-Frame-Options、X-XSS-Protect和X-Content-Type-Options类似。</p>
</div></details>

<h3 id="CsrfFilter"><a href="#CsrfFilter" class="headerlink" title="CsrfFilter"></a>CsrfFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.csrf.CsrfFilter</span></span></p>
<p>Applies CSRF protection using a synchronizer token pattern. Developers are required to ensure that CsrfFilter is invoked for any request that allows state to change. Typically this just means that they should ensure their web application follows proper REST semantics (i.e. do not change state with the HTTP methods GET, HEAD, TRACE, OPTIONS).<br>Typically the CsrfTokenRepository implementation chooses to store the CsrfToken in HttpSession with HttpSessionCsrfTokenRepository wrapped by a LazyCsrfTokenRepository. This is preferred to storing the token in a cookie which can be modified by a client application.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>使用同步器令牌模式应用CSRF保护。开发人员必须确保对任何允许状态更改的请求调用CsrfFilter。通常，这意味着他们应该确保他们的web应用程序遵循正确的REST语义（即，不要使用HTTP方法GET、HEAD、TRACE和OPTIONS更改状态）。<br>通常，CsrfTokenRepository实现选择将CsrfToken存储在HttpSession中，HttpSessionCsrfTokenRepository由LazySrfTokenStore封装。这比将令牌存储在可由客户端应用程序修改的cookie中更可取。</p>
</div></details>

<h3 id="LogoutFilter"><a href="#LogoutFilter" class="headerlink" title="LogoutFilter"></a>LogoutFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.logout.LogoutFilter</span></span></p>
<p>Logs a principal out.<br>Polls a series of LogoutHandlers. The handlers should be specified in the order they are required. Generally you will want to call logout handlers TokenBasedRememberMeServices and SecurityContextLogoutHandler (in that order).<br>After logout, a redirect will be performed to the URL determined by either the configured LogoutSuccessHandler or the logoutSuccessUrl, depending on which constructor was used.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>注销委托人。<br>轮询一系列LogoutHandler。应按照所需的顺序指定处理程序。通常，您需要调用注销处理程序TokenBasedRememberMeServices和SecurityContextLogoutHandler（按顺序）。<br>注销后，将根据使用的构造函数，重定向到由配置的LogoutSuccessHandler或LogoutSucceUrl确定的URL。</p>
</div></details>

<h3 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span></span></p>
<p>Processes an authentication form submission. Called AuthenticationProcessingFilter prior to Spring Security 3.0.<br>Login forms must present two parameters to this filter: a username and password. The default parameter names to use are contained in the static fields SPRING_SECURITY_FORM_USERNAME_KEY and SPRING_SECURITY_FORM_PASSWORD_KEY. The parameter names can also be changed by setting the usernameParameter and passwordParameter properties.<br>This filter by default responds to the URL /login.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>处理身份验证表单提交。在Spring Security 3.0之前调用AuthenticationProcessingFilter。<br>登录表单必须为此筛选器提供两个参数：用户名和密码。要使用的默认参数名包含在静态字段SPRING_SECURITY_FORM_USERNAME_KEY和SPRING_SETURITY_FFORM_PASSWORD_KEY中。还可以通过设置usernameParameter和passwordParameter属性来更改参数名称。<br>默认情况下，此筛选器响应URL/登录。</p>
</div></details>

<h3 id="DefaultLoginPageGeneratingFilter"><a href="#DefaultLoginPageGeneratingFilter" class="headerlink" title="DefaultLoginPageGeneratingFilter"></a>DefaultLoginPageGeneratingFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter</span></span></p>
<p>For internal use with namespace configuration in the case where a user doesn’t configure a login page. The configuration code will insert this filter in the chain instead. Will only work if a redirect is used to the login page.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>在用户未配置登录页面的情况下，用于内部命名空间配置。配置代码将在链中插入此筛选器。仅当重定向到登录页面时才有效。</p>
</div></details>

<h3 id="DefaultLogoutPageGeneratingFilter"><a href="#DefaultLogoutPageGeneratingFilter" class="headerlink" title="DefaultLogoutPageGeneratingFilter"></a>DefaultLogoutPageGeneratingFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter</span></span></p>
<p>Generates a default log out page.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>生成默认注销页面。</p>
</div></details>

<h3 id="BasicAuthenticationFilter"><a href="#BasicAuthenticationFilter" class="headerlink" title="BasicAuthenticationFilter"></a>BasicAuthenticationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.<a href="http://www.basicauthenticationfilter/">www.BasicAuthenticationFilter</a></span></span></p>
<p>Processes a HTTP request’s BASIC authorization headers, putting the result into the SecurityContextHolder.<br>For a detailed background on what this filter is designed to process, refer to RFC 1945, Section 11.1 . Any realm name presented in the HTTP request is ignored.<br>In summary, this filter is responsible for processing any request that has a HTTP request header of Authorization with an authentication scheme of Basic and a Base64-encoded username:password token. For example, to authenticate user “Aladdin” with password “open sesame” the following header would be presented:<br>    Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==<br>This filter can be used to provide BASIC authentication services to both remoting protocol clients (such as Hessian and SOAP) as well as standard user agents (such as Internet Explorer and Netscape).<br>If authentication is successful, the resulting Authentication object will be placed into the SecurityContextHolder.<br>If authentication fails and ignoreFailure is false (the default), an AuthenticationEntryPoint implementation is called (unless the ignoreFailure property is set to true). Usually this should be BasicAuthenticationEntryPoint, which will prompt the user to authenticate again via BASIC authentication.<br>Basic authentication is an attractive protocol because it is simple and widely deployed. However, it still transmits a password in clear text and as such is undesirable in many situations. Digest authentication is also provided by Spring Security and should be used instead of Basic authentication wherever possible. See DigestAuthenticationFilter.<br>Note that if a RememberMeServices is set, this filter will automatically send back remember-me details to the client. Therefore, subsequent requests will not need to present a BASIC authentication header as they will be authenticated using the remember-me mechanism.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>处理HTTP请求的BASIC授权头，将结果放入SecurityContextHolder。<br>有关此筛选器设计处理的详细背景信息，请参阅RFC 1945第11.1节。HTTP请求中出现的任何领域名称都将被忽略。<br>总之，此筛选器负责处理具有HTTP请求头Authorization、身份验证方案为Basic和Base64编码的用户名：密码令牌的任何请求。例如，要使用密码“open芝麻”验证用户“Aladdin”，将显示以下标头：<br>授权：基本QWxhZGRpbjpvcGVuIHNlc2FtZQ==<br>此筛选器可用于向远程协议客户端（如Hessian和SOAP）以及标准用户代理（如Internet Explorer和Netscape）提供BASIC身份验证服务。<br>如果身份验证成功，则生成的身份验证对象将被放置到SecurityContextHolder中。<br>如果身份验证失败且ignoreFailure为false（默认值），则调用AuthenticationEntryPoint实现（除非ignoreFailion属性设置为true）。通常这应该是BasicAuthenticationEntryPoint，它将提示用户通过BASIC身份验证再次进行身份验证。<br>基本身份验证是一个有吸引力的协议，因为它简单且部署广泛。然而，它仍然以明文形式传输密码，因此在许多情况下是不可取的。摘要式身份验证也由SpringSecurity提供，应尽可能使用它来代替基本身份验证。请参阅DigestAuthenticationFilter。<br>请注意，如果设置了RememberMeServices，则此过滤器将自动向客户端发回记住我的详细信息。因此，后续请求不需要呈现BASIC认证头，因为它们将使用记住我的机制进行认证。</p>
</div></details>

<h3 id="RequestCacheAwareFilter"><a href="#RequestCacheAwareFilter" class="headerlink" title="RequestCacheAwareFilter"></a>RequestCacheAwareFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.savedrequest.RequestCacheAwareFilter</span></span></p>
<p>Responsible for reconstituting the saved request if one is cached and it matches the current request.<br>It will call getMatchingRequest on the configured RequestCache. If the method returns a value (a wrapper of the saved request), it will pass this to the filter chain’s doFilter method. If null is returned by the cache, the original request is used and the filter has no effect.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>负责重新构建保存的请求，如果其中一个请求被缓存并且与当前请求匹配。<br>它将在配置的RequestCache上调用getMatchingRequest。如果该方法返回一个值（保存的请求的包装器），它会将其传递给过滤器链的doFilter方法。如果缓存返回null，则使用原始请求，过滤器无效。</p>
</div></details>

<h3 id="SecurityContextHolderAwareRequestFilter"><a href="#SecurityContextHolderAwareRequestFilter" class="headerlink" title="SecurityContextHolderAwareRequestFilter"></a>SecurityContextHolderAwareRequestFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter</span></span></p>
<p>A Filter which populates the ServletRequest with a request wrapper which implements the servlet API security methods.<br>SecurityContextHolderAwareRequestWrapper is extended to provide the following additional methods:</p>
<ul>
<li>HttpServletRequest.authenticate(HttpServletResponse) - Allows the user to determine if they are authenticated and if not send the user to the login page. See setAuthenticationEntryPoint(AuthenticationEntryPoint).</li>
<li>HttpServletRequest.login(String, String) - Allows the user to authenticate using the AuthenticationManager. See setAuthenticationManager(AuthenticationManager).</li>
<li>HttpServletRequest.logout() - Allows the user to logout using the LogoutHandlers configured in Spring Security. See setLogoutHandlers(List).</li>
<li>AsyncContext.start(Runnable) - Automatically copy the SecurityContext from the SecurityContextHolder found on the Thread that invoked AsyncContext.start(Runnable) to the Thread that processes the Runnable.</li>
</ul>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>一个过滤器，用实现servlet API安全方法的请求包装器填充ServletRequest。<br>SecurityContextHolderAwareRequestWrapper被扩展以提供以下附加方法：</p>
<ul>
<li>HttpServletRequest.authenticate（HttpServletResponse）-允许用户确定他们是否经过身份验证，如果没有，则将用户发送到登录页面。请参见setAuthenticationEntryPoint（AuthenticationEntrePoint）。  </li>
<li>HttpServletRequest.login（String，String）-允许用户使用AuthenticationManager进行身份验证。请参阅setAuthenticationManager（AuthenticationManager）。  </li>
<li>HttpServletRequest.logout（）-允许用户使用Spring Security中配置的LogoutHandlers注销。请参见setLogoutHandlers（列表）。  </li>
<li>AsyncContext.start（Runnable）-自动从调用AsyncContext的线程上找到的SecurityContextHolder复制SecurityContext。启动（Runnable）到处理Runnable的线程。</li>
</ul>
</div></details>
 
<h3 id="AnonymousAuthenticationFilter"><a href="#AnonymousAuthenticationFilter" class="headerlink" title="AnonymousAuthenticationFilter"></a>AnonymousAuthenticationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">rg.springframework.security.web.authentication.AnonymousAuthenticationFilter</span></span></p>
<p>Detects if there is no Authentication object in the SecurityContextHolder, and populates it with one if needed.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>检测SecurityContextHolder中是否没有身份验证对象，并在需要时用一个身份验证对象填充。</p>
</div></details>

<h3 id="SessionManagementFilter"><a href="#SessionManagementFilter" class="headerlink" title="SessionManagementFilter"></a>SessionManagementFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.session.SessionManagementFilter</span></span></p>
<p>Detects that a user has been authenticated since the start of the request and, if they have, calls the configured SessionAuthenticationStrategy to perform any session-related activity such as activating session-fixation protection mechanisms or checking for multiple concurrent logins.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>检测用户自请求开始以来是否已通过身份验证，如果已通过，则调用配置的SessionAuthenticationStrategy以执行任何与会话相关的活动，例如激活会话固定保护机制或检查多个并发登录。</p>
</div></details>

<h3 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.access.ExceptionTranslationFilter</span></span></p>
<p>Handles any AccessDeniedException and AuthenticationException thrown within the filter chain.<br>This filter is necessary because it provides the bridge between Java exceptions and HTTP responses. It is solely concerned with maintaining the user interface. This filter does not do any actual security enforcement.<br>If an AuthenticationException is detected, the filter will launch the authenticationEntryPoint. This allows common handling of authentication failures originating from any subclass of org.springframework.security.access.intercept.AbstractSecurityInterceptor.<br>If an AccessDeniedException is detected, the filter will determine whether or not the user is an anonymous user. If they are an anonymous user, the authenticationEntryPoint will be launched. If they are not an anonymous user, the filter will delegate to the AccessDeniedHandler. By default the filter will use AccessDeniedHandlerImpl.<br>To use this filter, it is necessary to specify the following properties:</p>
<ul>
<li>authenticationEntryPoint indicates the handler that should commence the authentication process if an AuthenticationException is detected. Note that this may also switch the current protocol from http to https for an SSL login.</li>
<li>requestCache determines the strategy used to save a request during the authentication process in order that it may be retrieved and reused once the user has authenticated. The default implementation is HttpSessionRequestCache.</li>
</ul>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>处理筛选器链中引发的任何AccessDeniedException和AuthenticationException。<br>这个过滤器是必要的，因为它提供了Java异常和HTTP响应之间的桥梁。它只关心维护用户界面。此筛选器不执行任何实际的安全强制。<br>如果检测到AuthenticationException，则过滤器将启动authenticationEntryPoint。这允许对源自org.springframework.security.access.intercept.AbstractSecurityInterceptor的任何子类的身份验证失败进行常见处理。<br>如果检测到AccessDeniedException，则筛选器将确定用户是否为匿名用户。如果他们是匿名用户，将启动authenticationEntryPoint。如果他们不是匿名用户，则筛选器将委托给AccessDeniedHandler。默认情况下，过滤器将使用AccessDeniedHandlerImpl。<br>要使用此筛选器，必须指定以下属性：</p>
<ul>
<li>authenticationEntryPoint指示在检测到AuthenticationException时应开始身份验证过程的处理程序。注意，对于SSL登录，这也可能会将当前协议从http切换为https。</li>
<li>requestCache确定用于在身份验证过程中保存请求的策略，以便在用户进行身份验证后可以检索和重用该请求。默认实现是HttpSessionRequestCache。</li>
</ul>
</div></details>

<h3 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span></span></p>
<p>Performs security handling of HTTP resources via a filter implementation.<br>The SecurityMetadataSource required by this security interceptor is of type FilterInvocationSecurityMetadataSource.<br>Refer to AbstractSecurityInterceptor for details on the workflow.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>通过过滤器实现执行HTTP资源的安全处理。<br>此安全拦截器所需的SecurityMetadataSource的类型为FilterInvocationSecurityMetadataSource。<br>有关工作流的详细信息，请参阅AbstractSecurityInterceptor。</p>
</div></details></div></div>

<h2 id="实现自定义的账号密码验证逻辑"><a href="#实现自定义的账号密码验证逻辑" class="headerlink" title="实现自定义的账号密码验证逻辑"></a>实现自定义的账号密码验证逻辑</h2><h3 id="创建UsernamePasswordAuthenticationFilter子类"><a href="#创建UsernamePasswordAuthenticationFilter子类" class="headerlink" title="创建UsernamePasswordAuthenticationFilter子类"></a>创建UsernamePasswordAuthenticationFilter子类</h3><p>重写下列方法</p>
<ul>
<li>Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)</li>
<li>void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</li>
<li>void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</li>
</ul>
<div class="hide-block"><button type="button" class="hide-button" style="">查看方法详情
    </button><div class="hide-content"><h4 id="attemptAuthentication方法"><a href="#attemptAuthentication方法" class="headerlink" title="attemptAuthentication方法"></a>attemptAuthentication方法</h4><p>Performs actual authentication.<br>The implementation should do one of the following:<br>-Return a populated authentication token for the authenticated user, indicating successful authentication<br>-Return null, indicating that the authentication process is still in progress. Before returning, the implementation should perform any additional work required to complete the process.<br>-Throw an AuthenticationException if the authentication process fails</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>执行实际身份验证。<br>实施应执行以下操作之一：</p>
<ul>
<li>为经过身份验证的用户返回填充的身份验证令牌，表示身份验证成功</li>
<li>返回null，表示身份验证过程仍在进行中。在返回之前，实施应执行完成流程所需的任何额外工作。</li>
<li>如果身份验证过程失败，则引发AuthenticationException</li>
</ul>
</div></details>

<h4 id="successfulAuthentication方法"><a href="#successfulAuthentication方法" class="headerlink" title="successfulAuthentication方法"></a>successfulAuthentication方法</h4><p>Default behaviour for successful authentication:</p>
<ul>
<li>Sets the successful Authentication object on the SecurityContextHolder  </li>
<li>Informs the configured RememberMeServices of the successful login  </li>
<li>Fires an InteractiveAuthenticationSuccessEvent via the configured ApplicationEventPublisher  </li>
<li>Delegates additional behaviour to the AuthenticationSuccessHandler.<br>Subclasses can override this method to continue the FilterChain after successful authentication.</li>
</ul>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>成功身份验证的默认行为:</p>
<ul>
<li>在SecurityContextHolder上设置成功的身份验证对象</li>
<li>通知已配置的RememberMeServices成功登录</li>
<li>通过配置的ApplicationEventPublisher激发InteractiveAuthenticationSuccessEvent</li>
<li>将其他行为委托给AuthenticationSuccessHandler。<br>子类可以重写此方法以在成功身份验证后继续FilterChain。</li>
</ul>
</div></details>

<h4 id="unsuccessfulAuthentication方法"><a href="#unsuccessfulAuthentication方法" class="headerlink" title="unsuccessfulAuthentication方法"></a>unsuccessfulAuthentication方法</h4><p>Default behaviour for unsuccessful authentication:<br>    Clears the SecurityContextHolder<br>    Stores the exception in the session (if it exists or allowSesssionCreation is set to true)<br>    Informs the configured RememberMeServices of the failed login<br>    Delegates additional behaviour to the AuthenticationFailureHandler.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>身份验证失败的默认行为:</p>
<ul>
<li>清除SecurityContextHolder</li>
<li>将异常存储在会话中（如果它存在或allowSesssionCreation设置为true）</li>
<li>通知配置的RememberMeServices登录失败</li>
<li>将其他行为委托给AuthenticationFailureHandler。</li>
</ul>
</div></details></div></div>

<h3 id="实现-UserDetailsService-接口"><a href="#实现-UserDetailsService-接口" class="headerlink" title="实现 UserDetailsService 接口"></a>实现 UserDetailsService 接口</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.core.userdetails.UserDetailsService</span></span>

<h4 id="oadUserByUsername方法"><a href="#oadUserByUsername方法" class="headerlink" title="oadUserByUsername方法"></a>oadUserByUsername方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">UserDetails loadUserByUsername(String username)</span></span>

<p>Locates the user based on the username. In the actual implementation, the search may possibly be case sensitive, or case insensitive depending on how the implementation instance is configured. In this case, the UserDetails object that comes back may have a username that is of a different case than what was actually requested..</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>根据用户名查找用户。在实际实现中，搜索可能区分大小写，或者不区分大小写（取决于实现实例的配置方式）。在这种情况下，返回的UserDetails对象的用户名可能与实际请求的用户名不同。</p>
</div></details>

<h3 id="实现-PasswordEncoder-接口"><a href="#实现-PasswordEncoder-接口" class="headerlink" title="实现 PasswordEncoder 接口"></a>实现 PasswordEncoder 接口</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.crypto.password.PasswordEncoder</span></span>

<h4 id="encode方法"><a href="#encode方法" class="headerlink" title="encode方法"></a>encode方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">String encode(CharSequence rawPassword)</span></span>

<p>Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or greater hash combined with an 8-byte or greater randomly generated salt.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>对原始密码进行编码。通常，一个好的编码算法应用SHA-1或更大的散列，并结合8字节或更大随机生成的盐。</p>
</div></details>

<h4 id="matches方法"><a href="#matches方法" class="headerlink" title="matches方法"></a>matches方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">boolean matches(CharSequence rawPassword‚ String encodedPassword)</span></span>

<p>Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded. Returns true if the passwords match, false if they do not. The stored password itself is never decoded.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>验证从存储中获得的编码密码与提交的原始密码是否匹配。如果密码匹配，则返回true，否则返回false。存储的密码本身永远不会被解码。</p>
</div></details>

<h4 id="upgradeEncoding方法"><a href="#upgradeEncoding方法" class="headerlink" title="upgradeEncoding方法"></a>upgradeEncoding方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">boolean upgradeEncoding(String encodedPassword)</span></span>

<p>Returns true if the encoded password should be encoded again for better security, else false. The default implementation always returns false.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>如果为了更好的安全性，应再次对编码的密码进行编码，则返回true，否则返回false。默认实现始终返回false。</p>
</div></details>

<h2 id="设置登录的用户名和密码"><a href="#设置登录的用户名和密码" class="headerlink" title="设置登录的用户名和密码"></a><strong>设置登录的用户名和密码</strong></h2><p>设置用户名和密码一般有配置文件和配置类两种方法. 需要连接数据库时, 需要使用配置类</p>
<div class="tabs" id="set-username-password"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#set-username-password-1">配置文件</button></li><li class="tab"><button type="button" data-href="#set-username-password-2">配置类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="set-username-password-1"><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">password</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="set-username-password-2"><p>继承自<del>org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</del>类的配置类，现在已弃用。现在推荐配置UserDetailsService的Bean</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 配置用户名和密码</span></span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">        users.createUser(User.withUsername(<span class="string">"user"</span>).password(<span class="string">"password"</span>).roles(<span class="string">"admin"</span>).build());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置加密器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance(); <span class="comment">// 不加密. 加密器详情见 PasswordEncoder 子类, 常用 BC 加密器</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="访问权限配置"><a href="#访问权限配置" class="headerlink" title="访问权限配置"></a>访问权限配置</h2><p>配置SecurityFilterChain的Bean, 若配置发生冲突, 则以先匹配到的规则为准:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span>() {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .formLogin() <span class="comment">// 登录设置</span></span><br><span class="line">                .loginPage(<span class="string">"/common/login"</span>) <span class="comment">// 配置登录页面路径</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 登录数据处理路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/common/index"</span>) <span class="comment">// 登录成功后跳转路径</span></span><br><span class="line"></span><br><span class="line">                .and().logout().logoutUrl(<span class="string">"/destroy"</span>) <span class="comment">// 设置注销接口路径</span></span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/common/index"</span>)<span class="comment">// 设置注销成功后跳转页面</span></span><br><span class="line">                .permitAll()</span><br><span class="line"></span><br><span class="line">                .and().authorizeRequests() <span class="comment">//配置页面访问权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/common/index"</span>, <span class="string">"/common/login"</span>).permitAll() <span class="comment">// 设置可直接访问的路径</span></span><br><span class="line"></span><br><span class="line">                .antMatchers(<span class="string">"/authority/boom"</span>).hasAuthority(<span class="string">"boom"</span>) <span class="comment">//根据权限配置可访问路径</span></span><br><span class="line">                .antMatchers(<span class="string">"/authority/read"</span>).hasAuthority(<span class="string">"read"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/authority/write"</span>).hasAuthority(<span class="string">"write"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/authority/read/write"</span>).hasAnyAuthority(<span class="string">"read"</span>, <span class="string">"write"</span>)</span><br><span class="line"></span><br><span class="line">                .antMatchers(<span class="string">"/role/boss"</span>).hasRole(<span class="string">"boss"</span>) <span class="comment">//根据角色配置可访问路径</span></span><br><span class="line">                .antMatchers(<span class="string">"/role/worker"</span>).hasAuthority(<span class="string">"ROLE_worker"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/role/root"</span>).hasRole(<span class="string">"root"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/role/boss/worker"</span>).hasAnyRole(<span class="string">"boss"</span>, <span class="string">"worker"</span>)</span><br><span class="line"></span><br><span class="line">                .antMatchers(<span class="string">"/ip/localhost"</span>).hasIpAddress(<span class="string">"192.168.0.0/16"</span>) <span class="comment">//根据IP配置可访问路径</span></span><br><span class="line">                .antMatchers(<span class="string">"/ip/localhost"</span>).hasIpAddress(<span class="string">"127.0.0.0/8"</span>)</span><br><span class="line"></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 其他所有页面皆为认证用户访问</span></span><br><span class="line"></span><br><span class="line">                .and().exceptionHandling().accessDeniedPage(<span class="string">"/error/403.html"</span>)<span class="comment">// 配置 403 路径</span></span><br><span class="line"></span><br><span class="line">                .and().csrf().disable() <span class="comment">// 关闭CSRF防护</span></span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><p>必须提交POST表单, 默认情况下, 用户名的name为username, 密码的name为password</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>先开在启动类开启 @EnableGlobalMethodSecurity</p>
<ul>
<li>@Secured<br>  先开在启动类开启 @EnableGlobalMethodSecurity(securedEnabled = true),对角色进行访问控制, 使用时对角色前加ROLE_前缀, 不支持对资源进行访问控制<br>  例如<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Secured({"ROLE_worker", "ROLE_boss"})</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>@PreAuthorize<br>  先开在启动类开启 @EnableGlobalMethodSecurity(prePostEnabled=true),提供了基于表达式的访问控制<br>  例如:<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize("hasAnyRole('worker','boss')")</span></span><br><span class="line"><span class="meta">@PreAuthorize("hasRole('worker') AND hasRole('boss')")</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>@PostAuthorize:<br>  先开在启动类开启 @EnableGlobalMethodSecurity(prePostEnabled=true),在方法执行后再进行权限验证, 适合验证带有返回值的权限, Spring EL 提供 返回对象能够在表达式语言中获取返回的对象returnObject, 提供了基于表达式的访问控制<br>  例如<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize(" returnObject != null &amp;&amp;  returnObject.username == authentication.name")</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>@PostFilter<br>  对返回数据过滤<br>  例如</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PostFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">controllerTest</span>() {</span><br><span class="line">    <span class="meta">@GetMapping("/post/filter")</span></span><br><span class="line">    <span class="meta">@PostFilter("filterObject.username == '1'")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">PostFilter</span><span class="params">()</span> {</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>().setUsername(<span class="string">"1"</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>().setUsername(<span class="string">"2"</span>));</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回数据</span></span><br><span class="line">        <span class="comment">// [{</span></span><br><span class="line">        <span class="comment">// "deleteFlag":null,</span></span><br><span class="line">        <span class="comment">// "lockFlag":null,</span></span><br><span class="line">        <span class="comment">// "userId":null,</span></span><br><span class="line">        <span class="comment">// "username":"1",</span></span><br><span class="line">        <span class="comment">// "password":null,</span></span><br><span class="line">        <span class="comment">// "authorities":null,</span></span><br><span class="line">        <span class="comment">// "enabled":false,</span></span><br><span class="line">        <span class="comment">// "credentialsNonExpired":false,</span></span><br><span class="line">        <span class="comment">// "accountNonExpired":false,</span></span><br><span class="line">        <span class="comment">// "accountNonLocked":false</span></span><br><span class="line">        <span class="comment">// }]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>@PreFilter<br>  对传入参数过滤<br>  例如<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PostFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">controllerTest</span>() {</span><br><span class="line">    <span class="meta">@PostMapping("/pre/filter")</span></span><br><span class="line">    <span class="meta">@PostFilter("filterObject.username == '1'")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">PreFilter</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span>{</span><br><span class="line">        <span class="comment">// 传入数据</span></span><br><span class="line">        <span class="comment">//[{</span></span><br><span class="line">        <span class="comment">//    "username": "1"</span></span><br><span class="line">        <span class="comment">//},{</span></span><br><span class="line">        <span class="comment">//    "username": "2"</span></span><br><span class="line">        <span class="comment">//},{</span></span><br><span class="line">        <span class="comment">//    "username": "3"</span></span><br><span class="line">        <span class="comment">//}]</span></span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回数据</span></span><br><span class="line">        <span class="comment">//[</span></span><br><span class="line">        <span class="comment">//    {</span></span><br><span class="line">        <span class="comment">//        "deleteFlag": null,</span></span><br><span class="line">        <span class="comment">//        "lockFlag": null,</span></span><br><span class="line">        <span class="comment">//        "userId": null,</span></span><br><span class="line">        <span class="comment">//        "username": "1",</span></span><br><span class="line">        <span class="comment">//        "password": null,</span></span><br><span class="line">        <span class="comment">//        "authorities": null,</span></span><br><span class="line">        <span class="comment">//        "enabled": false,</span></span><br><span class="line">        <span class="comment">//        "credentialsNonExpired": false,</span></span><br><span class="line">        <span class="comment">//        "accountNonExpired": false,</span></span><br><span class="line">        <span class="comment">//        "accountNonLocked": false</span></span><br><span class="line">        <span class="comment">//    }</span></span><br><span class="line">        <span class="comment">//]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><p>配置自动登录Service</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span>() {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PersistentTokenRepository <span class="title function_">persistentTokenRepository</span><span class="params">(DataSource dataSource)</span> {</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// jdbcTokenRepository.setCreateTableOnStartup(true); // 自动创建所需要的表</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http,</span></span><br><span class="line"><span class="params">                                    PersistentTokenRepository persistentTokenRepository,</span></span><br><span class="line"><span class="params">                                    UserDetailsService userDetailsService)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http.rememberMe().tokenRepository(persistentTokenRepository) <span class="comment">// 配置自动登录</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">60</span>)<span class="comment">// 自动登录有效时常</span></span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<div class="flink"><div class="flink-name">Spring security 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://spring.io/projects/spring-security" title="Spring security Documentation" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://spring.io/images/spring-logo-2022-dark-2f10e8055653ec50e693eb444291d742.svg" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Spring security Documentation">
              </div>
              <div class="flink-item-name">Spring security Documentation</div> 
              <div class="flink-item-desc" title="Spring security 官方文档">Spring security 官方文档</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Java</category>
        <category>Spring</category>
        <category>Spring boot</category>
        <category>Spring security</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Spring boot</tag>
        <tag>Spring security</tag>
        <tag>Securitu</tag>
      </tags>
  </entry>
</search>
