<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Groovy 的简单使用笔记</title>
    <url>/2022/12/14/11-52-35/</url>
    <content><![CDATA[<h1 id="Groovy-简单使用笔记"><a href="#Groovy-简单使用笔记" class="headerlink" title="Groovy 简单使用笔记"></a><strong>Groovy</strong> 简单使用笔记</h1><p>Groovy 是一种基于 JVM 的语言.<br>其语法特点类似于Python, Ruby 和 Smalltalk.<br>Groovy 代码能够与 Java 代码很好地结合, 同时也能用于扩展现有代码.<br>由于其运行在 JVM 上的特性, Groovy 也可以使用其他非 Java 语言编写的库</p>
<h2 id="简单使用-Groovy"><a href="#简单使用-Groovy" class="headerlink" title="简单使用 Groovy"></a>简单使用 Groovy</h2><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">version = <span class="number">1.0</span> <span class="comment">// 为Project的内置属性指定值</span></span><br><span class="line">description = <span class="string">'demo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定Project义属性, 所有实现了ExtensionAware接口的API都可通过ext添加属性</span></span><br><span class="line"><span class="comment">// gradle -P key=value task 启动时为project添加属性</span></span><br><span class="line"><span class="comment">// gradle -D org.gradle.project.key=value task 启动时为project添加属性</span></span><br><span class="line">ext.project_var0 = <span class="string">'value'</span> </span><br><span class="line">ext {</span><br><span class="line">    project_var1 = <span class="string">'value'</span></span><br><span class="line">    project_var2 = <span class="string">'value'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task _01 {</span><br><span class="line">    println <span class="string">"------------------------Task 01"</span> <span class="comment">// 构建阶段执行</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task _02 {</span><br><span class="line">    println <span class="string">"------------------------Task 02"</span></span><br><span class="line">    doLast {<span class="comment">// 运行阶段执行的Action, 晚于doFirst执行</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">3</span>){</span><br><span class="line">            print i + <span class="string">' '</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    doFirst {<span class="comment">// 运行阶段执行的Action</span></span><br><span class="line">        <span class="keyword">def</span> s = <span class="string">"hello"</span></span><br><span class="line">        println <span class="string">"First action: $s"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="attr">name:</span> <span class="string">'_03'</span>) {</span><br><span class="line">    doFirst {</span><br><span class="line">        println <span class="string">"tasks属性的类型: ${tasks.class}"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有task</span></span><br><span class="line">        tasks.each {e -&gt;</span><br><span class="line">            println e</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="attr">name:</span> <span class="string">'_04'</span>, <span class="attr">dependsOn:</span> <span class="string">'_02'</span>) {</span><br><span class="line">    doFirst {</span><br><span class="line">        println <span class="string">"Task 04 依赖 Task 02"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="attr">name:</span> <span class="string">'_05'</span>, <span class="attr">type:</span> Copy) {<span class="comment">// type的默认类型为DefaultTask, Copy类型的Task为复制文件任务</span></span><br><span class="line">    from <span class="string">'build.gradle'</span> <span class="comment">// 源文件</span></span><br><span class="line">    into <span class="string">'back'</span> <span class="comment">// 目标文件夹</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task _06(<span class="attr">dependsOn:</span> <span class="string">'_02'</span>, <span class="attr">type:</span> DefaultTask)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloTask</span> <span class="keyword">extends</span> <span class="title class_">DefaultTask</span> { <span class="comment">// 自定义Task类</span></span><br><span class="line">    <span class="comment">// @Optional</span></span><br><span class="line">    <span class="meta">@Internal</span></span><br><span class="line">    <span class="keyword">def</span> message = <span class="string">'Hello Task'</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TaskAction</span> <span class="comment">// 是用 @TaskAction 修饰的方法视为Action</span></span><br><span class="line">    <span class="keyword">def</span> hello() {</span><br><span class="line">        println <span class="string">"HelloTask -&gt; hello(): $message"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> info() {</span><br><span class="line">        println <span class="string">"HelloTask -&gt; info(): $message"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task hello(<span class="attr">type:</span> HelloTask) {</span><br><span class="line">    doFirst {</span><br><span class="line">        info()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task hello2(<span class="attr">type:</span> HelloTask) {</span><br><span class="line">    message = <span class="string">'HELLO2'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用外部自定义Task类</span></span><br><span class="line">task myTask(<span class="attr">type:</span> test.MyTask)</span><br><span class="line"></span><br><span class="line">task myTask2(<span class="attr">type:</span> test.MyTask) {</span><br><span class="line">    file = file(<span class="string">'dist.txt'</span>)</span><br><span class="line">    doLast {</span><br><span class="line">        show()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">'java'</span> <span class="comment">// 引入java插件</span></span><br><span class="line"></span><br><span class="line">task compile(<span class="attr">type:</span> JavaCompile) {<span class="comment">// 编译Java代码任务</span></span><br><span class="line"></span><br><span class="line">    source = fileTree(<span class="string">'src/main/java'</span>)</span><br><span class="line">    classpath = sourceSets.main.compileClasspath</span><br><span class="line">    destinationDirectory = file(<span class="string">'build/classes/main'</span>)</span><br><span class="line">    options.fork = <span class="literal">true</span></span><br><span class="line">    options.incremental = <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task run(<span class="attr">type:</span> JavaExec, <span class="attr">dependsOn:</span> <span class="string">'compile'</span>) {<span class="comment">// 运行Java代码任务</span></span><br><span class="line"></span><br><span class="line">    classpath = sourceSets.main.runtimeClasspath</span><br><span class="line">    mainClass = <span class="string">'Test'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task showProps { <span class="comment">// 显示Project和Task的内置属性</span></span><br><span class="line">    description = <span class="string">'showProps'</span> <span class="comment">// 为Task的内置属性配置值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定Task义属性</span></span><br><span class="line">    ext.task_var0 = <span class="string">'value'</span> </span><br><span class="line">    ext {</span><br><span class="line">        task_var1 = <span class="string">'value'</span></span><br><span class="line">        task_var2 = <span class="string">'value'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    doFirst {</span><br><span class="line">        println version</span><br><span class="line">        println description <span class="comment">// 当Project和Task有相同属性时, 优先使用Task的属性</span></span><br><span class="line">        println project.description</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task fileContentCopy { <span class="comment">// 增量式构建</span></span><br><span class="line">    <span class="keyword">def</span> sourceTxt = fileTree(<span class="string">"source"</span>)</span><br><span class="line">    <span class="keyword">def</span> dest = file(<span class="string">'dist.txt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增量构建的关键</span></span><br><span class="line">    inputs.dir sourceTxt</span><br><span class="line">    outputs.file dest</span><br><span class="line"></span><br><span class="line">    doLast {</span><br><span class="line">        dest.withPrintWriter {writer -&gt;</span><br><span class="line">            sourceTxt.each {s -&gt;</span><br><span class="line">                writer.write(s.text)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sourceSets { <span class="comment">// 配置被依赖的源代码路径</span></span><br><span class="line">    xModel <span class="comment">// 可将xModel项目的代码放在src/xModel/main中, 资源放在src/xModel/rsources, Gradle会创建compileXModelJava, processXModelResources, xModelClasses三个Task</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">repositories { <span class="comment">// 定义仓库</span></span><br><span class="line"></span><br><span class="line">    mavenLocal()</span><br><span class="line">    <span class="comment">// mavenCentral() // Maven默认仓库</span></span><br><span class="line">    <span class="comment">// maven {</span></span><br><span class="line">    <span class="comment">//     allowInsecureProtocol = true</span></span><br><span class="line">    <span class="comment">//     显示指定Maven仓库</span></span><br><span class="line">    <span class="comment">//     url "https://maven.aliyun.com/repository/public"</span></span><br><span class="line">    <span class="comment">//     显示指定本地仓库</span></span><br><span class="line">    <span class="comment">//     url "C:/Users/patrick/.m2/repository"</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阿里云镜像</span></span><br><span class="line">    <span class="comment">// maven { url 'https://maven.aliyun.com/repository/public/'}</span></span><br><span class="line">    maven{url <span class="string">'https://maven.aliyun.com/nexus/content/groups/public/'</span>}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">configurations { <span class="comment">//配置组</span></span><br><span class="line">    xDependence <span class="comment">// 配置名为XDependence的依赖组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java 插件添加的依赖组</span></span><br><span class="line">    implementation <span class="comment">// 主项目依赖组</span></span><br><span class="line">    compileOnly <span class="comment">// 编译时依赖组</span></span><br><span class="line">    runtimeOnly <span class="comment">// 运行时依赖组</span></span><br><span class="line">    testImplementation <span class="comment">// 测试依赖组</span></span><br><span class="line">    testCompileOnly <span class="comment">// 测试编译时依赖组</span></span><br><span class="line">    testRuntimeOnly <span class="comment">// 测试运行时依赖组</span></span><br><span class="line">    archives <span class="comment">// 打包时依赖组</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies { <span class="comment">// 配置依赖</span></span><br><span class="line">    xDependence <span class="attr">group:</span> <span class="string">'commons-logging'</span>, <span class="attr">name:</span> <span class="string">'commons-logging'</span>, <span class="attr">version:</span> <span class="string">'1.2'</span></span><br><span class="line">    xDependence <span class="string">'com.baomidou:mybatis-plus-boot-starter:3.5.1'</span> <span class="comment">// 简写</span></span><br><span class="line"></span><br><span class="line">    xDependence (<span class="attr">group:</span> <span class="string">'net.coobird'</span>, <span class="attr">name:</span> <span class="string">'thumbnailator'</span>, <span class="attr">version:</span> <span class="string">'0.4.17'</span>) {</span><br><span class="line">        <span class="comment">// 额外配置</span></span><br><span class="line">    }</span><br><span class="line">    xDependence (<span class="string">'org.jetbrains:annotations:23.0.0'</span>) { <span class="comment">// 简写</span></span><br><span class="line">        <span class="comment">// 额外配置</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    xDependence <span class="string">'com.alibaba:fastjson:1.2.80'</span>, <span class="string">'com.google.guava:guava:31.1-jre'</span> <span class="comment">// 一次为一个组添加多个依赖</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task showDependences { <span class="comment">// 打印依赖</span></span><br><span class="line">    doFirst {</span><br><span class="line">        println configurations.xDependence.asPath</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义插件, Gradle会为此类生成代理, 此类不能为final类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写 apply 方法</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) {</span><br><span class="line">        project.extensions.creat(<span class="string">"user"</span>, User) <span class="comment">// 为项目额外定义属性</span></span><br><span class="line"></span><br><span class="line">        project.task(<span class="string">'showUser'</span>) { <span class="comment">// 定义任务</span></span><br><span class="line">            doLast {</span><br><span class="line">                println <span class="string">"用户名: ${project.user.name}"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    String name = <span class="string">""</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> HelloPlugin <span class="comment">// 引入自定义插件</span></span><br><span class="line">user.name = <span class="string">"Patrick"</span> <span class="comment">// 为插件引入的项目属性赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用外部自定义插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> MyPlugin</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>


<hr>
<div class="flink"><div class="flink-name">Groovy 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="http://www.groovy-lang.org/documentation.html" title="Groovy Documentation" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://www.groovy-lang.org/img/groovy-logo-white.svg" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Groovy Documentation">
              </div>
              <div class="flink-item-name">Groovy Documentation</div> 
              <div class="flink-item-desc" title="Groovy 参考文档">Groovy 参考文档</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Language</category>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Groovy</tag>
        <tag>Baisc grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>Eureka 的简单使用笔记</title>
    <url>/2022/12/14/19-30-57/</url>
    <content><![CDATA[<h1 id="Netflix-eureka-简单使用笔记"><a href="#Netflix-eureka-简单使用笔记" class="headerlink" title="Netflix eureka 简单使用笔记"></a><strong>Netflix eureka</strong> 简单使用笔记</h1><p>Eureka 是 Netflix 开发的服务发现框架.<br>它本身是一个基于 REST 的服务, 主要用于定位中间层服务, 同时也有负载均衡和分区容灾的目的<br>Spring cloud 将它集成在其子项目 spring-cloud-netflix 中以实现 Spring cloud 的服务发现功能</p>
<h2 id="注册中心简介"><a href="#注册中心简介" class="headerlink" title="注册中心简介"></a>注册中心简介</h2><p>微服务架构中的通讯录, 记录服务和服务地址的映射关系</p>
<h2 id="常见的注册中心"><a href="#常见的注册中心" class="headerlink" title="常见的注册中心"></a>常见的注册中心</h2><ul>
<li><em><strong>Netflix Eureka</strong></em></li>
<li><em><strong>Alibaba Nacos</strong></em></li>
<li>HashiCorp Consul</li>
<li><strong>Apache Zookeeper</strong></li>
<li>CoreOS etcd</li>
<li>CNCF CoreDNS</li>
</ul>
<h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><ol>
<li>Consistency(一致性)</li>
<li>Availability(可用性)</li>
<li>Partition tolerance(分区容错性)  <div class="note info simple"><p>CAP 中三者最多同时实现两个</p>
</div></li>
</ol>
<h2 id="注册中心中的角色"><a href="#注册中心中的角色" class="headerlink" title="注册中心中的角色"></a>注册中心中的角色</h2><ul>
<li>Server(注册中心)</li>
<li>Consumer(消费者)</li>
<li>Provider(生产者)</li>
</ul>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden="">  stateDiagram-v2
    Provider --&gt; Server: Register(注册)/Renew(心跳)/Cancel(下线)
    Consumer --&gt; Server: Get registry(拉取实例列表)
    Consumer --&gt; Provider: Remote call(远程调用)
  </pre></div>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="note info simple"><p>注册中心实例需要在 Spring boot 启动类添加 @EnableEurekaServer 注解</p>
</div>

<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9998</span> <span class="comment"># 实例端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">## 实例名称, 相同实例名称相同</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">## Eureka自我保护模式是否可以开启</span></span><br><span class="line">        <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span> <span class="comment">## 清理间隔时间 (ms), 默认60000</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">eureka</span> <span class="comment">## 主机名, 不配置会自动获取</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">## 是否使用IP地址注册, 不使用IP注册其他服务将不能直接获取该实例IP</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">${spring.cloud.client.ip-address}:${server.port}</span> <span class="comment">## 实例ID, 与eureka.instance.prefer-ip-address搭配可使注册中心网页实例显示IP:port</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">## 是否拉去注册信息, 单节点注册中心需要关闭</span></span><br><span class="line">        <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">## 是否将自己注册到注册中心, 单节注册中心点需要关闭</span></span><br><span class="line">        <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span> <span class="comment">## 拉取实例注册信息间隔(s), 默认30</span></span><br><span class="line">        <span class="attr">service-url:</span> <span class="comment">## 注册中心地址, 多节点注册中心需要互相注册</span></span><br><span class="line">            <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8761/eureka/,</span> <span class="string">http://127.0.0.1:8762/eureka/</span> <span class="comment">## 添加多个注册中心地址时可以用逗号分隔, 或写成数组形式, Eureka节点间会互相同步</span></span><br><span class="line">            <span class="comment">## 添加 Spring security 后需要改为 http://${spring.security.user.name}:${spring.security.user.password}@${Host}:${Port}/eureka/ 进行 BasicHttp 验证</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note warning simple"><p>eureka.client.service.defaultZone 中如需添加多个注册中心地址, 尽量用逗号分隔, 使用数组形式时服务发现可能会不进行 basichttp 验证</p>
</div>
<div class="note warning simple"><p>eureka.client.service.defaultZone 中地址尽量以 / 结尾, 否则某些版本会报错</p>
</div>

<h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li>DiscoverClient<br>通过元数据获取服务信息</li>
<li>LoadBalancerClient<br>通过负载均衡器获取服务信息</li>
<li>@LoadBalanced<br>RestTemplate远程调用时自动拉取服务实例信息, 添加@LoadBalanced注解后前两种方法将的 RestTemplate 不能使用 IOC 中的 bean</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><mark class="hl-label default">Config.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<mark class="hl-label default">ControllerTest.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/consumer")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DiscoveryClient discoveryClient; <span class="comment">// 元数据对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoadBalancerClient loadBalancerClient; <span class="comment">// 负载均衡器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ControllerTest</span><span class="params">(RestTemplate restTemplate, DiscoveryClient discoveryClient, LoadBalancerClient loadBalancerClient)</span> {</span><br><span class="line">        <span class="built_in">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="built_in">this</span>.discoveryClient = discoveryClient;</span><br><span class="line">        <span class="built_in">this</span>.loadBalancerClient = loadBalancerClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/discoveryClient")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">discoveryClient</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"&lt;h1&gt;discoveryClient:&lt;/h1&gt;&lt;br&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部服务列表</span></span><br><span class="line">        List&lt;String&gt; serviceIds = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">if</span> (serviceIds.isEmpty()) {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceIds: empty&lt;br&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceIds: "</span>).append(serviceIds).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据服务名称获取服务</span></span><br><span class="line">        List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(<span class="string">"eureka-provider"</span>);</span><br><span class="line">        <span class="keyword">if</span> (serviceInstances.isEmpty()) {</span><br><span class="line">            stringBuilder.append(<span class="string">"eureka-provider: null&lt;br&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stringBuilder.append(<span class="string">"eureka-provider:"</span>).append(serviceInstances).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> serviceInstances.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 远程调用</span></span><br><span class="line">        stringBuilder.append(<span class="string">"remote call result: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteUrl</span> <span class="operator">=</span> <span class="string">"http://"</span> + serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort() + <span class="string">"/provider/test"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteCallResult</span> <span class="operator">=</span> restTemplate.getForEntity(remoteUrl, String.class).getBody();</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(remoteCallResult);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/LoadBalancerClient")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">LoadBalancerClient</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"&lt;h1&gt;LoadBalancerClient:&lt;/h1&gt;&lt;br&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据服务名称获取服务</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> loadBalancerClient.choose(<span class="string">"eureka-provider"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == serviceInstance) {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceInstance: null &lt;br&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stringBuilder.append(<span class="string">"serviceInstance: "</span>).append(serviceInstance).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 远程调用</span></span><br><span class="line">        stringBuilder.append(<span class="string">"remote call result: "</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteUrl</span> <span class="operator">=</span> <span class="string">"http://"</span> + serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort() + <span class="string">"/provider/test"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteCallResult</span> <span class="operator">=</span> restTemplate.getForEntity(remoteUrl, String.class).getBody();</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(remoteCallResult);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/LoadBalanced")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">LoadBalanced</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"&lt;h1&gt;LoadBalanced:&lt;/h1&gt;&lt;br&gt;"</span>);</span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://eureka-provider/provider/test"</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.append(<span class="string">"remote call result: "</span>).append(responseEntity.getBody()).toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="自我保护模式"><a href="#自我保护模式" class="headerlink" title="自我保护模式"></a>自我保护模式</h2><p>Eureka 发现实例的心跳比例在 15 min 内低于 85% 时触发. Eureka会将实例保护起来不会过期, 并发出警告. 当网络故障恢复后Eureka将解除自我保护模式<br>Eureka客户端具有缓存功能, 所有注册中心实例都下线时, 其他实例也可根据缓存通信<br>负载均衡策略会自动剔除下线实例</p>
<h2 id="Eureka-常用的-API"><a href="#Eureka-常用的-API" class="headerlink" title="Eureka 常用的 API"></a>Eureka 常用的 API</h2><table>
<thead>
<tr>
<th align="left">请求名称</th>
<th align="center">请求方式</th>
<th align="center">HTTP地址</th>
<th align="center">请求描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">注册新服务</td>
<td align="center">POST</td>
<td align="center">/eureka/apps/{appID}</td>
<td align="center">传递JSON或者XML格式参数内容，HTTP code为204时表示成功</td>
</tr>
<tr>
<td align="left">取消注册服务</td>
<td align="center">DELETE</td>
<td align="center">/eureka/apps/{appID}/{instanceID}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">发送服务心跳</td>
<td align="center">PUT</td>
<td align="center">/eureka/apps/{appID}/{instanceID}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">查询所有服务</td>
<td align="center">GET</td>
<td align="center">/eureka/apps</td>
<td align="center">HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">查询指定appID的服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/apps/{appID}</td>
<td align="center">HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">查询指定appID&amp;instanceID</td>
<td align="center">GET</td>
<td align="center">/eureka/apps/{appID}/{instanceID}</td>
<td align="center">获取指定appID以及InstanceId的服务信息，HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">查询指定instanceID服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/apps/instances/{instanceID}</td>
<td align="center">获取指定instanceID的服务列表，HTTP code为200时表示成功，返回XML/JSON数据内容</td>
</tr>
<tr>
<td align="left">变更服务状态</td>
<td align="center">PUT</td>
<td align="center">/eureka/apps/{appID}/{instanceID}/status?value=DOWN</td>
<td align="center">服务上线、服务下线等状态变动，HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">变更元数据</td>
<td align="center">PUT</td>
<td align="center">/eureka/apps/{appID}/{instanceID}/metadata?key=value</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">查询指定IP下的服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/vips/{vipAddress}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
<tr>
<td align="left">查询指定安全IP下的服务列表</td>
<td align="center">GET</td>
<td align="center">/eureka/svips/{svipAddress}</td>
<td align="center">HTTP code为200时表示成功</td>
</tr>
</tbody></table>
<h2 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h2><p>实例默认每 30s 会向 Eureka 发送一次心跳<br>Eureka会剔除 90s 未发送心跳的实例</p>
<h2 id="健康检测"><a href="#健康检测" class="headerlink" title="健康检测"></a>健康检测</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入 <a href="https://codingstrain.com/spring-boot-for-cloud-actuator/">actuator</a> 的 jar 包<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>配置<mark class="hl-label default">application.yml</mark> 文件 <figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">management:</span> <span class="comment">## 度量指标监控与健康检查</span></span><br><span class="line">    <span class="attr">endpoints:</span></span><br><span class="line">        <span class="attr">web:</span></span><br><span class="line">            <span class="attr">exposure:</span></span><br><span class="line">                <span class="attr">include:</span> <span class="string">shutdown</span> <span class="comment">## 添加 shutdown 端点, 即 /actuator/shutdown URI</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">        <span class="attr">shutdown:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">## 开启 shutdown 端点</span></span><br></pre></td></tr></tbody></table></figure>
 <div class="note warning simple"><p>如需开启 shutdown 端点必须同时将 management.endpoint.shutdown.enabled 设置为 true</p>
</div></li>
<li>访问 /actuator URI即可查看该实例状况</li>
</ol>
<h3 id="远程停服"><a href="#远程停服" class="headerlink" title="远程停服"></a>远程停服</h3><p>开启 shutdown 端点后 POST 访问 /actuator/shutdown URI 即可将服务远程关闭,返回信息:</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"message"</span><span class="punctuation">:</span> <span class="string">"Shutting down, bye..."</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="整合Spring-Security"><a href="#整合Spring-Security" class="headerlink" title="整合Spring Security"></a>整合Spring Security</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><mark class="hl-label green">Spring boot 3.0.0</mark>  + <mark class="hl-label green">Spring cloud 2022.0.0-RC2</mark>  版本组合会周期性触发空指针异常, 日志信息为
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">2022-12-10T16:01:33.097+08:00  WARN 5620 --- [get_127.0.0.1-0] c.n.eureka.util.batcher.TaskExecutors: Discovery WorkerThread error</span><br><span class="line"></span><br><span class="line">java.lang.NullPointerException: Cannot invoke "String.toLowerCase()" because the return value of "java.lang.Throwable.getMessage()" is null</span><br><span class="line">    at com.netflix.eureka.cluster.ReplicationTaskProcessor.maybeReadTimeOut(ReplicationTaskProcessor.java:196) ~[eureka-core-2.0.0-rc.4.jar:2.0.0-rc.4]</span><br><span class="line">    at com.netflix.eureka.cluster.ReplicationTaskProcessor.process(ReplicationTaskProcessor.java:95) ~[eureka-core-2.0.0-rc.4.jar:2.0.0-rc.4]</span><br><span class="line">    at com.netflix.eureka.util.batcher.TaskExecutors$BatchWorkerRunnable.run(TaskExecutors.java:190) ~[eureka-core-2.0.0-rc.4.jar:2.0.0-rc.4]</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]</span><br></pre></td></tr></tbody></table></figure>
<p>版本降为 <mark class="hl-label green">Spring boot 2.7.6</mark>  + <mark class="hl-label green">Spring cloud 2021.0.5</mark>  后问题没有复现</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>eureka.client.service-url.defaultZone<br>需改为 http://${spring.security.user.name}:${spring.security.user.password}@${Host}:${Port}/eureka 的形式</p>
<h3 id="CSRF-处理"><a href="#CSRF-处理" class="headerlink" title="CSRF 处理"></a>CSRF 处理</h3><p>通常有两种简单的处理方式</p>
<ul>
<li>使 CSRF 忽略 /eureka/** 的所有请求</li>
<li>关闭 CSRF</li>
</ul>
<h4 id="使-CSRF-忽略-x2F-eureka-x2F-的所有请求"><a href="#使-CSRF-忽略-x2F-eureka-x2F-的所有请求" class="headerlink" title="使 CSRF 忽略 /eureka/** 的所有请求:"></a>使 CSRF 忽略 /eureka/** 的所有请求:</h4><mark class="hl-label default">Config.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .authorizeHttpRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().ignoringRequestMatchers(<span class="string">"/eureka/**"</span>)</span><br><span class="line"></span><br><span class="line">                .and().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="关闭-CSRF"><a href="#关闭-CSRF" class="headerlink" title="关闭 CSRF"></a>关闭 CSRF</h4><mark class="hl-label default">Config.java</mark> 

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .formLogin()</span><br><span class="line">                .and().httpBasic() <span class="comment">// 配置 HTTP 基本身份验证, 为了兼容 http://${spring.security.user.name}:${spring.security.user.password}@${Host}:${Port}/eureka 登录方式</span></span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeHttpRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>主流的负载均衡方案分为服务器负载均衡(集中式负载均衡)和客户端负载均衡(进程内负载均衡)<br>高版本 Spring cloud 默认使用 LoadBalance 代替 Ribbon 执行负载均衡</p>
<h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><p>Ribbon 是一个基于 HTTP 和 TCP 的客户端负载均衡工具</p>
<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><mark class="hl-label green">Spring boot 2.7.6</mark>  + <mark class="hl-label green">Spring cloud 2021.0.5</mark>  整合 Ribbon 会出现负载均衡无法获取注册实例情况,经过调试发现, Ribbon 可用从 Eureka 获取所有实例详细, 但最终没有保存下来. 
<p>版本降为 <mark class="hl-label green">Spring boot 2.2.4.RELEASE</mark>  + <mark class="hl-label green">Spring cloud Hoxton.SR1</mark>  后问题没有复现</p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>高版本的 Spring cloud 默认负载均衡变为 LoadBalance ,使用 Ribbon 时需要手动导入 jar 包</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-cloud-starter-netflix-ribbon.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><table>
<thead>
<tr>
<th>策略名称</th>
<th>对应类名</th>
<th>原理</th>
</tr>
</thead>
<tbody><tr>
<td>轮询</td>
<td>RoundRobinRule</td>
<td>按默认顺序每次调用按序取 provider</td>
</tr>
<tr>
<td>权重随机</td>
<td>WeightedResponseTimeRule</td>
<td>根据每个 provider 响应时间分配权重.<br>响应时间越长, 权重越小刚开始时为轮询策略, 同时开启计时器,<br>每 30 秒计算一次各个 provider 的平均响应时间, 之后按权重随机选择 provider</td>
</tr>
<tr>
<td>随机</td>
<td>RandomRule</td>
<td>随机选择 provider</td>
</tr>
<tr>
<td>最少并发</td>
<td>BestAvailableRule</td>
<td>选择请求并发数量最小的可用的 provider</td>
</tr>
<tr>
<td>重试</td>
<td>RetryRule</td>
<td>轮询策略的服务不可用时不做处理,<br>重试策略的服务不可用时会重新尝试连接其它节点</td>
</tr>
<tr>
<td>可用性敏感</td>
<td>AvailabilityFilteringRule</td>
<td>过滤性能差的 provider<br><ul><li>过去一段时间内始终连接失败的 provider</li><li>处于高并发状态的 provider</li></ul></td>
</tr>
<tr>
<td>区域敏感性</td>
<td>ZoneAvoidanceRule</td>
<td>以区域为单位, 过滤不可用的区域<br>当一个区域内有服务不可用或者响应变慢时, 降低该区域中服务的权重</td>
</tr>
</tbody></table>
<div class="note info simple"><p>Ribbon 的默认负载均衡策略是 ZoneAvoidanceRule</p>
</div>

<div class="note warning simple"><p>高版本的 Spring boot 需要配置<br><code>spring.cloud.loadbalancer.cache.enabled = false</code>或</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${caffeine.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    IRule <span class="title function_">randomRule</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h5><p>配置文件 <mark class="hl-label default">application.yml</mark> 中配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">eureka-provider-ribbon:</span></span><br><span class="line">    <span class="attr">ribbon:</span></span><br><span class="line">        <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RoundRobinRule</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info simple"><p>eureka-provider-ribbon 为具体的实例名称, 表示对该实例的调用采取的负载均衡策略<br>com.netflix.loadbalancer.RoundRobinRule 是策略全类名</p>
</div>
<div class="note warning simple"><p>全局配置会覆盖局部配置</p>
</div>

<h4 id="Ribbon-点对点直连"><a href="#Ribbon-点对点直连" class="headerlink" title="Ribbon 点对点直连"></a>Ribbon 点对点直连</h4><div class="note warning simple"><p>使用 Ribbon 点对点直连时, 需要屏蔽 Eureka (去除 Eureka 依赖)</p>
</div>
<h5 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h5><p>配置文件 <mark class="hl-label default">application.yml</mark> 中配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">eureka-provider-ribbon:</span></span><br><span class="line">    <span class="attr">ribbon:</span></span><br><span class="line">        <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br><span class="line">        <span class="attr">listOfServers:</span> <span class="string">http://127.0.0.1:9996,</span> <span class="string">http://127.0.0.1:9997</span> <span class="comment"># eureka-provider-ribbon 服务地址</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">eureka:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 关闭 Eureka</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info simple"><p>eureka-provider-ribbon 为具体的实例名称</p>
</div>]]></content>
      <categories>
        <category>Note</category>
        <category>Spring</category>
        <category>Spring boot</category>
        <category>Spring cloud</category>
        <category>Spring cloud Netflix</category>
        <category>Eureka</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Spring boot</tag>
        <tag>Netflix</tag>
        <tag>Eureka</tag>
        <tag>Registration</tag>
        <tag>Microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello</title>
    <url>/2022/12/13/13-52-03/</url>
    <content><![CDATA[<h1 id="Hello-This-is-Patrick’s-blog"><a href="#Hello-This-is-Patrick’s-blog" class="headerlink" title="Hello, This is Patrick’s blog!"></a><em><strong>Hello, This is Patrick’s blog!</strong></em></h1><p><a href="/about/"></a></p><h2><a href="/about/">关于我</a></h2><p></p>
<hr>
<div class="flink"><div class="flink-name">好友博客</div><div class="flink-desc">点一下, 打开宝盒</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://xavier72bit.github.io/" title="Xavier" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://xavier72bit.github.io/img/touxiang.jpg" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Xavier">
              </div>
              <div class="flink-item-name">Xavier</div> 
              <div class="flink-item-desc" title="Xavier的博客主页">Xavier的博客主页</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Index</category>
        <category>Hello</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua 的基础语法笔记</title>
    <url>/2022/12/14/09-16-35/</url>
    <content><![CDATA[<h1 id="Lua-基础语法笔记"><a href="#Lua-基础语法笔记" class="headerlink" title="Lua 基础语法笔记"></a><strong>Lua</strong> 基础语法笔记</h1><p>Lua 是一种轻量小巧的脚本语言, 使用标准C语言编写并以源代码形式开放.<br>其设计目的是为了嵌入应用程序中, 从而为应用程序提供灵活的扩展和定制功能.<br>Lua 是巴西里约热内卢天主教大学 (Pontifical Catholic University of Rio de Janeiro) 里的一个研究小组于 1993 年开发的, 该小组成员有: Roberto Ierusalimschy, Waldemar Celes, Luiz Henrique de Figueiredo</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>Lua 中的单行注释用 <code>--</code> 表示</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- Hello World</span></span><br><span class="line"><span class="comment">-- Hello Lua</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>Lua 中的多行注释由 <code>--[[</code> 开始, 以 <code>--]]</code> 结束</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">Hello World</span></span><br><span class="line"><span class="comment">Hello Lua    </span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>Lua中一共有 22 个关键字</p>
<ul>
<li>and<br>  布尔运算和</li>
<li>break<br>  跳出循环</li>
<li>do<br>  代码块开始标记</li>
<li>else<br>  分支语句表示默认分支</li>
<li>elseif<br>  分支语句表示另一个条件分支</li>
<li>end<br>  代码块结束标记</li>
<li>false<br>  条件假</li>
<li>for<br>  循环语句关键字</li>
<li>function<br>  函数声明关键字</li>
<li>if<br>  分支语句关键字</li>
<li>in<br>  迭代关键字</li>
<li>local<br>  局部变量声明关键字</li>
<li>nil<br>  空类型声明关键字</li>
<li>not<br>  布尔运算非</li>
<li>or<br>  布尔运算或</li>
<li>repeat<br>  直到循环声明关键字</li>
<li>return<br>  函数返回关键字</li>
<li>then<br>  分支语句关键字</li>
<li>true<br>  条件真</li>
<li>until<br>  直到循环声明关键字</li>
<li>while<br>  当循环声明关键字</li>
<li>goto<br>  跳转语句关键字</li>
</ul>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>Lua 中的变量分为全局变量和局部变量, 声明变量时未加 <code>loacl</code> 关键字的变量为全局变量</p>
<div class="note info simple"><p>全局变量的首字母通常大写</p>
</div>

<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">Var = <span class="literal">nil</span> <span class="comment">-- 全局变量</span></span><br><span class="line"><span class="keyword">local</span> var = <span class="literal">nil</span> <span class="comment">-- 局部变量</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Lua 中由8种数据类型, 分别是</p>
<ul>
<li>nil</li>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>table</li>
<li>function</li>
<li>userdata</li>
<li>thread</li>
</ul>
<h3 id="nil-类型"><a href="#nil-类型" class="headerlink" title="nil 类型"></a>nil 类型</h3><p>nil类型的变量只有一种值, 即nil, 表示空</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var) == <span class="string">'nil'</span>) <span class="comment">-- output: true</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h3><p>Lua 中所有数据类型都可视作 boolean 类型, false 和 nil 看作是 false，其他的都为 true</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="literal">true</span> <span class="comment">-- boolean   false 和 nil 看作是 false，其他的都为 true</span></span><br><span class="line">var = <span class="literal">false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: boolean</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="number-类型"><a href="#number-类型" class="headerlink" title="number 类型"></a>number 类型</h3><p>Lua 中 的数字默认可分为 64 位整数和 64 位浮点数</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: number</span></span><br><span class="line">var = <span class="number">0.3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: number</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span>) <span class="comment">-- output: 0.3</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h3><p>Lua 中声明 string 类型变量由三种方式, 声明单行 string 可用 <code>'</code> 或 <code>"</code> , 声明多行 string 可用 <code>[[</code> 开始, <code>]]</code> 结束</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="string">'abc'</span></span><br><span class="line">var = <span class="string">"abc"</span></span><br><span class="line">var = <span class="string">[[</span></span><br><span class="line"><span class="string">    abc</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: string</span></span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label orange">注意</mark>   在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字, 字符串连接使用的是 .. , 使用 # 来获取字符串的长度
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"2"</span> + <span class="string">"6"</span>) <span class="comment">-- output: 8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'2'</span> .. <span class="string">'6'</span>) <span class="comment">-- output: 26</span></span><br><span class="line"><span class="keyword">local</span> var = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">print</span>(#var) <span class="comment">-- output: 3</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="funcyion-类型"><a href="#funcyion-类型" class="headerlink" title="funcyion 类型"></a>funcyion 类型</h3><p>Lua 的函数类型变量分为有名函数和匿名函数</p>
<div class="note info simple"><p>匿名函数通常用作给函数传参来使用</p>
</div>
<div class="tabs" id="function-declaration"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#function-declaration-1">有名函数</button></li><li class="tab"><button type="button" data-href="#function-declaration-2">匿名函数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="function-declaration-1"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">var</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: function</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="function-declaration-2"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>))  <span class="comment">-- output: function</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="table-类型"><a href="#table-类型" class="headerlink" title="table 类型"></a>table 类型</h3><p>Lua 中唯一的一种内置的数据结构就是表, 由许多 k, v 键值对组成</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = {}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">-- output: table</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="userdata-类型"><a href="#userdata-类型" class="headerlink" title="userdata 类型"></a>userdata 类型</h3><p>Lua 中的 userdata 类型变量表示任意存储在变量中的C数据结构</p>
<h3 id="thread-类型"><a href="#thread-类型" class="headerlink" title="thread 类型"></a>thread 类型</h3><p>Lua 中的 thread 类型变量表示执行的独立线路，用于执行协同程序</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Lua 中的函数是一种数据类型, 具体声明结构为</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_name</span><span class="params">(arg1, arg2, arg3, ...)</span></span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span>={...} <span class="comment">-- 将可变参数转换为表</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">len</span> = <span class="built_in">select</span>(<span class="string">"#"</span>,...) <span class="comment">-- 获取可变参数长度</span></span><br><span class="line">    <span class="keyword">local</span> arg1 = <span class="built_in">select</span>(<span class="number">1</span>, ...) <span class="comment">--用于返回从起点 n 开始到结束位置的所有参数列表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'1'</span>, <span class="number">2</span>, arg3</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<p>函数调用形式为</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> r1, r2, r3 = fun(<span class="string">'arg1'</span>, <span class="string">'arg2'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="keyword">end</span>, <span class="string">'1'</span>) <span class="comment">-- 函数调用</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>lua 中 . 和 : 的区别</strong><br>首先在lua中使用 <code>:</code> 定义的函数会自动传入一个名为self的变量，这个变量是隐含的，self同c++中的this一样，表示当前对象的指针, 而 <code>.</code> 定义的函数中没有self  </p>
<p>例如:</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">Class = {}</span><br><span class="line">Class.<span class="built_in">__index</span> = Class</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class.new</span><span class="params">(x,y)</span></span></span><br><span class="line">    <span class="keyword">local</span> cls = {}</span><br><span class="line">    <span class="built_in">setmetatable</span>(cls, Class)</span><br><span class="line">    cls.x = x</span><br><span class="line">    cls.y = y</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:test</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 等价于</span></span><br><span class="line">    <span class="comment">-- function Class.test(self)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">self</span>.x,<span class="built_in">self</span>.y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">object = Class.new(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"> </span><br><span class="line">object:test() <span class="comment">-- 等价于</span></span><br><span class="line">object.test(object)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>Lua 中声明表时可对表进行初始化</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> var = {index1 = <span class="string">'index1'</span>, index2 = <span class="number">2</span>}</span><br></pre></td></tr></tbody></table></figure>
<p>填充表时可用<code>.</code>运算符或<code>[]</code>运算符</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">table</span>.index1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">table</span>[<span class="string">'index2'</span>] = <span class="string">'index2'</span></span><br></pre></td></tr></tbody></table></figure>
<p>删除表中的值时直接将该元素置为 nil 即可</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">table</span>.index2 = <span class="literal">nil</span></span><br></pre></td></tr></tbody></table></figure>
<p>访问表中元素时可用索引去取值, 或者使用<a href="/2022/12/14/09-16-35/#%E9%81%8D%E5%8E%86%E8%A1%A8">^遍历的方法访问表</a></p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>[<span class="string">'index1'</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.index2)</span><br><span class="line"><span class="comment">-- 遍历的方法见循环语句</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>当声明表并对其初始化时不填写索引或之后用 [数字] 的方式填表中的充值, 那么此时这个表可视为数组</p>
<div class="note warning simple"><p>Lua 的默认索引是从 <mark class="hl-label orange">1</mark>  开始的</p>
</div>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> array = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line">array[<span class="number">4</span>] = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>]) <span class="comment">-- output: 1</span></span><br></pre></td></tr></tbody></table></figure>
<p>可使用<a href="/2022/12/14/09-16-35/#%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84">^遍历的方法访问数组</a></p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>Lua 中使用 <code>::tag_name::</code>的形式声明标签, 通常标签和 <code>goto</code> 关键字搭配使用</p>
<h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>Lua 可以对多个变量同时赋值, 例如<code>local a, b = 1,2</code></p>
<div class="note info simple"><p>当变量个数和值的个数不一致时，Lua会以变量个数为基础采取以下策略:</p>
<ul>
<li>变量个数 &gt; 值的个数      按变量个数补足nil</li>
<li>变量个数 &lt; 值的个数      多余的值会被忽略</li>
</ul>
</div>

<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">elseif</span> condition <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环语句中可用 <code>break</code> 关键字跳出当前循环, 或搭配标签和 <code>goto</code>关键字实现 continue</p>
<div class="hide-block"><button type="button" class="hide-button" style="">查看break和continue的使用
    </button><div class="hide-content"><div class="tabs" id="break-continue"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#break-continue-1">break</button></li><li class="tab"><button type="button" data-href="#break-continue-2">continue</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="break-continue-1"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line">    <span class="keyword">break</span> <span class="comment">-- 跳出循环</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="break-continue-2"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">:: continue::<span class="keyword">while</span> condition <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line">    <span class="keyword">goto</span> continue</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></div>

<h3 id="当型循环"><a href="#当型循环" class="headerlink" title="当型循环"></a>当型循环</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="直到型循环"><a href="#直到型循环" class="headerlink" title="直到型循环"></a>直到型循环</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">:: continue::<span class="keyword">repeat</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">until</span>(condition)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="普通-for-循环"><a href="#普通-for-循环" class="headerlink" title="普通 for 循环"></a>普通 for 循环</h4><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- 1 从 1（exp1） 变化到 5（exp2），每次变化以 2（exp3） 为步长递增 1，并执行一次 "执行体". exp3 是可选的，如果不指定，默认为1</span></span><br><span class="line">    <span class="comment">-- body</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="遍历表"><a href="#遍历表" class="headerlink" title="遍历表"></a>遍历表</h4><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Lua 中有以下运算符</p>
<ul>
<li><p>+	加法</p>
</li>
<li><p>-	减法</p>
</li>
<li><p>*	乘法</p>
</li>
<li><p>/	    除法</p>
</li>
<li><p>%	    取余</p>
</li>
<li><p>^	    乘幂</p>
</li>
<li><p>-	负号</p>
</li>
<li><p>//	整除运算符(&gt;=lua5.3)</p>
</li>
<li><p>==	等于</p>
</li>
<li><p>~=	不等于</p>
</li>
<li><p>&gt;	大于</p>
</li>
<li><p>&lt;	小于</p>
</li>
<li><p>&gt;=	大于等于</p>
</li>
<li><p>&lt;=	小于等于</p>
</li>
<li><p>and	逻辑与</p>
</li>
<li><p>or	逻辑或</p>
</li>
<li><p>not	逻辑非</p>
</li>
<li><p>..	连接两个字符串</p>
</li>
<li><p>#	一元运算符，返回字符串或表的长度</p>
</li>
</ul>
<p>运算优先级由高到低排列为</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="center">^</td>
</tr>
<tr>
<td>2</td>
<td align="center">not,    - (unary)</td>
</tr>
<tr>
<td>3</td>
<td align="center">*,      /,       %</td>
</tr>
<tr>
<td>4</td>
<td align="center">+,      -</td>
</tr>
<tr>
<td>5</td>
<td align="center">..</td>
</tr>
<tr>
<td>6</td>
<td align="center">&lt;,      &gt;,      &lt;=,     &gt;=,     ~=,    ==</td>
</tr>
<tr>
<td>7</td>
<td align="center">and</td>
</tr>
<tr>
<td>8</td>
<td align="center">or</td>
</tr>
</tbody></table>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Lua 中引如其他模块使用<code>require("module_name")</code>函数, 此时当前程序内会引入一个其他模块名称的表</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"module"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">module</span>.constant)</span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">"module"</span>) <span class="comment">-- 模块别名</span></span><br><span class="line"><span class="built_in">print</span>(m.constant)</span><br></pre></td></tr></tbody></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看module.lua内容
    </button><div class="hide-content"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件名为 module.lua</span></span><br><span class="line"><span class="built_in">module</span> = {} <span class="comment">-- 定义一个名为 module 的模块</span></span><br><span class="line"><span class="built_in">module</span>.constant = <span class="string">"constant"</span> <span class="comment">-- 将一个数据添加进 module 表</span></span><br></pre></td></tr></tbody></table></figure></div></div>

<h2 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h2><p>元表用于为表定义一些行为, 为表添加元表的方法为</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a_table = {}                  <span class="comment">-- 普通表</span></span><br><span class="line"><span class="keyword">local</span> metatable = {}                <span class="comment">-- 元表</span></span><br><span class="line"><span class="built_in">setmetatable</span>(a_table,metatable)     <span class="comment">-- 把 mymetatable 设为 mytable 的元表</span></span><br><span class="line"></span><br><span class="line">metatable[<span class="string">'__index'</span>] = <span class="function"><span class="keyword">function</span><span class="params">(target_table, key)</span></span> <span class="comment">-- 添加元表函数</span></span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">"key2"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"metatablevalue"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(a_table.key1,a_table.key2) <span class="comment">-- output： value1    metatablevalue</span></span><br></pre></td></tr></tbody></table></figure>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>函数作用</th>
</tr>
</thead>
<tbody><tr>
<td>__index</td>
<td>当通过键来访问 table 的时候，如果这个键没有值，那么Lua就会寻找该table的metatable（假定有metatable）中的__index 键. 如果__index包含一个表，Lua会在表格中查找相应的键</td>
</tr>
<tr>
<td>__newindex</td>
<td>当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作</td>
</tr>
<tr>
<td>__call</td>
<td>在把普通表视作函数并调用时调用</td>
</tr>
<tr>
<td>__tostring</td>
<td>修改表的输出行为</td>
</tr>
<tr>
<td>__add</td>
<td>对应的运算符 ‘+’</td>
</tr>
<tr>
<td>__sub</td>
<td>对应的运算符 ‘-‘</td>
</tr>
<tr>
<td>__mul</td>
<td>对应的运算符 ‘*’</td>
</tr>
<tr>
<td>__div</td>
<td>对应的运算符 ‘/‘</td>
</tr>
<tr>
<td>__mod</td>
<td>对应的运算符 ‘%’</td>
</tr>
<tr>
<td>__unm</td>
<td>对应的运算符 ‘-‘</td>
</tr>
<tr>
<td>__concat</td>
<td>对应的运算符 ‘..’</td>
</tr>
<tr>
<td>__eq</td>
<td>对应的运算符 ‘==’</td>
</tr>
<tr>
<td>__lt</td>
<td>对应的运算符 ‘&lt;’</td>
</tr>
<tr>
<td>__le</td>
<td>对应的运算符 ‘&lt;=’</td>
</tr>
</tbody></table>
<h2 id="协同程序（coroutine）"><a href="#协同程序（coroutine）" class="headerlink" title="协同程序（coroutine）"></a>协同程序（coroutine）</h2><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>coroutine.create(func)</td>
<td>创建 coroutine，返回 coroutine， 参数是一个函数，当和 resume 配合使用的时候就唤醒函数调用</td>
</tr>
<tr>
<td>coroutine.resume()</td>
<td>启动 coroutine，和 create 配合使用</td>
</tr>
<tr>
<td>coroutine.yield()</td>
<td>挂起 coroutine，将 coroutine 设置为挂起状态，这个和 resume 配合使用能有很多有用的效果</td>
</tr>
<tr>
<td>coroutine.status()</td>
<td>查看 coroutine 的状态（coroutine 的状态有三种：dead，suspended，running）</td>
</tr>
<tr>
<td>coroutine.wrap()</td>
<td>创建 coroutine，返回一个函数，一旦你调用这个函数，就进入 coroutine，和 create 功能重复</td>
</tr>
<tr>
<td>coroutine.running()</td>
<td>返回正在跑的 coroutine，一个 coroutine 就是一个线程，当使用running的时候，就是返回一个 corouting 的线程号</td>
</tr>
</tbody></table>
<div class="tabs" id="create-coroutine"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#create-coroutine-1">使用 create() 创建 coroutine</button></li><li class="tab"><button type="button" data-href="#create-coroutine-2">使用 wrap() 创建 coroutine</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="create-coroutine-1"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(arg)</span></span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">running</span>())</span><br><span class="line">            <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(<span class="built_in">arg</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'status '</span> .. <span class="built_in">coroutine</span>.<span class="built_in">status</span>(co))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">4</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> is_success, r =  <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">'arg'</span>)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'status '</span> .. <span class="built_in">coroutine</span>.<span class="built_in">status</span>(co))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="create-coroutine-2"><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> wr = <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(arg)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">arg</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">wr(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I/O"></a>I/O</h2><p>IO模式</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="left">读模式</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">写模式</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">追加模式</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="left">更新模式，所有之前的数据都保留</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="left">更新模式，所有之前的数据都删除</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="left">追加更新模式，所有之前的数据都保留，只允许在文件尾部做写入</td>
</tr>
<tr>
<td align="center">rb</td>
<td align="left">读模式（二进制方式）</td>
</tr>
<tr>
<td align="center">wb</td>
<td align="left">写模式（二进制方式）</td>
</tr>
<tr>
<td align="center">ab</td>
<td align="left">追加模式(二进制方式）</td>
</tr>
<tr>
<td align="center">r+b</td>
<td align="left">更新模式，所有之前的数据都保留（二进制方式）</td>
</tr>
<tr>
<td align="center">w+b</td>
<td align="left">更新模式，所有之前的数据都删除（二进制方式）</td>
</tr>
<tr>
<td align="center">a+b</td>
<td align="left">追加更新模式，所有之前的数据都保留，只允许在文件尾部做写入（二进制方式）</td>
</tr>
</tbody></table>
<h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>) <span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file) <span class="comment">-- 设置默认输出文件为 test.lua</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"--  test.lua 文件末尾注释"</span>) <span class="comment">-- 在文件最后一行添加 Lua 注释</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file) <span class="comment">-- 关闭打开的文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> file = <span class="built_in">io</span>.<span class="built_in">open</span> (<span class="string">'module.lua'</span>, <span class="string">'r'</span>) <span class="comment">-- 以只读方式打开文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file) <span class="comment">-- 设置默认输入文件为 test.lua</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">read</span>()) <span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br></pre></td></tr></tbody></table></figure>
<p>io.read()参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>“*n”</td>
<td>读取一个数字并返回它</td>
</tr>
<tr>
<td>“*a”</td>
<td>从当前位置读取整个文件</td>
</tr>
<tr>
<td>“*l”(默认)</td>
<td>读取下一行，在文件尾 (EOF) 处返回 nil</td>
</tr>
<tr>
<td>number</td>
<td>返回一个指定字符个数的字符串，或在 EOF 时返回</td>
</tr>
</tbody></table>
<p>其他的 io 函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>io.tmpfile()</td>
<td>返回一个临时文件句柄，该文件以更新模式打开，程序结束时自动删除</td>
</tr>
<tr>
<td>io.type(file)</td>
<td>检测obj是否一个可用的文件句柄</td>
</tr>
<tr>
<td>io.flush()</td>
<td>向文件写入缓冲中的所有数据</td>
</tr>
<tr>
<td>io.lines(optional file name)</td>
<td>返回一个迭代函数，每次调用将获得文件中的一行内容，当到文件尾时，将返回 nil，但不关闭文件</td>
</tr>
</tbody></table>
<h3 id="完全模式"><a href="#完全模式" class="headerlink" title="完全模式"></a>完全模式</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>) <span class="comment">-- 以只读方式打开文件</span></span><br><span class="line"><span class="built_in">print</span>(file:<span class="built_in">read</span>()) <span class="comment">-- 输出文件第一行</span></span><br><span class="line">file:<span class="built_in">close</span>() <span class="comment">-- 关闭打开的文件</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>) <span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">"--test"</span>) <span class="comment">-- 在文件最后一行添加 Lua 注释</span></span><br><span class="line">file:<span class="built_in">close</span>() <span class="comment">-- 关闭打开的文件</span></span><br></pre></td></tr></tbody></table></figure>
<p>file:read()参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>“*n”</td>
<td>读取一个数字，根据 Lua 的转换文法返回浮点数或整数</td>
</tr>
<tr>
<td>“*a”</td>
<td>从当前位置开始读取整个文件</td>
</tr>
<tr>
<td>“*l”</td>
<td>读取一行并忽略行结束标记 (默认)</td>
</tr>
<tr>
<td>“*L”</td>
<td>读取一行并保留行结束标记</td>
</tr>
</tbody></table>
<p>其他函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>file:seek(optional whence, optional offset)</td>
<td>设置和获取当前文件位置,成功则返回最终的文件位置(按字节),失败则返回nil加错误信息</td>
</tr>
<tr>
<td>file:flush()</td>
<td>向文件写入缓冲中的所有数据</td>
</tr>
<tr>
<td>io.lines(optional file name)</td>
<td>打开指定的文件 filename 为读模式并返回一个迭代函数，每次调用将获得文件中的一行内容，当到文件尾时，将返回 nil，并自动关闭文件. 若不带参数时io.lines() &lt;=&gt; io.input():lines(); 读取默认输入设备的内容，但结束时不关闭文件</td>
</tr>
</tbody></table>
<div class="note info simple"><p>file:seek()参数:</p>
<ol>
<li>whence 值可以是:</li>
</ol>
<ul>
<li>“set”: 从文件头开始</li>
<li>“cur”: 从当前位置开始[默认]</li>
<li>“end”: 从文件尾开始</li>
</ul>
<ol start="2">
<li>offset 偏移量(默认为0)</li>
</ol>
</div>

<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span>(<span class="built_in">type</span>(<span class="literal">true</span>) == <span class="string">"number"</span>, <span class="string">"true 不是一个数字"</span>)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="error"><a href="#error" class="headerlink" title="error()"></a>error()</h3><p>error(messahe, level) 函数可终止正在执行的函数，并返回message的内容作为错误信息(error函数永远都不会返回)<br>通常情况下，error会附加一些错误位置的信息到message头部</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>messaage</td>
<td>错误信息</td>
</tr>
<tr>
<td>level</td>
<td>指示获得错误的位置<br>Level=1[默认]: 为调用error位置(文件+行号)<br>Level=2: 指出哪个调用error的函数的函数<br>Level=0: 不添加错误位置信息</td>
</tr>
</tbody></table>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="pcall"><a href="#pcall" class="headerlink" title="pcall()"></a>pcall()</h4><p>pcall接收一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回值true或者或false, errorinfo<br>pcall以一种”保护模式”来调用第一个参数，因此pcall可以捕获函数执行中的任何错误<br>通常在错误发生时，希望落得更多的调试信息，而不只是发生错误的位置. 但pcall返回时，它已经销毁了调用桟的部分内容</p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span> <span class="params">(x, y, z)</span></span> <span class="built_in">error</span>(<span class="string">'ERROR'</span>) <span class="keyword">end</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'SUCCESS'</span>)</span><br><span class="line">    <span class="comment">-- 没有错误</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'ERROR'</span>)</span><br><span class="line">    <span class="comment">-- 一些错误</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="xpcall"><a href="#xpcall" class="headerlink" title="xpcall()"></a>xpcall()</h4><p>xpcall接收第二个参数——一个错误处理函数，当错误发生时，Lua会在调用桟展开（unwind）前调用错误处理函数，于是就可以在这个函数中使用debug库来获取关于错误的额外信息了<br>debug库提供了两个通用的错误处理函数: </p>
<ul>
<li>debug.debug(): 提供一个Lua提示符，让用户来检查错误的原因</li>
<li>debug.traceback(): 根据调用桟来构建一个扩展的错误消息<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> myfunction = <span class="function"><span class="keyword">function</span> <span class="params">(x, y)</span></span></span><br><span class="line">   x = y / <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> myerrorhandler =  <span class="function"><span class="keyword">function</span> <span class="params">( err )</span></span></span><br><span class="line">   <span class="built_in">print</span>( <span class="string">"ERROR:"</span>, err )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">status</span> = <span class="built_in">xpcall</span>(myfunction, myerrorhandler, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">status</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<hr>
<div class="flink"><div class="flink-name">Lua 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="http://www.lua.org/manual/5.4/" title="Lua 5.4 Reference Manual" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://www.lua.org/manual/5.4/logo.gif" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Lua 5.4 Reference Manual">
              </div>
              <div class="flink-item-name">Lua 5.4 Reference Manual</div> 
              <div class="flink-item-desc" title="Lua 5.4 参考文档">Lua 5.4 参考文档</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Language</category>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Baisc grammar</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 的基础语法笔记</title>
    <url>/2022/12/13/10-01-00/</url>
    <content><![CDATA[<h1 id="Markdown-基础语法笔记"><a href="#Markdown-基础语法笔记" class="headerlink" title="Markdown 基础语法笔记"></a><strong>Markdown</strong> 基础语法笔记</h1><p>Markdown 是一种轻量级标记语言, 它允许使用易读易写的纯文本格式编写文档.<br>Markdown 文件的后缀名是 .md<br>使用 Hexo 编写博客时使用的就是 Markdown.<br>不同的 Markdown 解析器对于 Markdown 的支持程度不同, 也就有了所谓的 Markdown 方言</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td># Heading level 1</td>
<td><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td>
<td><p style="font-size:32px">Heading level 1</p></td>
</tr>
<tr>
<td>Heading level 1<br>===============</td>
<td><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td>
<td><p style="font-size:32px">Heading level 1</p></td>
</tr>
<tr>
<td>## Heading level 2</td>
<td><code>&lt;h2&gt;Heading level 2&lt;/h2&gt;</code></td>
<td><p style="font-size:24px">Heading level 2</p></td>
</tr>
<tr>
<td>Heading level 2<br>—————</td>
<td><code>&lt;h1&gt;Heading level 2&lt;/h1&gt;</code></td>
<td><p style="font-size:24px">Heading level 2</p></td>
</tr>
<tr>
<td>### Heading level 3</td>
<td><code>&lt;h3&gt;Heading level 3&lt;/h3&gt;</code></td>
<td><p style="font-size:18.72px">Heading level 3</p></td>
</tr>
<tr>
<td>#### Heading level 4</td>
<td><code>&lt;h4&gt;Heading level 4&lt;/h4&gt;</code></td>
<td><p style="font-size:16px">Heading level 4</p></td>
</tr>
<tr>
<td>##### Heading level 5</td>
<td><code>&lt;h5&gt;Heading level 5&lt;/h5&gt;</code></td>
<td><p style="font-size:13.28px">Heading level 5</p></td>
</tr>
<tr>
<td>###### Heading level 6</td>
<td><code>&lt;h6&gt;Heading level 6&lt;/h6&gt;</code></td>
<td><p style="font-size:12px">Heading level 6</p></td>
</tr>
<tr>
<td>###### Head { #id }</td>
<td><code>&lt;h6 id="id"&gt;Heading&lt;/h6&gt;</code></td>
<td><p style="font-size:12px">Head</p></td>
</tr>
</tbody></table>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>使用空白行分隔段落</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>段落一\n段落二</td>
<td><code>&lt;p&gt;段落一&lt;/p&gt;&lt;p&gt;段落二&lt;/p&gt;</code></td>
<td><p>段落一</p><p>段落二</p></td>
</tr>
</tbody></table>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>使用<code>&lt;br&gt;</code>或两个空格实现换行</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>使用 ** 或 __ 包裹需要变成粗体的文字, 注意: __ 前必须有空格, 而 ** 不必有</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>这是**粗体**</td>
<td><code>这是&lt;strong&gt;粗体&lt;/strong&gt;</code></td>
<td>这是<strong>粗体</strong></td>
</tr>
<tr>
<td>这是__粗体__</td>
<td><code>这是&lt;strong&gt;粗体&lt;/strong&gt;</code></td>
<td>这是<strong>粗体</strong></td>
</tr>
</tbody></table>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>使用 * 或 _ 包裹需要变成斜体的文字, 注意: _ 前必须有空格, 而 * 不必有</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>这是*斜体*</td>
<td><code>这是&lt;em&gt;斜体&lt;/em&gt;</code></td>
<td>这是<em>斜体</em></td>
</tr>
<tr>
<td>这是__斜体__</td>
<td><code>这是&lt;em&gt;斜体&lt;/em&gt;</code></td>
<td>这是<em>斜体</em></td>
</tr>
</tbody></table>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用 ~~ 包裹需删除的文字</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>这是要~~删除~~的内容</td>
<td><code>这是要&lt;s&gt;删除&lt;/s&gt;的内容</code></td>
<td>这是要<del>删除</del>的内容</td>
</tr>
</tbody></table>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在段落前添加 &gt; 创建引用块, &gt; 的数量是嵌套的层数</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>&gt; 这里是引用段落</td>
<td><code>&lt;blockquote&gt;这里是引用段落&lt;/blockquote&gt;</code></td>
<td><blockquote>这里是引用段落</blockquote></td>
</tr>
<tr>
<td>&gt; 这里是引用段落的引用段落</td>
<td><code>&lt;blockquote&gt;这里是引用段落&lt;blockquote&gt;这里是引用段落引用段落&lt;/blockquote&gt;&lt;/blockquote&gt;</code></td>
<td><blockquote>这里是引用段落<blockquote>这里是引用段落引用段落</blockquote></blockquote></td>
</tr>
</tbody></table>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>1. First item<br>2. Second item<br>3. Third item<br>4. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>
</tr>
<tr>
<td>1. First item<br>1. Second item<br>1. Third item<br>1. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>
</tr>
<tr>
<td>1. First item<br>3. Second item<br>5. Third item<br>7. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>
</tr>
<tr>
<td>1. First item<br>1. Second item<br>▯▯▯▯1.Indented item<br>▯▯▯▯1.Indented item<br>1. Third item<br>1. Fourth item</td>
<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;ol&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code><br><code>&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>
<td><ol><li>First item</li><li>Second item</li><li>Third item<ol><li>Indented item</li><li>Indented item</li></ol></li><li>Fourth item</li></ol></td>
</tr>
</tbody></table>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要在保留列表连续性的同时在列表中添加另一种元素, 请将该元素缩进四个空格或一个制表符<br>代码块通常采用四个空格或一个制表符缩进. 当它们被放在列表中时, 请将它们缩进八个空格或两个制表符</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>- First item<br>- Second item<br>- Third item<br>- Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td>
</tr>
<tr>
<td>* First item<br>* Second item<br>* Third item<br>* Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td>
</tr>
<tr>
<td>+ First item<br>+ Second item<br>+ Third item<br>+ Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td>
</tr>
<tr>
<td>_ First item<br>_ Second item<br>▯▯_ Indented item<br>▯▯_ Indented item<br>_ Third item<br>_ Fourth item</td>
<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;ul&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;li&gt;Indented item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code><br><code>&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>
<td><ul><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ul></td>
</tr>
</tbody></table>
<h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>带有复选框的项目列表<br>语法为:</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] Write the press release</span><br><span class="line"><span class="bullet">-</span> [ ] Update the website</span><br><span class="line"><span class="bullet">-</span> [ ] Contact the media</span><br></pre></td></tr></tbody></table></figure>
<p>效果为:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Write the press release</li>
<li><input disabled="" type="checkbox"> Update the website</li>
<li><input disabled="" type="checkbox"> Contact the media</li>
</ul>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h3><p>用 ` 或 `` 在一行内包裹一句代码, 代码中若出现则用 `` 包裹代码块</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>输出 `Hello` 用 Python 实现为: print(‘`hello`‘)</td>
<td><code>输出 \`Hello\` 用 Python 实现为: &lt;code&gt;print('`hello`')&lt;/code&gt;</code></td>
<td>输出 `Hello` 用 Python 实现为: <code>print('`hello`')</code></td>
</tr>
</tbody></table>
<h3 id="跨行代码块"><a href="#跨行代码块" class="headerlink" title="跨行代码块"></a>跨行代码块</h3><p>将代码块的每一行缩进至少四个空格或一个制表符, 或使用 ```(language) 包裹代码块</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>print(‘hello’)<br>    print(‘world’)</td>
<td>取决于解析器</td>
<td><code>print('hello')<br>print('world')</code></td>
</tr>
</tbody></table>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在单独一行上使用三个或多个 * , -, _ ，并且不能包含其他内容. 为了兼容性，请在分隔线的前后均添加空白行.</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>--- 或 ___ 或 ***</td>
<td><code>&lt;tr&gt;</code></td>
<td></td></tr><tr>
</tr>
</tbody></table>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h3><table>
<thead>
<tr>
<th>语法</th>
<th>HTML</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td>[链接名称](链接地址)</td>
<td><code>&lt;a href='链接地址'&gt;链接名称&lt;/a&gt;</code></td>
<td><a href="https://patrick-0079.github.io/">Patrick’s blog</a></td>
</tr>
<tr>
<td>&lt;链接地址&gt;</td>
<td><code>&lt;a href='链接地址'&gt;链接地址&lt;/a&gt;</code></td>
<td><a href="https://patrick-0079.github.io/">https://patrick-0079.github.io/</a></td>
</tr>
</tbody></table>
<h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>语法为 <em>[链接名称][引用序号]</em>, 然后将 <em>[引用序号]: 链接地址</em> 放在之后的段落中, 例如<br><a href="https://patrick-0079.github.io/">Patrick’s blog</a></p>
<h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>语法为 <em>![图片alt](图片链接 “图片title”)</em>, 对应的 HTML 为 <code>&lt;img src="图片链接" alt="图片alt" title="图片title"&gt;</code>, 例如:</p>
<p><a href="https://patrick-0079.github.io/"><img src="https://patrick-0079.github.io/images/logo.ico" alt="Patrick" title="Patrick"></a></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>Markdown中的特殊字符可通过在其前面加 \ 转义</p>
<h2 id="内联-HTML"><a href="#内联-HTML" class="headerlink" title="内联 HTML"></a>内联 HTML</h2><p>在需要内联的 HTML 块前后加空白行</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>语法:</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">| 表头1  | 表头2  |  表头3 | 表头4  |</span><br><span class="line">| ------ | :----- | -----: | :----: |</span><br><span class="line">| 1行1列 | 1行2列 | 1行3列 | 1行3列 |</span><br><span class="line">| 2行1列 | 2行2列 | 2行3列 | 2行3列 |</span><br></pre></td></tr></tbody></table></figure>
<p>其中 — 意为默认对齐,  :— 意为左对齐,  —: 意为右对齐,  :—: 意为居中对齐</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>语法为 <em>[^角标文字]</em>, 然后将 <em>[角标文字]: 解释内容</em> 放在之后的段落中, 例如 Patrick’s blog<a href="/2022/12/14/10-01-00/">^1</a></p>
<h2 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h2><p>用法为</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is the definition of the first term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is one definition of the second term.</span><br><span class="line">: This is another definition of the second term.</span><br></pre></td></tr></tbody></table></figure>
<p>所生成的 HTML 为:</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>First Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is the definition of the first term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Second Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is one definition of the second term. <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is another definition of the second term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>所呈现效果为:<br>First Term<br>▯▯This is the definition of the first term.<br>Second Term<br>▯▯This is one definition of the second term.<br>▯▯This is another definition of the second term.</p>
<h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p>直接使用通过键入表情符号短代码来插入表情符号<br>例如:</p>
<p><code>:joy:</code> -&gt; <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<h2 id="butterfly支持标籤"><a href="#butterfly支持标籤" class="headerlink" title="butterfly支持标籤"></a>butterfly支持标籤</h2><p>作者: Jerry<br>连结: <a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br>来源: Butterfly</p>
<p>逗号用 &amp;sbquo; 代替</p>
<h3 id="便籤"><a href="#便籤" class="headerlink" title="便籤"></a>便籤</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% note simple %}</span><br><span class="line">默认 提示块标籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note default simple %}</span><br><span class="line">default 提示块标籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note primary simple %}</span><br><span class="line">primary 提示块标籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note success simple %}</span><br><span class="line">success 提示块标籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note info simple %}</span><br><span class="line">info 提示块标籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note warning simple %}</span><br><span class="line">warning 提示块标籤</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">{% note danger simple %}</span><br><span class="line">danger 提示块标籤</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note simple"><p>默认 提示块标籤</p>
</div>

<div class="note default simple"><p>default 提示块标籤</p>
</div>

<div class="note primary simple"><p>primary 提示块标籤</p>
</div>

<div class="note success simple"><p>success 提示块标籤</p>
</div>

<div class="note info simple"><p>info 提示块标籤</p>
</div>

<div class="note warning simple"><p>warning 提示块标籤</p>
</div>

<div class="note danger simple"><p>danger 提示块标籤</p>
</div>


<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% note 'fab fa-cc-visa' simple %}</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note blue 'fas fa-bullhorn' simple %}</span><br><span class="line">2021年快到了....</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note pink 'fas fa-car-crash' simple %}</span><br><span class="line">小心开车 安全至上</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note red 'fas fa-fan' simple%}</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note orange 'fas fa-battery-half' simple %}</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note purple 'far fa-hand-scissors' simple %}</span><br><span class="line">剪刀石头布</span><br><span class="line">{% endnote %}</span><br><span class="line">{% note green 'fab fa-internet-explorer' simple %}</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p>
</div>
<div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p>
</div>
<div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p>
</div>
<div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p>
</div>
<div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p>
</div>
<div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p>
</div>
<div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p>
</div>
<div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p>
</div>

<h3 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h3><h4 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color: bg;color: color">display
  </button><span class="hide-content">content</span></span>, 例如
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">哪个英文字母最酷？ {% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %}</span><br><span class="line"></span><br><span class="line">门里站着一个人? {% hideInline 闪 %}</span><br></pre></td></tr></tbody></table></figure>
<p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案
  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p>
<p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click
  </button><span class="hide-content">闪</span></span></p>
<h4 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% hideBlock display,bg,color %}</span><br><span class="line">content</span><br><span class="line">{% endhideBlock %}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>content: 文本内容</li>
<li>display: 按钮显示的文字(可选)</li>
<li>bg: 按钮的背景颜色(可选)</li>
<li>color: 按钮文字的颜色(可选)<br>例如<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">查看答案</span><br><span class="line">{% hideBlock 查看答案 %}</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">{% endhideBlock %}</span><br></pre></td></tr></tbody></table></figure>
查看答案<div class="hide-block"><button type="button" class="hide-button" style="">查看答案
    </button><div class="hide-content"><p>傻子，怎么可能有答案</p>
</div></div></li>
</ul>
<h4 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% hideToggle display,bg,color %}</span><br><span class="line">content</span><br><span class="line">{% endhideToggle %}</span><br></pre></td></tr></tbody></table></figure>
<p>例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% hideToggle Butterfly安装方法 %}</span><br><span class="line">在你的博客根目录里</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">{% endhideToggle %}</span><br></pre></td></tr></tbody></table></figure>
<details class="toggle"><summary class="toggle-button" style="">Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p>
<p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
<p>如果想要安装比较新的dev分支，可以</p>
<p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
</div></details>


<h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h3><p>使用mermaid标籤可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% mermaid %}</span><br><span class="line">内容</span><br><span class="line">{% endmermaid %}</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://mermaid-js.github.io/mermaid/#/">mermaid文档</a></p>
<h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>使用方法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs Unique name, [index] %}</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line">                Will be used in #id's as prefix for each tab with their index numbers.</span><br><span class="line">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                Only for current url of post/page must be unique!</span><br><span class="line">[index]       : Index number of active tab.</span><br><span class="line">                If not specified, first tab (1) will be selected.</span><br><span class="line">                If index is -1, no tab will be selected. It's will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption of current tab.</span><br><span class="line">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')</span><br><span class="line">                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></tbody></table></figure>
<p>例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs test1, 2 %}</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab active"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景颜色(默认style时）</span><br><span class="line">                      按钮字体和边框颜色(outline时)</span><br><span class="line">                      default/blue/pink/red/purple/orange/green</span><br><span class="line">[style]       : [可选] 按钮样式 默认实心</span><br><span class="line">                      outline/留空</span><br><span class="line">[layout]      : [可选] 按钮布局 默认为line</span><br><span class="line">                      block/留空</span><br><span class="line">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span><br><span class="line">                      center/right/留空</span><br><span class="line">[size]        : [可选] 按钮大小</span><br><span class="line">                      larger/留空</span><br></pre></td></tr></tbody></table></figure>

<h3 id="inlineImg"><a href="#inlineImg" class="headerlink" title="inlineImg"></a>inlineImg</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% inlineImg [src] [height] %}</span><br><span class="line"></span><br><span class="line">[src]      :    图片链接</span><br><span class="line">[height]   ：   图片高度限制【可选】</span><br></pre></td></tr></tbody></table></figure>

<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% label text color %}</span><br><span class="line">color: default/blue/pink/red/purple/orange/green</span><br></pre></td></tr></tbody></table></figure>
<p>例如<br><code>{% label text blue %}</code><mark class="hl-label blue">text</mark> </p>
<h3 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% timeline title,color %}</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">{% endtimeline %}</span><br></pre></td></tr></tbody></table></figure>

<p>例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% timeline 2022 %}</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">{% endtimeline %}</span><br></pre></td></tr></tbody></table></figure>
<div class="timeline undefined"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p>
</div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p>
</div></div><div class="timeline-item-content"><p>这是测试页面</p>
</div></div></div>

<h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><p>友链</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% flink %}</span><br><span class="line">link.yml内容</span><br><span class="line">{% endflink %}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<div class="flink"><div class="flink-name">Markdown 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://markdown.com.cn/" title="Markdown Documentation" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://markdown.com.cn/hero.png" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Markdown Documentation">
              </div>
              <div class="flink-item-name">Markdown Documentation</div> 
              <div class="flink-item-desc" title="Markdown 官方教程">Markdown 官方教程</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://butterfly.js.org/" title="Butterfly theme 文档" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://butterfly.js.org/img/avatar.png" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Butterfly theme 文档">
              </div>
              <div class="flink-item-name">Butterfly theme 文档</div> 
              <div class="flink-item-desc" title="Butterfly theme 官方博客">Butterfly theme 官方博客</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Tool</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Baisc grammar</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos 的简单使用笔记</title>
    <url>/2023/01/02/14-50-07/</url>
    <content><![CDATA[<h1 id="Nacos-简单使用笔记"><a href="#Nacos-简单使用笔记" class="headerlink" title="Nacos 简单使用笔记"></a><strong>Nacos</strong> 简单使用笔记</h1><p>Nacos 是 Alibaba 开发的, 具有服务管理, 注册与发现, 配置发布与获取功能的框架<br>集成了注册中心, 配置中心, 服务管理功能<br>Nacos 关键特性有:</p>
<ul>
<li>服务发现和服务健康监控</li>
<li>动态配置服务</li>
<li>动态 DNS</li>
<li>服务及其元数据管理<br>Nacos 支持了 CP + AP 协议</li>
</ul>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><p><a href="/2022/12/14/19-30-57#%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%AE%80%E4%BB%8B">注册中心简介</a></p>
<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>配置中心是为解决不同服务运行环境需要不同的一个微服务单元<br>常用的配置中心有</p>
<ul>
<li>Spring cloud config</li>
<li>Apollo</li>
<li>Nacos</li>
</ul>
<h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><p>动态管理实例</p>
<h2 id="Nacos-启动"><a href="#Nacos-启动" class="headerlink" title="Nacos 启动"></a>Nacos 启动</h2><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><ol>
<li>下载 <a href="https://github.com/alibaba/nacos/releases">Nacos</a></li>
<li>在 bin 目录下执行 startup 脚本:<br> <code>startup.cmd -m standalone</code> 或 <code>startup.sh -m standalone</code>, 其中 <code>standalone</code> 为单机模式启动</li>
<li>使用 <code>shutdown.sh</code> 或 <code>shutdown.cmd</code> 脚本关闭服务</li>
</ol>
<h2 id="使用-MySQL-替换-Derby"><a href="#使用-MySQL-替换-Derby" class="headerlink" title="使用 MySQL 替换 Derby"></a>使用 MySQL 替换 Derby</h2><ol>
<li>在 MySQL 中创建库, 并导入 所需表</li>
<li>修改 /conf 下的 <mark class="hl-label default">application.properties</mark>  配置文件<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql # 使用 MySQl 数据源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1 # 数据库实例数量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">nacos</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">nacos</span></span><br><span class="line"><span class="comment"># 上面的 '.0' 表示第 0 个库的连接信息, 多数据库需要配置 MySQL 主从节点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connection pool configuration: hikariCP</span></span><br><span class="line"><span class="attr">db.pool.config.connectionTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">db.pool.config.validationTimeout</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">db.pool.config.maximumPoolSize</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">db.pool.config.minimumIdle</span>=<span class="string">2</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>修改 /conf 下的 <mark class="hl-label default">cluster.conf</mark>  配置文件, 添加 Nacos 实例地址</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>命令 <code>sh startup.sh -p embedded</code> 或 <code>./startup.cmd -p embedded</code> 使用内置数据源启动 Nacos<br>命令 <code>sh startup.sh</code> 或 <code>./startup.cmd</code>  使用外置数据源启动 Nacos</p>
<h2 id="Nacos-Client"><a href="#Nacos-Client" class="headerlink" title="Nacos Client"></a>Nacos Client</h2><div class="note info simple"><p>使用版本<br><mark class="hl-label green">Spring boot 2.6.11</mark>  + <mark class="hl-label green">Spring cloud alibaba 2021.0.4.0</mark> </p>
</div>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><div class="note info simple"><p><del>需要进行服务发现的实例需要在 Spring boot 启动类添加 @EnableDiscoveryClient 注解</del></p>
</div>
<mark class="hl-label default">依赖项</mark> 
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label default">application.yml</mark> 
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9000</span> <span class="comment"># Nacos 服务器地址</span></span><br><span class="line">            <span class="attr">password:</span> <span class="string">DEV</span> <span class="comment"># Nacos 密码</span></span><br><span class="line">            <span class="attr">username:</span> <span class="string">DEV</span> <span class="comment"># Nacos 用户名</span></span><br><span class="line">            <span class="attr">discovery:</span></span><br><span class="line">                <span class="attr">server-addr:</span> <span class="string">${spring.cloud.nacos.server-addr}</span> <span class="comment"># Nacos 服务发现地址. 默认为 ${spring.cloud.nacos.server-addr}</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">${spring.cloud.nacos.username}</span> <span class="comment"># Nacos 服务发现用户名. 默认为 ${spring.cloud.nacos.username}</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">${spring.cloud.nacos.password}</span> <span class="comment"># Nacos 服务发现密码. 默认为 ${spring.cloud.nacos.password}</span></span><br><span class="line">                <span class="attr">namespace:</span> <span class="string">DEV</span> <span class="comment"># 命名空间</span></span><br><span class="line">                <span class="attr">group:</span> <span class="string">Patrick</span> <span class="comment"># 组. 默认为 DEFAULT_GROUP</span></span><br><span class="line">                <span class="attr">register-enabled:</span> <span class="literal">false</span> <span class="comment"># 是否注册该实例. 默认为 ture</span></span><br><span class="line">                <span class="attr">cluster-name:</span> <span class="string">Local</span> <span class="comment"># 集群名称. 默认为 DEFAULT</span></span><br><span class="line">                <span class="attr">metadata:</span> <span class="comment"># 附加的注册元数据</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">Patrick</span></span><br><span class="line">                <span class="comment"># ---------------------------------------- 不常用配置 ---------------------------------------- #</span></span><br><span class="line">                <span class="attr">ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 手动设置IP, 默认为自动识别</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否进行服务发现. 默认为 true</span></span><br><span class="line">                <span class="attr">access-key:</span> <span class="comment"># 服务发现命名空间访问密钥</span></span><br><span class="line">                <span class="attr">endpoint:</span> <span class="comment"># 服务的域名, 通过该域名可以动态获取服务器地址</span></span><br><span class="line">                <span class="attr">ephemeral:</span> <span class="literal">true</span> <span class="comment"># 是否是短暂实例. 默认为 true</span></span><br><span class="line">                <span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment"># 如果为 true, 则在服务注册失败抛出异常, 否则记录错误. 默认为 true</span></span><br><span class="line">                <span class="attr">failure-tolerance-enabled:</span> <span class="literal">false</span> <span class="comment"># 是否启用 nacos 容错. 如果启用, 则当发生异常时, nacos将返回缓存的值. 默认为 false</span></span><br><span class="line">                <span class="attr">heart-beat-interval:</span> <span class="number">10000</span> <span class="comment"># 心跳间隔(时间单位: 毫秒). 缺省即可</span></span><br><span class="line">                <span class="attr">heart-beat-timeout:</span> <span class="number">10000</span> <span class="comment"># 心跳超时时间(时间单位: 毫秒). 缺省即可</span></span><br><span class="line">                <span class="attr">instance-enabled:</span> <span class="literal">true</span> <span class="comment"># 实例是否可用. 默认为 true</span></span><br><span class="line">                <span class="attr">ip-delete-timeout:</span> <span class="number">10000</span> <span class="comment"># IP超时时间(时间单位: 毫秒). 缺省即可</span></span><br><span class="line">                <span class="attr">ip-type:</span> <span class="string">IPv4</span> <span class="comment"># IP地址类型. 默认为 IPv4</span></span><br><span class="line">                <span class="attr">log-name:</span> <span class="string">naming.log</span> <span class="comment"># Nacos日志名称. 缺省即可. 默认为 naming.log</span></span><br><span class="line">                <span class="attr">nacos-properties:</span></span><br><span class="line">                    <span class="attr">key:</span> <span class="string">value</span></span><br><span class="line">                <span class="attr">naming-load-cache-at-start:</span> <span class="literal">false</span> <span class="comment"># 是否在应用程序启动时从本地缓存命名加载. 默认为 false</span></span><br><span class="line">                <span class="attr">network-interface:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 注册网络接口的IP. 默认为空</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">-1</span> <span class="comment"># 要为服务实例注册的端口, 如果自动检测端口工作正常, 则无需设置该端口. 默认为 -1</span></span><br><span class="line">                <span class="attr">secret-key:</span> <span class="comment"># 服务发现密钥</span></span><br><span class="line">                <span class="attr">secure:</span> <span class="literal">false</span> <span class="comment"># 实例是否是 https 类型. 默认为 false</span></span><br><span class="line">                <span class="attr">service:</span> <span class="string">${spring.application.name}</span> <span class="comment"># 实例注册名称. 默认是 ${spring.application.name}</span></span><br><span class="line">                <span class="attr">watch-delay:</span> <span class="number">30000</span> <span class="comment"># 从 Nacos 拉取服务的请求的延迟时间. 默认是 30000</span></span><br><span class="line">                <span class="attr">watch:</span></span><br><span class="line">                    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 当为 true 时, 服务会在启动时会创建一个线程池, 该线程定期去查询服务端的信息列表, 查询请求不会立刻返回, 而是等待 spring.cloud.nacos.discovery.watch-delay, 若在等待时间内, 服务端信息列表发生变化, 则该请求立刻返回响应, 通知客户端拉取服务端的服务信息列表, 若没有变化, 则最后该请求返回响应, 客户端服务列表不变, 之后次发送请求. 默认为 ture</span></span><br><span class="line">                <span class="attr">weight:</span> <span class="number">1</span> <span class="comment"># 实例权重. 默认为 1</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">                <span class="comment"># ---------------------------------------- 不常用配置 ---------------------------------------- #</span></span><br><span class="line">                <span class="attr">prefix:</span> <span class="string">${spring.application.name}</span> <span class="comment"># 配置文件前缀</span></span><br><span class="line">                <span class="attr">import-check:</span></span><br><span class="line">                    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 导入配置文件. 默认为 true, 需要填写 spring.config.import</span></span><br><span class="line">                <span class="attr">access-key:</span> <span class="comment"># 配置管理命名空间访问密钥</span></span><br><span class="line">                <span class="attr">cluster-name:</span> <span class="string">Local</span> <span class="comment"># 集群名称</span></span><br><span class="line">                <span class="attr">config-retry-time:</span> <span class="string">5s</span> <span class="comment"># 获取配置失败重试时间</span></span><br><span class="line">                <span class="attr">config-long-poll-timeout:</span> <span class="string">5s</span> <span class="comment"># 获取配置长轮询超时时间</span></span><br><span class="line">                <span class="attr">context-path:</span> <span class="string">/nacos</span> <span class="comment"># 配置管理路径, 缺省即可</span></span><br><span class="line">                <span class="attr">enable-remote-sync-config:</span> <span class="literal">false</span> <span class="comment"># 主配置 开启注册监听器预加载配置服务 (除非特殊业务需求，否则不推荐打开该参数). 默认为 false</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否开启配置管理. 默认为 true</span></span><br><span class="line">                <span class="attr">encode:</span> <span class="string">UTF-8</span> <span class="comment"># 配置编码. 默认为 UTF-8</span></span><br><span class="line">                <span class="attr">endpoint:</span> <span class="comment"># Nacos的端点, 服务的域名, 通过它可以动态获取服务器地址</span></span><br><span class="line">                <span class="attr">extension-configs:</span> <span class="comment"># 扩展配置</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">classpath:/ext.yml</span></span><br><span class="line">                <span class="attr">group:</span> <span class="string">DEV</span> <span class="comment"># 组</span></span><br><span class="line">                <span class="attr">max-retry:</span> <span class="number">10</span> <span class="comment"># 服务器重新连接错误的最大数量</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">provider-dev.yml</span> <span class="comment"># Nacos 配置 ID, 缺省即可</span></span><br><span class="line">                <span class="attr">namespace:</span> <span class="string">DEV</span> <span class="comment"># 命名空间</span></span><br><span class="line">                <span class="attr">environment:</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">${spring.cloud.nacos.password</span> <span class="comment"># Nacos 密码. 默认为 ${spring.cloud.nacos.password</span></span><br><span class="line">                <span class="attr">preference:</span> <span class="string">local</span> <span class="comment"># 配置首选项 值为 local 或 remote. 默认为 local</span></span><br><span class="line">                <span class="attr">ram-role-name:</span> <span class="comment"># 阿里云 RAM 用户名</span></span><br><span class="line">                <span class="attr">refresh-behavior:</span> <span class="string">all_beans</span> <span class="comment"># ConfigurationPropertiesBean刷新行为, 取值为 all_beans 或 specific_bea. 默认为 all_beans</span></span><br><span class="line">                <span class="attr">refresh-enabled:</span> <span class="literal">true</span> <span class="comment"># 是否刷新配置. 默认为 true</span></span><br><span class="line">                <span class="attr">secret-key:</span> <span class="comment">#命名空间密钥</span></span><br><span class="line">                <span class="attr">server-addr:</span> <span class="string">${spring.cloud.nacos.server-addr}</span> <span class="comment"># Nacos 配置中心地址, 默认是 ${spring.cloud.nacos.server-addr}</span></span><br><span class="line">                <span class="attr">shared-configs:</span> <span class="comment"># 共享配置</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">optional:nacos:mysql-config.yml</span></span><br><span class="line">                <span class="attr">timeout:</span> <span class="number">5000</span> <span class="comment"># 获取配置超时时间</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">${spring.cloud.nacos.username}</span> <span class="comment"># 配置中心用户名. 默认为 ${spring.cloud.nacos.username</span></span><br><span class="line">        <span class="attr">loadbalancer:</span></span><br><span class="line">            <span class="attr">nacos:</span></span><br><span class="line">            <span class="comment"># ---------------------------------------- 不常用配置 ---------------------------------------- #</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># 是否集成LoadBalancer. 默认为 false</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">        <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 运行环境. 可以被命令行开关覆盖</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">        <span class="attr">import:</span> <span class="comment"># 需要拉取的配置文件列表</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">optional:nacos:${spring.cloud.nacos.config.prefix}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}</span></span><br><span class="line">            <span class="comment"># optional 指 jar 包外部文件, 若为 classpath 则指 jar 包内部文件; nacos 指使用 nacos 获取</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="comment"># ---------------------------------------- 不常用配置 ---------------------------------------- #</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">        <span class="attr">nacosdiscovery:</span></span><br><span class="line">            <span class="attr">cache:</span></span><br><span class="line">                <span class="attr">time-to-live:</span> <span class="string">0ms</span> <span class="comment"># Nacos 服务发现可以缓存响应的最长时间. 默认为 0ms</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用 nacos discovery 端点. 默认为 true</span></span><br><span class="line">        <span class="attr">nacosconfig:</span></span><br><span class="line">            <span class="attr">cache:</span></span><br><span class="line">                <span class="attr">time-to-live:</span> <span class="string">0ms</span> <span class="comment"># Nacos 配置管理可以缓存响应的最长时间. 默认为 0ms</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用 nacos config 端点. 默认为 true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p><a href="/2022/12/14/19-30-57#%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8">远程调用介绍</a></p>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><table>
<thead>
<tr>
<th>注解名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@RefreshScope</td>
<td>热刷新被 @Value 类变量</td>
</tr>
</tbody></table>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p>LoadBalancer 实现了轮询和随机两种负载均衡策略, Nacos 中实现了 LoadBalancer 的负载均衡策略</p>
<h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><ul>
<li>RandomLoadBalancer  <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.cloud.loadbalancer.core.RandomLoadBalancer</span></span>
  随机策略</li>
<li>RoundRobinLoadBalancer  <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer</span></span>
  轮询策略, 这是LoadBalancer 默认的策略</li>
<li>NacosLoadBalancer  <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">com.alibaba.cloud.nacos.loadbalancer.NacosLoadBalancer</span></span>
  Nacos 负载均衡策略, 优先选取同集群实例群, 之后进行权重随机选取</li>
<li>自定义策略<br>  实现 org.springframework.cloud.loadbalancer.core.ReactorServiceInstanceLoadBalancer 接口可以自定义负载均衡策略</li>
</ul>
<h5 id="Nacos-负载均衡策略"><a href="#Nacos-负载均衡策略" class="headerlink" title="Nacos 负载均衡策略"></a>Nacos 负载均衡策略</h5><p>将配置文件中的 <code>spring.cloud.loadbalancer.nacos.enabled</code> 属性设置为 <code>true</code> 即可, 或者使用配置类进行注入</p>
<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><mark class="hl-label default">Config.java</mark> 
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.RandomLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">randomLoadBalancer</span><span class="params">(Environment environment,</span></span><br><span class="line"><span class="params">                                                            LoadBalancerClientFactory loadBalancerClientFactory)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info simple"><p>自定义策略需要在 Spring boot 启动类添加 @LoadBalancerClients(defaultConfiguration = Config.class) 注解, 其中 Config 类为包含 ReactorLoadBalancer<serviceinstance> Bean 的配置类</serviceinstance></p>
</div>
<h5 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h5><p>使用 @LoadBalancerClients 配合 @ LoadBalancerClient 注解可实现细粒度的负载均衡配置</p>
<mark class="hl-label default">LoadBalancerConfig.java</mark> 
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.annotation.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.annotation.LoadBalancerClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.RandomLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@LoadBalancerClients(</span></span><br><span class="line"><span class="meta">        @LoadBalancerClient(name = "provider", configuration = LoadBalancerConfig.class)</span></span><br><span class="line"><span class="meta">)</span> <span class="comment">// 只有一个服务时, 使用 @LoadBalancerClient 即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">randomLoadBalancer</span><span class="params">(Environment environment,</span></span><br><span class="line"><span class="params">                                                            LoadBalancerClientFactory loadBalancerClientFactory)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoundRobinLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<div class="flink"><div class="flink-name">Nacos 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html" title="Nacos 文档" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://nacos.io/img/nacos_colorful.png" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Nacos 文档">
              </div>
              <div class="flink-item-name">Nacos 文档</div> 
              <div class="flink-item-desc" title="Nacos 参考文档">Nacos 参考文档</div>
            </a>
          </div></div></div>

]]></content>
      <categories>
        <category>Note</category>
        <category>Spring</category>
        <category>Spring boot</category>
        <category>Spring cloud</category>
        <category>Spring cloud Alibaba</category>
        <category>Nacos</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Spring boot</tag>
        <tag>Registration</tag>
        <tag>Microservices</tag>
        <tag>Alibaba</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 的简单使用笔记</title>
    <url>/2022/12/14/21-44-00/</url>
    <content><![CDATA[<h1 id="Nginx-简单使用笔记"><a href="#Nginx-简单使用笔记" class="headerlink" title="Nginx 简单使用笔记"></a><strong>Nginx</strong> 简单使用笔记</h1><p>Nginx 是一个轻量级的 Web 服务器 基础功能有反向代理, 邮件代理等, 同时其具有可高度定制的特点.<br>Nginx 有众多插件, 配合插件 Nginx 能实现直播等许多功能.<br>Nginx 的核心学习目标是它的配置文件 <mark class="hl-label default">nginx.conf</mark> </p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>以下面的配置文件为例</p>
<div class="note info simple"><p>配置文件中的配置是常用配置, 值有可能不是是默认值</p>
</div>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 全局块</span><br><span class="line">user                    nobody; # 启动用户</span><br><span class="line">worker_processes        1; # 业务进程数量(子进程 worker), 一般不超过ngingx可用的CPU内核数量</span><br><span class="line">error_log               logs/error.log          info; # 全局日志设置, 最后一个值为日志级别, 日志级别取值有 debug, info, notice, warn, error, crit, alert, emerg</span><br><span class="line">pid                     logs/nginx.pid; # Nginx 的 pid 存放地址</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events { # events 块</span><br><span class="line">    worker_connections  1024; # 单个业务进程可接受的连接数</span><br><span class="line">    accept_mutex        on; #设置网路连接序列化, 防止惊群现象发生</span><br><span class="line">    multi_accept        off; #设置一个进程是否同时接受多个网络连接</span><br><span class="line">    use                 epoll; #事件驱动模型, 取值有 select, poll, kqueue, epoll, resig, /dev/poll, eventport</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http { # http 块</span><br><span class="line">    include             mime.types; # 引入 mime.type 模块(文件扩展名与文件类型映射表)</span><br><span class="line">    default_type        application/octet-stream; # 若 mime 类型未匹配成功时使用的传输方式方式</span><br><span class="line">    sendfile            on; # 设置 sendfile 方式传输文件</span><br><span class="line">    keepalive_timeout   65; # 连接超时时间</span><br><span class="line">    gzip                on; # gzip 压缩</span><br><span class="line">    access_log          logs/access.log     format_name; #服务日志, 第一个值为 off 时为取消服务日志. 第一个值时日志地址, 第二个值是格式化模板(可缺省)</span><br><span class="line">    log_format          format_name         '### $remote_addr ### $request ### $status'; # 日志格式话模板</span><br><span class="line">    sendfile_max_chunk  0;  #每个进程每次调用传输数量不能大于设定的值, 0代表不设上限</span><br><span class="line">    error_page          404 500             /50x.html; # 错误页配置, 第一组值是错误码, 第二个值是错误页面的URI</span><br><span class="line">    deny                127.0.0.1 1; # 拒绝的ip组, 取值可有 address, CIDR, unix:, all</span><br><span class="line">    allow               172.18.5.54; # 允许的ip 组, 取值可有 address, CIDR, unix:, all</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    upstream servers_name { # 别名组</span><br><span class="line">        server 127.0.0.1:8000 weight=7 down; # weight 是权重, 缺省默认是1. down 代表下线, 缺省代表在线</span><br><span class="line">        server 127.0.0.1:8001 backup; # backup 代表是备用机, 有其他可访问实例时不会被访问</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    server { # http.server 块 (server 块)</span><br><span class="line">        listen                  80; # 服务主机监听的端口号</span><br><span class="line">        server_name             localhost; # 服务主机的主机名或域名</span><br><span class="line">        keepalive_requests      120; # 单连接请求上限次数</span><br><span class="line">        sendfile                on; # 允许 sendfile 方式传输文件</span><br><span class="line">        deny                    127.0.0.1 1; # 拒绝的ip组, 取值可有 address, CIDR, unix:, all</span><br><span class="line">        allow                   172.18.5.54; # 允许的ip 组, 取值可有 address, CIDR, unix:, all</span><br><span class="line">        error_page   500 502 503 504  /50x.html; # 错误页配置</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        location / { # http.sevet.location 块 (location 块), / 是URI匹配规则</span><br><span class="line">            root            html; # URI指向的文件夹</span><br><span class="line">            index           index.html index.htm; # 默认页组</span><br><span class="line">            proxy_pass      http://127.0.0.1:8000;  #请求转发, 利用别名组代替地址可实现负载均衡</span><br><span class="line">            deny            127.0.0.1 1; # 拒绝的ip组, 取值可有 address, CIDR, unix:, all</span><br><span class="line">            allow           172.18.5.54; # 允许的ip 组, 取值可有 address, CIDR, unix:, all</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="核心模块指令"><a href="#核心模块指令" class="headerlink" title="核心模块指令"></a>核心模块指令</h2><details class="toggle" style="border: 1px solid  #cfd2d5"><summary class="toggle-button" style="background-color:  #cfd2d5;color:  #020304">查看所有指令解释</summary><div class="toggle-content"><h3 id="absolute-redirect"><a href="#absolute-redirect" class="headerlink" title="absolute_redirect"></a>absolute_redirect</h3><ul>
<li>取值: on | off (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 重定向绝对地址<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#absolute_redirect"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="aio"><a href="#aio" class="headerlink" title="aio"></a>aio</h3><ul>
<li>取值: on | off | threads[=pool] (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 异步文件 I/O<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#aio"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="aio-write"><a href="#aio-write" class="headerlink" title="aio_write"></a>aio_write</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 当开启 aio 时指定是否将其用于写入文件<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#aio_write"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><ul>
<li>取值: 具体路径</li>
<li>可配置模块: location</li>
<li>解释: 将匹配的访问路径重新指定为新定义的文件路径. alias 指定的目录是 location 路径的实际目录，其所在 location 的 rewrite 指令不能使用 break 参数<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#alias"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="auth-delay"><a href="#auth-delay" class="headerlink" title="auth_delay"></a>auth_delay</h3><ul>
<li>取值: 具体时间 (默认 0s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 当访问受密码、子请求结果或 JWT 限制的资源时，使用 401 响应代码延迟处理未经授权的请求，以防止计时攻击<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#auth_delay"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="chunked-transfer-encoding"><a href="#chunked-transfer-encoding" class="headerlink" title="chunked_transfer_encoding"></a>chunked_transfer_encoding</h3><ul>
<li>取值: on | off (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 在 HTTP/1.1 中禁用分块传输编码<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#chunked_transfer_encoding"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-body-buffer-size"><a href="#client-body-buffer-size" class="headerlink" title="client_body_buffer_size"></a>client_body_buffer_size</h3><ul>
<li>取值: 具体大小 (默认 16k)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 用于读取客户端请求正文的缓冲区大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-body-in-file-only"><a href="#client-body-in-file-only" class="headerlink" title="client_body_in_file_only"></a>client_body_in_file_only</h3><ul>
<li>取值: on | clean | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 保存整个客户端请求正文到文件中<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-body-in-single-buffer"><a href="#client-body-in-single-buffer" class="headerlink" title="client_body_in_single_buffer"></a>client_body_in_single_buffer</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 保存整个客户端请求正文在单个缓冲区中. 建议在使用变量时使用该指令, 以节省所涉及的复制操作数<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_single_buffer"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-body-temp-path"><a href="#client-body-temp-path" class="headerlink" title="client_body_temp_path"></a>client_body_temp_path</h3><ul>
<li>取值: 具体路径 [级别[级别[级别]]]</li>
<li>可配置模块: http, server, location</li>
<li>解释: 定义用于存储保存客户端请求正文的临时文件的目录. 在指定的下最多可以使用三级子目录层次结构目录<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_temp_path"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-body-timeout"><a href="#client-body-timeout" class="headerlink" title="client_body_timeout"></a>client_body_timeout</h3><ul>
<li>取值: 具体时间 (默认 60s)</li>
<li>可配置模块: http, server</li>
<li>解释: 读取客户端请求正文的超时时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_timeout"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-header-buffer-size"><a href="#client-header-buffer-size" class="headerlink" title="client_header_buffer_size"></a>client_header_buffer_size</h3><ul>
<li>取值: 具体大小 (默认 1k)</li>
<li>可配置模块: http, server</li>
<li>解释: 用于读取客户端请求标头的缓冲区大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_header_buffer_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-header-timeout"><a href="#client-header-timeout" class="headerlink" title="client_header_timeout"></a>client_header_timeout</h3><ul>
<li>取值: 具体时间 (默认 60s)</li>
<li>可配置模块: http, server</li>
<li>解释: 读取客户端请求标头的超时时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_header_timeout"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="client-max-body-size"><a href="#client-max-body-size" class="headerlink" title="client_max_body_size"></a>client_max_body_size</h3><ul>
<li>取值: 具体大小 (默认 1m)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 客户端请求正文允许的最大大小, 设置为 0 为不限制<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="connection-pool-size"><a href="#connection-pool-size" class="headerlink" title="connection_pool_size"></a>connection_pool_size</h3><ul>
<li>取值: 具体大小 (默认 512)</li>
<li>可配置模块: http, server</li>
<li>解释: 准确调整每个连接的内存分配<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#connection_pool_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="default-type"><a href="#default-type" class="headerlink" title="default_type"></a>default_type</h3><ul>
<li>取值: mime.types 模块中的类型 (默认 text/plain)</li>
<li>可配置模块: http, server</li>
<li>解释: 定义响应的默认 MIME 类型<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#default_type"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="directio"><a href="#directio" class="headerlink" title="directio"></a>directio</h3><ul>
<li>取值: 具体大小 | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 读取大于或等于设定大小的文件时, 允许使用 flag<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#directio"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="directio-alignment"><a href="#directio-alignment" class="headerlink" title="directio_alignment"></a>directio_alignment</h3><ul>
<li>取值: off | on if_not_owner [from=part] (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: off: 允许和不检查路径名中的符号链接; on: 如果路径名的任何组件是符号链接, 对文件的访问被拒绝; if_not_owner, from: 参见详细解释<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#directio_alignment"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="error-page"><a href="#error-page" class="headerlink" title="error_page"></a>error_page</h3><ul>
<li>取值: 错误码… [=[response]] URI</li>
<li>可配置模块: http, server, location</li>
<li>解释: 指定错误码对应的错误页<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#error_page"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="etag"><a href="#etag" class="headerlink" title="etag"></a>etag</h3><ul>
<li>取值: on | off (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用 ETag 的自动生成的静态资源的响应标头字段<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#etag"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#http"><mark class="hl-label blue">详细解释</mark> </a></p>
<h3 id="if-modified-since"><a href="#if-modified-since" class="headerlink" title="if_modified_since"></a>if_modified_since</h3><ul>
<li>取值: off | exact | before (默认 exact)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 对文件修改时间的服务端校验提供了两种不同的比对方式. 值为 exact 时, Nginx 会将请求头中 if_modified_since 的时间与响应数据中的时间做精确匹配, 即完全相等才认为客户端缓存有效, 返回响应状态码 304; 值为 before 时, 在请求头中 if_modified_since 的时间大于响应数据中的时间也认为客户端缓存有效, 返回响应状态码 304. 该指令功能控制处于数据流的出入口, 对于任何形式产生的响应数据都有效, 值为 off 时, 关闭 Nginx 对客户端缓存文件修改时间的服务端校验功能<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#if_modified_since"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="ignore-invalid-headers"><a href="#ignore-invalid-headers" class="headerlink" title="ignore_invalid_headers"></a>ignore_invalid_headers</h3><ul>
<li>取值: on | off (默认 on)</li>
<li>可配置模块: http, server</li>
<li>解释: 控制是否应忽略名称无效的标头字段<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#ignore_invalid_headers"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="internal"><a href="#internal" class="headerlink" title="internal"></a>internal</h3><ul>
<li>取值: 无</li>
<li>可配置模块: location</li>
<li>解释: 指定给定位置只能用于内部请求<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#internal"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="keepalive-disable"><a href="#keepalive-disable" class="headerlink" title="keepalive_disable"></a>keepalive_disable</h3><ul>
<li>取值: none | browser …(默认 msie6)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 禁用与行为异常的浏览器的保持活动连接<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_disable"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="keepalive-requests"><a href="#keepalive-requests" class="headerlink" title="keepalive_requests"></a>keepalive_requests</h3><ul>
<li>取值: 具体数字 (默认 1000)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置可以通过一个保持活动连接提供的最大请求数<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_requests"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="keepalive-time"><a href="#keepalive-time" class="headerlink" title="keepalive_time"></a>keepalive_time</h3><ul>
<li>取值: 具体时间 (默认 1h)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 限制可以通过一个保持活动连接来处理请求的最长时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_time"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="keepalive-timeout"><a href="#keepalive-timeout" class="headerlink" title="keepalive_timeout"></a>keepalive_timeout</h3><ul>
<li>取值: 具体时间 [header_timeout] (默认 75s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 第一个参数设置一个超时间, 在此期间客户端连接将在服务器端保持打开状态 (值 0 将禁用保持活动状态的客户端连接). 第二个可选参数设置在 “Keep-Alive: timeout=” 响应标头字段.<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="large-client-header-buffers"><a href="#large-client-header-buffers" class="headerlink" title="large_client_header_buffers"></a>large_client_header_buffers</h3><ul>
<li>取值: 具体数量 具体大小 (默认 4 8k)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 对读取请求头设置最大数量和大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="limit-except"><a href="#limit-except" class="headerlink" title="limit_except"></a>limit_except</h3><ul>
<li>取值: Http_method{…}</li>
<li>可配置模块: location</li>
<li>解释: 限制允许在某个位置内使用的 HTTP 方法</li>
<li>例子:<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">limit_except GET { # 限制对除 GET 和 HEAD 之外的所有方法的访问</span><br><span class="line">    allow 192.168.1.0/32;</span><br><span class="line">    deny  all;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#limit_except"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="limit-rate"><a href="#limit-rate" class="headerlink" title="limit_rate"></a>limit_rate</h3><ul>
<li>取值: 具体速率 (默认 0, 单位 B/s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 限制每个连接向客户端传输响应的速率<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="limit-rate-after"><a href="#limit-rate-after" class="headerlink" title="limit_rate_after"></a>limit_rate_after</h3><ul>
<li>取值: 具体大小 (默认 0)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置初始值, 在此之后进一步传输响应将受到速率限制<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="lingering-close"><a href="#lingering-close" class="headerlink" title="lingering_close"></a>lingering_close</h3><ul>
<li>取值: off | on | always (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 控制 nginx 关闭客户端连接的方式<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#lingering_close"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="lingering-time"><a href="#lingering-time" class="headerlink" title="lingering_time"></a>lingering_time</h3><ul>
<li>取值: 具体时间 (默认 30s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 当 lingering_close 生效时, 此指令指定 Nginx 处理 (读取和忽略) 来自客户端的其他数据的最长时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#lingering_time"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="lingering-timeout"><a href="#lingering-timeout" class="headerlink" title="lingering_timeout"></a>lingering_timeout</h3><ul>
<li>取值: 具体时间 (默认 5s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 当 lingering_close 生效时, 此指令指定更多客户端数据到达的最长等待时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#lingering_timeout"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h3><ul>
<li>取值: 参见详细解释</li>
<li>可配置模块: server</li>
<li>解释: 参见详细解释<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#listen"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#location"><mark class="hl-label blue">详细解释</mark> </a></p>
<h3 id="log-not-found"><a href="#log-not-found" class="headerlink" title="log_not_found"></a>log_not_found</h3><ul>
<li>取值: on | off (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用将有关未找到文件的错误记录到 error_log 中<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#log_not_found"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="log-subrequest"><a href="#log-subrequest" class="headerlink" title="log_subrequest"></a>log_subrequest</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用将子请求记录到 access_log<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#log_subrequest"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="max-ranges"><a href="#max-ranges" class="headerlink" title="max_ranges"></a>max_ranges</h3><ul>
<li>取值: 具体值</li>
<li>可配置模块: http, server, location</li>
<li>解释: 限制字节范围请求中允许的最大范围数, 值 0 将禁用字节范围支持<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#max_ranges"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="merge-slashes"><a href="#merge-slashes" class="headerlink" title="merge_slashes"></a>merge_slashes</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server</li>
<li>解释: 启用或禁用两个或多个相邻斜杠在 URI 中变成单个斜杠的压缩<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#merge_slashes"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="msie-padding"><a href="#msie-padding" class="headerlink" title="msie_padding"></a>msie_padding</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用向状态为 MSIE 客户端的响应添加注释<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#msie_padding"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="msie-refresh"><a href="#msie-refresh" class="headerlink" title="msie_refresh"></a>msie_refresh</h3><ul>
<li>取值: max=N [inactive=time] | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 配置可存储以下内容的缓存<ul>
<li>打开文件描述符，其大小和修改时间;</li>
<li>关于目录存在的信息;</li>
<li>文件查找错误<br>  max: 设置缓存中的最大元素数; 在缓存溢出时，删除最近最少使用的 （LRU） 元素;<br>  inactive: 定义从缓存中删除元素的时间 如果在此期间未被访问; 默认情况下，它是 60 秒;<br>  off: 禁用缓存<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#msie_refresh"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
</li>
</ul>
<h3 id="open-file-cache-errors"><a href="#open-file-cache-errors" class="headerlink" title="open_file_cache_errors"></a>open_file_cache_errors</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 按open_file_cache启用或禁用文件查找错误的缓存<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#open_file_cache_errors"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="open-file-cache-min-uses"><a href="#open-file-cache-min-uses" class="headerlink" title="open_file_cache_min_uses"></a>open_file_cache_min_uses</h3><ul>
<li>取值: 具体数值 (默认 1)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置在 open_file_cache 指令的参数所配置的时间段内文件访问的最小次数<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#open_file_cache_min_uses"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="open-file-cache-valid"><a href="#open-file-cache-valid" class="headerlink" title="open_file_cache_valid"></a>open_file_cache_valid</h3><ul>
<li>取值: 具体时间 (默认 60s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置验证 open_file_cache 的时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#open_file_cache_valid"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="output-buffers"><a href="#output-buffers" class="headerlink" title="output_buffers"></a>output_buffers</h3><ul>
<li>取值: 具体数值 具体大小 (默认 2 32k)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置用于从磁盘读取响应的缓冲区<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#output_buffers"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="port-in-redirect"><a href="#port-in-redirect" class="headerlink" title="port_in_redirect"></a>port_in_redirect</h3><ul>
<li>取值: on | off (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用在 Nginx 发出的绝对重定向中指定端口<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#port_in_redirect"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="postpone-output"><a href="#postpone-output" class="headerlink" title="postpone_output"></a>postpone_output</h3><ul>
<li>取值: 具体大小 (默认 1460, 单位 B)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 配置客户端数据的传输将推迟到 Nginx 至少有一定数量的字节数据要发送. 值 0 将禁用延迟数据传输<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#postpone_output"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="read-ahead"><a href="#read-ahead" class="headerlink" title="read_ahead"></a>read_ahead</h3><ul>
<li>取值: 具体大小 (默认 0)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置处理文件时内核的预读取量<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#read_ahead"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="recursive-error-pages"><a href="#recursive-error-pages" class="headerlink" title="recursive_error_pages"></a>recursive_error_pages</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用使用 error_page 指令执行多个重定向<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#recursive_error_pages"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="request-pool-size"><a href="#request-pool-size" class="headerlink" title="request_pool_size"></a>request_pool_size</h3><ul>
<li>取值: 具体大小 (默认 4k)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 调整每个请求的内存分配大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#request_pool_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="reset-timedout-connection"><a href="#reset-timedout-connection" class="headerlink" title="reset_timedout_connection"></a>reset_timedout_connection</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用重置超时连接, 以及使用非标准代码 444 关闭的连接<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#reset_timedout_connection"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="resolver"><a href="#resolver" class="headerlink" title="resolver"></a>resolver</h3><ul>
<li>取值: address … [valid=time] [ipv4=on|off] [ipv6=on|off] [status_zone=zone]</li>
<li>可配置模块: http, server, location</li>
<li>解释: 配置用于解析上游服务器名称的名称服务器进入地址<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="resolver-timeout"><a href="#resolver-timeout" class="headerlink" title="resolver_timeout"></a>resolver_timeout</h3><ul>
<li>取值: 具体时间 (默认 30s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置 resolver 名称解析的超时时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver_timeout"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><ul>
<li>取值: 具体时间 (默认 30s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置请求的根目录<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#root"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="satisfy"><a href="#satisfy" class="headerlink" title="satisfy"></a>satisfy</h3><ul>
<li>取值: all | any (默认 any)</li>
<li>可配置模块: http, server, location</li>
<li>解释: access 阶段按照 access 模块, auth_basic 模块, auth_request模块, 其他模块执行顺序<br>  all: access 阶段的所有模块都是通过, 才可以继续往下面执行。<br>  any: 所有模块中任何一个验证通过就放行<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#satisfy"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="send-lowat"><a href="#send-lowat" class="headerlink" title="send_lowat"></a><del>send_lowat</del></h3><ul>
<li>取值: 具体大小 (默认 0)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 如果指令设置为非零值, Nginx 将尝试最小化 使用 kqueue 方法的任一标志对客户端套接字执行的发送操作数 或套接字选项.此指令在 Linux, Solaris 和 Windows 上将被忽略<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#send_lowat"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="send-timeout"><a href="#send-timeout" class="headerlink" title="send_timeout"></a>send_timeout</h3><ul>
<li>取值: 具体时间 (默认 60s)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置向客户端传输响应的超时时间<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#send_timeout"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置 sendfile 方式传输文件<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="sendfile-max-chunk"><a href="#sendfile-max-chunk" class="headerlink" title="sendfile_max_chunk"></a>sendfile_max_chunk</h3><ul>
<li>取值: 具体大小 (默认 2m)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 限制单词调用传输的数据量<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile_max_chunk"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server"><mark class="hl-label blue">详细解释</mark> </a></p>
<h3 id="server-name"><a href="#server-name" class="headerlink" title="server_name"></a>server_name</h3><ul>
<li>取值: name …</li>
<li>可配置模块: http</li>
<li>解释: 设置虚拟服务器的名称, 可使用正则表达式或通配符<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server_name"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="server-name-in-redirect"><a href="#server-name-in-redirect" class="headerlink" title="server_name_in_redirect"></a>server_name_in_redirect</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用在 Nginx 发送的绝对重定向中由 server_name 指令指定的主服务器名称的使用<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="server-names-hash-bucket-size"><a href="#server-names-hash-bucket-size" class="headerlink" title="server_names_hash_bucket_size"></a>server_names_hash_bucket_size</h3><ul>
<li>取值: 具体大小 (默认取决于处理器高速缓存行大小 32 | 64 | 128)</li>
<li>可配置模块: http</li>
<li>解释: 设置服务器名称哈希表的存储空间大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="server-names-hash-max-size"><a href="#server-names-hash-max-size" class="headerlink" title="server_names_hash_max_size"></a>server_names_hash_max_size</h3><ul>
<li>取值: 具体大小 (默认 512)</li>
<li>可配置模块: http</li>
<li>解释: 设置服务器名称哈希表的最大值<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="server-tokens"><a href="#server-tokens" class="headerlink" title="server_tokens"></a>server_tokens</h3><ul>
<li>取值: on | off | build | string (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用在错误页面上服务器响应标头字段<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="subrequest-output-buffer-size"><a href="#subrequest-output-buffer-size" class="headerlink" title="subrequest_output_buffer_size"></a>subrequest_output_buffer_size</h3><ul>
<li>取值: 具体大小 (默认 4k 或者 8k)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置用于存储子请求的响应正文的存储空间大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#subrequest_output_buffer_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="tcp-nodelay"><a href="#tcp-nodelay" class="headerlink" title="tcp_nodelay"></a>tcp_nodelay</h3><ul>
<li>取值: on | off (默认 on)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置是否把小包组成成大包<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="tcp-nopush"><a href="#tcp-nopush" class="headerlink" title="tcp_nopush"></a>tcp_nopush</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 启用或禁用 FreeBSD 或 Linux 上的套接字选项<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nopush"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h3><ul>
<li>取值: file … (URL | =code)</li>
<li>可配置模块: server, location</li>
<li>解释: 按指定顺序检查文件是否存在并使用, 详情参见详细解释<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#try_files"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="types"><a href="#types" class="headerlink" title="types"></a>types</h3><ul>
<li>取值: {…} (默认值  <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">types {</span><br><span class="line">    text/html  html;</span><br><span class="line">    image/gif  gif;</span><br><span class="line">    image/jpeg jpg jpeg;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
  )</li>
<li>可配置模块: server, location</li>
<li>解释: 将文件扩展名映射到 MIME 类型的响应<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#types"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="types-hash-bucket-size"><a href="#types-hash-bucket-size" class="headerlink" title="types_hash_bucket_size"></a>types_hash_bucket_size</h3><ul>
<li>取值: 具体大小 (默认 64)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置类型哈希表的存储空间大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#types_hash_bucket_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="types-hash-max-size"><a href="#types-hash-max-size" class="headerlink" title="types_hash_max_size"></a>types_hash_max_size</h3><ul>
<li>取值: 具体大小 (默认 1024)</li>
<li>可配置模块: http, server, location</li>
<li>解释: 设置最大类型哈希表<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#types_hash_max_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="underscores-in-headers"><a href="#underscores-in-headers" class="headerlink" title="underscores_in_headers"></a>underscores_in_headers</h3><ul>
<li>取值: on | off (默认 off)</li>
<li>可配置模块: http, server</li>
<li>解释: 启用或禁用在客户端请求标头字段中使用下划线<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="variables-hash-bucket-size"><a href="#variables-hash-bucket-size" class="headerlink" title="variables_hash_bucket_size"></a>variables_hash_bucket_size</h3><ul>
<li>取值: 具体大小 (默认 64)</li>
<li>可配置模块: http</li>
<li>解释: 设置变量哈希表的存储空间大小<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#variables_hash_bucket_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
<h3 id="variables-hash-max-size"><a href="#variables-hash-max-size" class="headerlink" title="variables_hash_max_size"></a>variables_hash_max_size</h3><ul>
<li>取值: 具体大小 (默认 1024)</li>
<li>可配置模块: http</li>
<li>解释: 设置变量哈希表的最大值<br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#variables_hash_max_size"><mark class="hl-label blue">详细解释</mark> </a></li>
</ul>
</div></details>

<h2 id="嵌入式变量"><a href="#嵌入式变量" class="headerlink" title="嵌入式变量"></a>嵌入式变量</h2><details class="toggle" style="border: 1px solid  #cfd2d5"><summary class="toggle-button" style="background-color:  #cfd2d5;color:  #020304">查看所有嵌入式变量解释</summary><div class="toggle-content"><h3 id="arg-name"><a href="#arg-name" class="headerlink" title="$arg_name"></a>$arg_name</h3><p>请求行中的参数名称</p>
<h3 id="args"><a href="#args" class="headerlink" title="$args"></a>$args</h3><p>请求行中的参数</p>
<h3 id="binary-remote-addr"><a href="#binary-remote-addr" class="headerlink" title="$binary_remote_addr"></a>$binary_remote_addr</h3><p>二进制形式的客户端地址, 值的长度始终为 4 个字节 (IPv4), 或 16 个字节 (IPv6)</p>
<h3 id="body-bytes-sent"><a href="#body-bytes-sent" class="headerlink" title="$body_bytes_sent"></a>$body_bytes_sent</h3><p>发送到客户端的字节数，不计算响应标头; 此变量与 Apache 模块的 “” 参数兼容%Bmod_log_config</p>
<h3 id="bytes-sent"><a href="#bytes-sent" class="headerlink" title="$bytes_sent"></a>$bytes_sent</h3><p>发送到客户端的字节数</p>
<h3 id="connection"><a href="#connection" class="headerlink" title="$connection"></a>$connection</h3><p>连接序列号</p>
<h3 id="connection-requests"><a href="#connection-requests" class="headerlink" title="$connection_requests"></a>$connection_requests</h3><p>当前通过连接发出的请求数</p>
<h3 id="connection-time"><a href="#connection-time" class="headerlink" title="$connection_time"></a>$connection_time</h3><p>连接时间 (以秒为单), 分辨率为毫秒</p>
<h3 id="content-length"><a href="#content-length" class="headerlink" title="$content_length"></a>$content_length</h3><p>Content-Length 请求标头字段</p>
<h3 id="content-type"><a href="#content-type" class="headerlink" title="$content_type"></a>$content_type</h3><p>Content-Type 请求标头字段</p>
<h3 id="cookie-name"><a href="#cookie-name" class="headerlink" title="$cookie_name"></a>$cookie_name</h3><p>Cookie 名称</p>
<h3 id="document-root"><a href="#document-root" class="headerlink" title="$document_root"></a>$document_root</h3><p>对于当前请求 root 或 alias 指令的值</p>
<h3 id="document-uri"><a href="#document-uri" class="headerlink" title="$document_uri"></a>$document_uri</h3><p>同 $uri</p>
<h3 id="host"><a href="#host" class="headerlink" title="$host"></a>$host</h3><p>按以下优先级顺序:</p>
<ol>
<li>请求行中的主机名，</li>
<li>Host 请求标头字段中的主机名</li>
<li>与请求匹配的服务器名称</li>
</ol>
<h3 id="hostname"><a href="#hostname" class="headerlink" title="$hostname"></a>$hostname</h3><p>主机名</p>
<h3 id="http-name"><a href="#http-name" class="headerlink" title="$http_name"></a>$http_name</h3><p>任意请求标头字段. 变量名称的最后一部分是转换后的字段名称改为小写且短划线替换为下划线</p>
<h3 id="https"><a href="#https" class="headerlink" title="$https"></a>$https</h3><p>如果连接不在 SSL 模式下运行该变量为空字符串</p>
<h3 id="is-args"><a href="#is-args" class="headerlink" title="$is_args"></a>$is_args</h3><p>求行有参数, 无参数时空字符串</p>
<h3 id="limit-rate"><a href="#limit-rate" class="headerlink" title="$limit_rate"></a>$limit_rate</h3><p>设置此变量可启用响应速率限制. 见limit_rate指令</p>
<h3 id="msec"><a href="#msec" class="headerlink" title="$msec"></a>$msec</h3><p>当前时间(以秒为单位) 分辨率是毫秒</p>
<h3 id="nginx-version"><a href="#nginx-version" class="headerlink" title="$nginx_version"></a>$nginx_version</h3><p>Nginx 版本</p>
<h3 id="pid"><a href="#pid" class="headerlink" title="$pid"></a>$pid</h3><p>worker 进程的 PID</p>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="$pipe"></a>$pipe</h3><p>请求已通过管道传输</p>
<h3 id="proxy-protocol-addr"><a href="#proxy-protocol-addr" class="headerlink" title="$proxy_protocol_addr"></a>$proxy_protocol_addr</h3><p>来自 PROXY 协议标头的客户端地址, 在侦听指令中必须事先通过设置参数来启用代理协议</p>
<h3 id="proxy-protocol-port"><a href="#proxy-protocol-port" class="headerlink" title="$proxy_protocol_port"></a>$proxy_protocol_port</h3><p>来自 PROXY 协议标头的客户端端口, 在侦听指令中必须事先通过设置参数来启用代理协议</p>
<h3 id="proxy-protocol-server-addr"><a href="#proxy-protocol-server-addr" class="headerlink" title="$proxy_protocol_server_addr"></a>$proxy_protocol_server_addr</h3><p>来自 PROXY 协议标头的服务器地址, 在侦听指令中必须事先通过设置参数来启用代理协议</p>
<h3 id="proxy-protocol-server-port"><a href="#proxy-protocol-server-port" class="headerlink" title="$proxy_protocol_server_port"></a>$proxy_protocol_server_port</h3><p>来自 PROXY 协议标头的服务器端口, 在侦听指令中必须事先通过设置参数来启用代理协议</p>
<h3 id="proxy-protocol-tlv-name"><a href="#proxy-protocol-tlv-name" class="headerlink" title="$proxy_protocol_tlv_name"></a>$proxy_protocol_tlv_name</h3><p>来自代理协议标头的 TLV, 在侦听指令中必须事先通过设置参数来启用代理协议</p>
<h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>name 取值可以是 TLV 类型名称或其数值以及 SSL TLV 类型名或其数值<br>SSL TLV类型名或其数值都以 ssl_ 开头<br>支持以下 TLV 类型名称</p>
<ul>
<li>alpn (0x01): 通过连接使用的上层协议</li>
<li>authority (0x02): 客户端传递的主机名值</li>
<li>unique_id (0x05): 唯一的连接 ID</li>
<li>netns (0x30): 命名空间的名称</li>
<li>ssl (0x20): 二进制 SSL TLV 结构<br>支持以下 SSL TLV 类型名称</li>
<li>ssl_version (0x21): 客户端连接中使用的 SSL 版本</li>
<li>ssl_cn (0x22): SSL 证书公用名</li>
<li>ssl_cipher (0x23): 所用密码的名称</li>
<li>ssl_sig_alg (0x24): 用于对证书进行签名的算法</li>
<li>ssl_key_alg (0x25): 公钥算法</li>
<li>ssl_verify: 客户端 SSL 证书验证结果 (如果客户端提供了证书) 并成功验证, 否则不为 0</li>
</ul>
<h3 id="query-string"><a href="#query-string" class="headerlink" title="$query_string"></a>$query_string</h3><p>同 $args</p>
<h3 id="realpath-root"><a href="#realpath-root" class="headerlink" title="$realpath_root"></a>$realpath_root</h3><p>对于当前请求对应于根或别名指令值的绝对路径名, 将所有符号链接解析为真实路径</p>
<h3 id="remote-addr"><a href="#remote-addr" class="headerlink" title="$remote_addr"></a>$remote_addr</h3><p>客户地址</p>
<h3 id="remote-port"><a href="#remote-port" class="headerlink" title="$remote_port"></a>$remote_port</h3><p>客户端端口</p>
<h3 id="remote-user"><a href="#remote-user" class="headerlink" title="$remote_user"></a>$remote_user</h3><p>基本身份验证提供的用户名</p>
<h3 id="request"><a href="#request" class="headerlink" title="$request"></a>$request</h3><p>完整的原始请求行</p>
<h3 id="request-body"><a href="#request-body" class="headerlink" title="$request_body"></a>$request_body</h3><p>请求正文</p>
<h3 id="request-body-file"><a href="#request-body-file" class="headerlink" title="$request_body_file"></a>$request_body_file</h3><p>具有请求正文的临时文件的名称</p>
<h3 id="request-completion"><a href="#request-completion" class="headerlink" title="$request_completion"></a>$request_completion</h3><p>请求未完成时为空字符串, 否则是 OK</p>
<h3 id="request-filename"><a href="#request-filename" class="headerlink" title="$request_filename"></a>$request_filename</h3><p>当前请求的文件路径</p>
<h3 id="request-id"><a href="#request-id" class="headerlink" title="$request_id"></a>$request_id</h3><p>唯一请求标识符</p>
<h3 id="request-length"><a href="#request-length" class="headerlink" title="$request_length"></a>$request_length</h3><p>请求长度 (包括请求行、标头和请求正文)</p>
<h3 id="request-method"><a href="#request-method" class="headerlink" title="$request_method"></a>$request_method</h3><p>请求方法</p>
<h3 id="request-time"><a href="#request-time" class="headerlink" title="$request_time"></a>$request_time</h3><p>自从客户端读取第一个字节以来经过的请求处理时间 (以秒为单位), 分辨率为毫秒</p>
<h3 id="request-uri"><a href="#request-uri" class="headerlink" title="$request_uri"></a>$request_uri</h3><p>完整的原始请求 URI(带参数)</p>
<h3 id="scheme"><a href="#scheme" class="headerlink" title="$scheme"></a>$scheme</h3><p>请求方案 (http 或 https)</p>
<h3 id="sent-http-name"><a href="#sent-http-name" class="headerlink" title="$sent_http_name"></a>$sent_http_name</h3><p>任意响应标头字段 (变量名称的最后一部分是转换后的字段名称改为小写且短划线替换为下划线)</p>
<h3 id="sent-trailer-name"><a href="#sent-trailer-name" class="headerlink" title="$sent_trailer_name"></a>$sent_trailer_name</h3><p>在响应结束时发送的任意字段 (变量名称的最后一部分是转换后的字段名称改为小写且短划线替换为下划线)</p>
<h3 id="server-addr"><a href="#server-addr" class="headerlink" title="$server_addr"></a>$server_addr</h3><p>接受请求的服务器的地址 (计算此变量的值通常需要一次系统调用)</p>
<h3 id="server-name"><a href="#server-name" class="headerlink" title="$server_name"></a>$server_name</h3><p>接受请求的服务器的名称</p>
<h3 id="server-port"><a href="#server-port" class="headerlink" title="$server_port"></a>$server_port</h3><p>接受请求的服务器的端口</p>
<h3 id="server-protocol"><a href="#server-protocol" class="headerlink" title="$server_protocol"></a>$server_protocol</h3><p>请求协议 (通常是 HTTP/2.0 或 HTTP/1.0 或 HTTP/1.1)</p>
<h3 id="status"><a href="#status" class="headerlink" title="$status"></a>$status</h3><p>响应状态</p>
<h3 id="tcpinfo-rtt-tcpinfo-rttvar-tcpinfo-snd-cwnd-tcpinfo-rcv-space"><a href="#tcpinfo-rtt-tcpinfo-rttvar-tcpinfo-snd-cwnd-tcpinfo-rcv-space" class="headerlink" title="$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space"></a>$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space</h3><p>有关客户端 TCP 连接的信息</p>
<h3 id="time-iso8601"><a href="#time-iso8601" class="headerlink" title="$time_iso8601"></a>$time_iso8601</h3><p>ISO 8601 标准格式的本地时间</p>
<h3 id="time-local"><a href="#time-local" class="headerlink" title="$time_local"></a>$time_local</h3><p>通用日志格式的本地时间</p>
<h3 id="uri"><a href="#uri" class="headerlink" title="$uri"></a>$uri</h3><p>请求中的当前 URI，规范化的值可能会在请求处理过程中发生变化, 例如: 在执行内部重定向或使用索引文件时</p>
</div></details>

<h2 id="location-匹配规则"><a href="#location-匹配规则" class="headerlink" title="location 匹配规则"></a>location 匹配规则</h2><h3 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h3><p>location 后的地址是匹配规则, 可分为前缀和地址两部分, 例如 <code>~/(js|css)</code> 中 <code>~</code> 是前缀, <code>/(js|css)</code> 是正则表达式形式地址</p>
<table>
<thead>
<tr>
<th align="center">前缀</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">缺省</td>
<td>通用匹配</td>
</tr>
<tr>
<td align="center">~</td>
<td>匹配区分大小写正则表达式</td>
</tr>
<tr>
<td align="center">~*</td>
<td>匹配不区分大小写正则表达式</td>
</tr>
<tr>
<td align="center">!~</td>
<td>不匹配区分大小写正则表达式</td>
</tr>
<tr>
<td align="center">!~*</td>
<td>不匹配不区分大小写正则表达式</td>
</tr>
<tr>
<td align="center">=</td>
<td>精确匹配</td>
</tr>
<tr>
<td align="center">@</td>
<td>内部跳转</td>
</tr>
<tr>
<td align="center">^~</td>
<td>普通字符串匹配上以后不再进行正则匹配</td>
</tr>
</tbody></table>
<div class="note info simple"><p>匹配优先级:</p>
<ol>
<li>精确匹配 =</li>
<li>前缀匹配 ^~</li>
<li>按文件中顺序的正则匹配</li>
<li>匹配不带任何修饰的前缀匹配</li>
<li>交给 / 通用匹配</li>
<li>当有匹配成功时候, 停止匹配并按当前匹配规则处理请求</li>
</ol>
</div>

<h3 id="文件及目录匹配"><a href="#文件及目录匹配" class="headerlink" title="文件及目录匹配"></a>文件及目录匹配</h3><ul>
<li>-f和!-f用来判断是否存在文件</li>
<li>-d和!-d用来判断是否存在目录</li>
<li>-e和!-e用来判断是否存在文件或目录</li>
<li>-x和!-x用来判断文件是否可执行</li>
</ul>
<h2 id="URI-重写"><a href="#URI-重写" class="headerlink" title="URI 重写"></a>URI 重写</h2><p>在 location 域内设置 rewrite 指令<br>例如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> location /page {</span><br><span class="line">    #               匹配内容                    替换内容                   规则</span><br><span class="line">    rewrite     ^/page/([0-9]+)/([0-9]+)$    /page?pageNum=$1&amp;size=$2    break;</span><br><span class="line">    # 规则取值</span><br><span class="line">    # last        相当于apache里面的[L]标记，表示rewrite。</span><br><span class="line">    # break       本条规则匹配完成后，终止匹配，不再匹配后面的规则。</span><br><span class="line">    # redirect    返回302临时重定向，浏览器地址会显示跳转后的URL地址。</span><br><span class="line">    # permanent   返回301永久重定向，浏览器地址会显示跳转后的URL地址。</span><br><span class="line">    proxy_pass http://127.0.0.1:8000; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="检测请求头里的Referer的网址"><a href="#检测请求头里的Referer的网址" class="headerlink" title="检测请求头里的Referer的网址"></a>检测请求头里的Referer的网址</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">location /href {</span><br><span class="line">    valid_referers 127.0.0.1; # 检测请求头里的Referer的网址（可配多个值用空格分隔），取值还可以是none（不存在Referer请求头）、blocked（Referer请求头的值被防火墙或代理服务器删除或伪装，不以http://或https://开头）</span><br><span class="line">    if ($invalid_referer) { # 当检测不通过时</span><br><span class="line">        return 401; # 返回401</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    proxy_pass http://127.0.0.1:8000;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<div class="flink"><div class="flink-name">相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://nginx.org/en/docs/" title="Nginx Documentation" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://nginx.org/nginx.png" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Nginx Documentation">
              </div>
              <div class="flink-item-name">Nginx Documentation</div> 
              <div class="flink-item-desc" title="Nginx 官方文档">Nginx 官方文档</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.runoob.com/regexp/regexp-tutorial.html" title="菜鸟教程" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="null" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="菜鸟教程">
              </div>
              <div class="flink-item-name">菜鸟教程</div> 
              <div class="flink-item-desc" title="正则表达式教程">正则表达式教程</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Network</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Network</tag>
        <tag>Nginx</tag>
        <tag>Maintenance</tag>
        <tag>Baisc</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法笔记</title>
    <url>/2023/01/04/11-15-55/</url>
    <content><![CDATA[<h1 id="排序算法笔记"><a href="#排序算法笔记" class="headerlink" title="排序算法笔记"></a><strong>排序</strong>算法笔记</h1><p>排序算法是最基础的算法, 在算法学科中有着很高的地位<br>排序算法的目的是将一系列可比较元素按照某种规则进行排序. 其中需要重点关注的是不同算法的时间复杂度和空间复杂度, 以及使用场景</p>
<h2 id="公共API"><a href="#公共API" class="headerlink" title="公共API"></a>公共API</h2><p>程序中将有以下公共 API </p>
<table>
<thead>
<tr>
<th>方法签名</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>boolean less(Comparable v, Comparable w)</td>
<td>当且仅当 v 小于 w 时, 返回 true</td>
</tr>
<tr>
<td>void exchange(Comparable&lt;?&gt;[] a, int i, int j)</td>
<td>交换 a 数组中索引为 i 和 j 位置的元素</td>
</tr>
</tbody></table>
<div class="note info simple"><p>Comparable 接口的全类名为 java.lang.Comparable</p>
</div>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><div class="note info simple"><p>下文中的 N 无特殊说明时代表输入数组的长度</p>
</div>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>将数组划分为有序区和无序区, 重复按序遍历无序区元素, 每次将最小的元素放在有序区末尾, 直到无序区没有元素</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>选择排序算法需要经过 N * (N - 1) / 2 (~ N^2 / 2) 次元素比较, 与 N 次元素交换, 时间复杂度为 O(N^2), 空间复杂度为 O(1)<br>选择排序算法主要有以下特点:</p>
<ul>
<li>运行时间和输入无关</li>
<li>与其他算法相比, 元素交换最少</li>
<li>不稳定的排序算法</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">selection</span><span class="params">(Comparable&lt;?&gt;[] a)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) {</span><br><span class="line">        <span class="type">var</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; a.length; j++)</span><br><span class="line">            <span class="keyword">if</span> (less(a[j], a[minIndex])) minIndex = j;</span><br><span class="line"></span><br><span class="line">        exchange(a, i , minIndex);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><mark class="hl-label blue">输入</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label purple">排序过程</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[0, 5, 11, 4, 6, 7, 2, 3, 1, 10, 8, 9]</span><br><span class="line">[0, 1, 11, 4, 6, 7, 2, 3, 5, 10, 8, 9]</span><br><span class="line">[0, 1, 2, 4, 6, 7, 11, 3, 5, 10, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 6, 7, 11, 4, 5, 10, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 7, 11, 6, 5, 10, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 11, 6, 7, 10, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 11, 7, 10, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 11, 10, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label green">输出</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将数组划分为有序区和无序区, 重复按序选择无序区元素, 将每次选择的元素放在有序区的合适位置, 直到无序区没有元素</p>
<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>在最好情况下, 插入排序算法需要经过 N - 1 次元素比较, 与 0 次元素交换;<br>在最坏情况下, 插入排序算法需要经过 ~ N^2 / 2 次元素比较, 与 ~ N^2 / 2 次元素交换;<br>平均情况下, 插入排序算法需要经过 ~ N^2 / 4 次元素比较, 与 ~ N^2 / 4 次元素交换.<br>插入排序算法时间复杂度为 O(N^2), 空间复杂度为 O(1).<br>插入排序算法主要有以下特点:</p>
<ul>
<li>对已有序的数组效率非常高</li>
<li>稳定的排序算法</li>
</ul>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">insertion</span><span class="params">(Comparable&lt;?&gt;[] a)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); j--)</span><br><span class="line">            exchange(a, j , j - <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info simple"><p><mark class="hl-label blue">插入排序哨兵</mark><br>可以先将一个最小的元素放在有序区最前面, 这样可以避免边界判断</p>
</div>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><mark class="hl-label blue">输入</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label purple">排序过程</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[5, 10, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[5, 10, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[4, 5, 10, 11, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 10, 11, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 7, 10, 11, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[2, 4, 5, 6, 7, 10, 11, 3, 1, 0, 8, 9]</span><br><span class="line">[2, 3, 4, 5, 6, 7, 10, 11, 1, 0, 8, 9]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 10, 11, 0, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label green">输出</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序是基于插入排序的一种排序算法<br>希尔排序将数组按一定间隔 h 将原数组划分为若干子序列, 每个子序列中索引相同的元素归同一个子数组, 如数组 <code>a, b, c, d, e, f, g, h, i, j, k, l</code>, 当 h = 4 时, 子序列有  <code>a, b, c, d</code>, <code>e, f, g, h</code>, <code>i, j, k, l</code>, 子数组为<code>a, e, i</code>, <code>b, f, j</code>, <code>c, g, k</code> 和 <code>d, h, l</code>. 排序时, 先把每个子数组利用插入排序化为有序数组, 之后减小 h 的值重复操作, 直到 h 的值为 1</p>
<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>希尔排序在插入排序的基础上还权衡了子数组的规模和有序性, 其算法的性能与 h 的选取有很大关系. 在面对大数组时, 希尔排序比选择排序和插入排序优势较大, 但对规模非常大的输入排序不是最优选择. 希尔排序的时间复杂度为 O(N^1.5), 空间复杂度为 O(1)<br>插入排序算法主要有以下特点:</p>
<ul>
<li>不稳定的排序算法</li>
</ul>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">shell</span><span class="params">(Comparable&lt;?&gt;[] a)</span> {</span><br><span class="line">    <span class="type">var</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; a.length / <span class="number">3</span>) <span class="comment">// 计算初始 h 值</span></span><br><span class="line">        h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h)</span><br><span class="line">                exchange(a, j, j - h);</span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><mark class="hl-label blue">输入</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label purple">排序过程</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">h = 4 [10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">h = 4 [10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">h = 4 [10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">h = 4 [10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">h = 4 [6, 5, 11, 4, 10, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">h = 4 [6, 5, 11, 4, 10, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">h = 4 [6, 5, 2, 4, 10, 7, 11, 3, 1, 0, 8, 9]</span><br><span class="line">h = 4 [6, 5, 2, 3, 10, 7, 11, 4, 1, 0, 8, 9]</span><br><span class="line">h = 4 [1, 5, 2, 3, 6, 7, 11, 4, 10, 0, 8, 9]</span><br><span class="line">h = 4 [1, 0, 2, 3, 6, 5, 11, 4, 10, 7, 8, 9]</span><br><span class="line">h = 4 [1, 0, 2, 3, 6, 5, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 4 [1, 0, 2, 3, 6, 5, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [1, 0, 2, 3, 6, 5, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 6, 5, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 6, 5, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 6, 5, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 6, 5, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 5, 6, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 5, 6, 8, 4, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 4, 5, 6, 8, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 4, 5, 6, 8, 10, 7, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9]</span><br><span class="line">h = 1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label green">输出</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序的核心是 “组合”, 将数组划分为子数组, 使子数组有序后再把子数组进行合并. 子数组也用同样的方法进行排序, 当子数组中只有一个元素时它本身就是有序的</p>
<h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>归并排序发时间复杂度是 O(N * lb N), 空间复杂度是 O(N), 是一种稳定的排序方法<br>TimSort 排序是归并排序的优化版本, 对归并排序排在已经反向排好序的输入时做了特别优化, 最好情况的时间复杂度为 O(N)<br>在面对较小输入, 归并排序的大量方法调用可能会使程序效率不如插入排序<br>对于较大输入可以考虑将归并排序和插入排序结合使用, 当子数组较小时, 使用插入排序将其排序, 再进行归并排序</p>
<h4 id="公共-API"><a href="#公共-API" class="headerlink" title="公共 API"></a>公共 API</h4><p>归并排序有不同的实现, 其中将两个有序子数组组合成一个有序数组的方法是共有的, 将这部分抽象为公共 API</p>
<table>
<thead>
<tr>
<th>方法签名</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>void merge(Comparable&lt;?&gt;[] a, int low, int mid, int high)</td>
<td>将 a 的子序列 a[low … mid] 和 a[mid + 1 … high] 归并</td>
</tr>
<tr>
<td>void mergeSort(Comparable&lt;?&gt;[] a, int type)</td>
<td>归并排序的公共接口, type 为指定使用具体实现</td>
</tr>
</tbody></table>
<details class="toggle"><summary class="toggle-button" style="">查看 merge 方法的实现</summary><div class="toggle-content"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable&lt;?&gt;[] a, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> {</span><br><span class="line">    <span class="type">var</span> <span class="variable">auxLength</span> <span class="operator">=</span> mid - low + <span class="number">1</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">aux</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparable</span>&lt;?&gt;[auxLength];</span><br><span class="line">    System.arraycopy(a, low, aux, <span class="number">0</span>, auxLength);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">auxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">aIndex</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">k</span> <span class="operator">=</span> low; k &lt;= high; k++)</span><br><span class="line">        <span class="keyword">if</span> (auxIndex &gt;= aux.length) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (aIndex &gt; high) {</span><br><span class="line">            System.arraycopy(aux, auxIndex, a, k, aux.length - auxIndex);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(a[aIndex], aux[auxIndex])) {</span><br><span class="line">            a[k] = a[aIndex++];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            a[k] = aux[auxIndex++];</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></details>
<details class="toggle"><summary class="toggle-button" style="">查看经过优化的 merge 方法的实现</summary><div class="toggle-content"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable&lt;?&gt;[] a, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> {</span><br><span class="line">    <span class="keyword">if</span> (!less(a[mid + <span class="number">1</span>], a[mid])) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">auxLength</span> <span class="operator">=</span> mid - low + <span class="number">1</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">aux</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparable</span>&lt;?&gt;[auxLength];</span><br><span class="line">    System.arraycopy(a, low, aux, <span class="number">0</span>, auxLength);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!less(a[low], a[high])) {</span><br><span class="line">        <span class="type">var</span> <span class="variable">tempAux</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparable</span>&lt;?&gt;[high - mid];</span><br><span class="line">        System.arraycopy(a, mid + <span class="number">1</span>, tempAux, <span class="number">0</span>, tempAux.length);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(tempAux, <span class="number">0</span>, a, low, tempAux.length);</span><br><span class="line">        System.arraycopy(aux, <span class="number">0</span>, a, low + tempAux.length, aux.length);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">auxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">aIndex</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">k</span> <span class="operator">=</span> low; k &lt;= high; k++)</span><br><span class="line">        <span class="keyword">if</span> (auxIndex &gt;= aux.length) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (aIndex &gt; high) {</span><br><span class="line">            System.arraycopy(aux, auxIndex, a, k, aux.length - auxIndex);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(a[aIndex], aux[auxIndex])) {</span><br><span class="line">            a[k] = a[aIndex++];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            a[k] = aux[auxIndex++];</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></details>
<details class="toggle"><summary class="toggle-button" style="">查看 mergeSort 方法的实现</summary><div class="toggle-content"><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(Comparable&lt;?&gt;[] a, <span class="type">int</span> type)</span> {</span><br><span class="line">    <span class="keyword">switch</span> (type) {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> -&gt; upToDownMerge(a, <span class="number">0</span>, a.length);</span><br><span class="line">        <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"unknown type"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></details>

<h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><h5 id="自顶向下归并排序"><a href="#自顶向下归并排序" class="headerlink" title="自顶向下归并排序"></a>自顶向下归并排序</h5><p>自顶向下归并排序使用了分治思想</p>
<h6 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h6><p>自顶向下归并排序至少需要 0.5 * N * lb N 次比较, 至多 N * lb N 次比较和 6 * N * lb N 次数组访问 </p>
<h6 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">upToDownMerge</span><span class="params">(Comparable&lt;?&gt;[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> { <span class="comment">// type = 0</span></span><br><span class="line">    <span class="keyword">if</span> (high &lt; low) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    upToDownMerge(a, low, mid);</span><br><span class="line">    upToDownMerge(a, mid + <span class="number">1</span>, high);</span><br><span class="line"></span><br><span class="line">    merge(a, low, mid, high);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h6><mark class="hl-label blue">输入</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[10, 5, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label purple">排序过程&nbsp;(原始&nbsp;merge&nbsp;方法)</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[5, 10, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[5, 10, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[5, 10, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[5, 10, 11, 4, 6, 7, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 7, 10, 11, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 7, 10, 11, 2, 3, 1, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 7, 10, 11, 1, 2, 3, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 7, 10, 11, 1, 2, 3, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 7, 10, 11, 1, 2, 3, 0, 8, 9]</span><br><span class="line">[4, 5, 6, 7, 10, 11, 0, 1, 2, 3, 8, 9]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label green">输出</mark> :
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></tbody></table></figure>

<h5 id="自底向上的归并排序"><a href="#自底向上的归并排序" class="headerlink" title="自底向上的归并排序"></a>自底向上的归并排序</h5>]]></content>
      <categories>
        <category>Note</category>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring security 的简单使用笔记</title>
    <url>/2022/12/14/14-29-47/</url>
    <content><![CDATA[<h1 id="Spring-security-简单使用笔记"><a href="#Spring-security-简单使用笔记" class="headerlink" title="Spring security 简单使用笔记"></a><strong>Spring security</strong> 简单使用笔记</h1><p>Spring security 是一个能高度定制的身份验证和访问控制框架, 是基于 Spring 应用程序标准.<br>相似的的框架有 Shrio, 相比于 Spring security, Shrio 更轻一些. Spring secuity 对于 Spring 框架的兼容性更好, 但同时也更依赖于 Spring 框架.</p>
<h2 id="关键过滤器"><a href="#关键过滤器" class="headerlink" title="关键过滤器"></a>关键过滤器</h2><h3 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span></span>
<p>方法级权限过滤器，位于过滤链最底部</p>
<h3 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.web.access.ExceptionTranslationFilter</span></span>
<p>异常过滤器，处理认证授权过程中抛出的异常</p>
<h3 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span></span>
<p>校验/login（POST）请求提交的用户名和密码</p>
<h2 id="过滤器加载流程"><a href="#过滤器加载流程" class="headerlink" title="过滤器加载流程"></a>过滤器加载流程</h2><p>使用Spring Security配置过滤器（懒加载）</p>
<ol>
<li>在 <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> DelegatingFilterProxy
  </button><span class="hide-content">org.springframework.web.filter.DelegatingFilterProxy</span></span> 类的 doFilter() 方法中执行<span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> initDelegate
  </button><span class="hide-content">Filter initDelegate(WebApplicationContext wac)</span></span> 方法来获取<span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #4d4d4d"> FilterChainProxy
  </button><span class="hide-content">org.springframework.security.web.FilterChainProxy</span></span>这个过滤器链</li>
<li>在 <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> FilterChainProxy
  </button><span class="hide-content">org.springframework.security.web.FilterChainProxy</span></span> 类的 doFilter() 方法中 执行 <span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #fff;color:  #000000"> doFilterInternal
  </button><span class="hide-content">void doFilterInternal(ServletRequest request‚ ServletResponse response‚ FilterChain chain)</span></span> 方法来注册Spring Security的过滤器</li>
</ol>
<h2 id="涉及到的过滤器"><a href="#涉及到的过滤器" class="headerlink" title="涉及到的过滤器"></a><strong>涉及到的过滤器</strong></h2><div class="hide-block"><button type="button" class="hide-button" style="">查看详情
    </button><div class="hide-content"><h3 id="DisableEncodeUrlFilter"><a href="#DisableEncodeUrlFilter" class="headerlink" title="DisableEncodeUrlFilter"></a>DisableEncodeUrlFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.session.DisableEncodeUrlFilter</span></span></p>
<p>Disables encoding URLs using the HttpServletResponse to prevent including the session id in URLs which is not considered URL because the session id can be leaked in things like HTTP access logs.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>禁用使用HttpServletResponse对URL进行编码，以防止在URL中包含会话id，因为会话id可能会在HTTP访问日志等内容中泄漏，因此不被视为URL。</p>
</div></details>

<h3 id="WebAsyncManagerIntegrationFilter"><a href="#WebAsyncManagerIntegrationFilter" class="headerlink" title="WebAsyncManagerIntegrationFilter"></a>WebAsyncManagerIntegrationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter</span></span></p>
<p>Provides integration between the SecurityContext and Spring Web’s WebAsyncManager by using the SecurityContextCallableProcessingInterceptor.beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, Callable) to populate the SecurityContext on the Callable.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>通过使用SecurityContextCallableProcessingInterceptor.beforencurrentHandling（org.springframework.Web.context.request.NativeWebRequest，Callable）在可调用对象上填充SecurityContext，提供SecurityContext和Spring Web的WebAsyncManager之间的集成。</p>
</div></details>

<h3 id="SecurityContextPersistenceFilter"><a href="#SecurityContextPersistenceFilter" class="headerlink" title="SecurityContextPersistenceFilter"></a><del>SecurityContextPersistenceFilter</del></h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.context.SecurityContextPersistenceFilter</span></span></p>
<p>Populates the SecurityContextHolder with information obtained from the configured SecurityContextRepository prior to the request and stores it back in the repository once the request has completed and clearing the context holder. By default it uses an HttpSessionSecurityContextRepository. See this class for information HttpSession related configuration options.<br>This filter will only execute once per request, to resolve servlet container (specifically Weblogic) incompatibilities.<br>This filter MUST be executed BEFORE any authentication processing mechanisms. Authentication processing mechanisms (e.g. BASIC, CAS processing filters etc) expect the SecurityContextHolder to contain a valid SecurityContext by the time they execute.<br>This is essentially a refactoring of the old HttpSessionContextIntegrationFilter to delegate the storage issues to a separate strategy, allowing for more customization in the way the security context is maintained between requests.<br>The forceEagerSessionCreation property can be used to ensure that a session is always available before the filter chain executes (the default is false, as this is resource intensive and not recommended).</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>使用请求之前从配置的SecurityContextRepository获得的信息填充SecurityContextHolder，并在请求完成并清除上下文持有者后将其存储回存储库中。默认情况下，它使用HttpSessionSecurityContextRepository。有关HttpSession相关配置选项的信息，请参阅此类。<br>每个请求只执行一次该过滤器，以解决servlet容器（特别是Weblogic）不兼容问题。<br>必须在任何身份验证处理机制之前执行此筛选器。身份验证处理机制（例如BASIC、CAS处理过滤器等）期望SecurityContextHolder在执行时包含有效的SecurityContext。<br>这本质上是对旧HttpSessionContextIntegrationFilter的重构，以将存储问题委托给一个单独的策略，从而允许在请求之间维护安全上下文的方式进行更多的定制。<br>forceEagleSessionCreation属性可用于确保在筛选器链执行之前会话始终可用（默认值为false，因为这是资源密集型的，不建议使用）。</p>
</div></details>

<p>已弃用,替代者: SecurityContextHolderFilter:</p>
<p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.context.SecurityContextHolderFilter</span></span></p>
<p>A javax.servlet.Filter that uses the SecurityContextRepository to obtain the SecurityContext and set it on the SecurityContextHolder. This is similar to SecurityContextPersistenceFilter except that the SecurityContextRepository.saveContext(SecurityContext, HttpServletRequest, HttpServletResponse) must be explicitly invoked to save the SecurityContext. This improves the efficiency and provides better flexibility by allowing different authentication mechanisms to choose individually if authentication should be persisted.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>javax.servlet。使用SecurityContextRepository获取SecurityContext并在SecurityContextHolder上设置它的筛选器。除了SecurityContextRepository之外，这与SecurityContextPersistenceFilter类似。必须显式调用saveContext（SecurityContext、HttpServletRequest、HttpServletsResponse）来保存SecurityContext。这通过允许不同的身份验证机制单独选择是否应持久化身份验证，提高了效率并提供了更好的灵活性。</p>
</div></details>

<h3 id="HeaderWriterFilter"><a href="#HeaderWriterFilter" class="headerlink" title="HeaderWriterFilter"></a>HeaderWriterFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.header.HeaderWriterFilter</span></span></p>
<p>Filter implementation to add headers to the current response. Can be useful to add certain headers which enable browser protection. Like X-Frame-Options, X-XSS-Protection and X-Content-Type-Options.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>筛选器实现以向当前响应添加标头。添加启用浏览器保护的某些标头可能很有用。与X-Frame-Options、X-XSS-Protect和X-Content-Type-Options类似。</p>
</div></details>

<h3 id="CsrfFilter"><a href="#CsrfFilter" class="headerlink" title="CsrfFilter"></a>CsrfFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.csrf.CsrfFilter</span></span></p>
<p>Applies CSRF protection using a synchronizer token pattern. Developers are required to ensure that CsrfFilter is invoked for any request that allows state to change. Typically this just means that they should ensure their web application follows proper REST semantics (i.e. do not change state with the HTTP methods GET, HEAD, TRACE, OPTIONS).<br>Typically the CsrfTokenRepository implementation chooses to store the CsrfToken in HttpSession with HttpSessionCsrfTokenRepository wrapped by a LazyCsrfTokenRepository. This is preferred to storing the token in a cookie which can be modified by a client application.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>使用同步器令牌模式应用CSRF保护。开发人员必须确保对任何允许状态更改的请求调用CsrfFilter。通常，这意味着他们应该确保他们的web应用程序遵循正确的REST语义（即，不要使用HTTP方法GET、HEAD、TRACE和OPTIONS更改状态）。<br>通常，CsrfTokenRepository实现选择将CsrfToken存储在HttpSession中，HttpSessionCsrfTokenRepository由LazySrfTokenStore封装。这比将令牌存储在可由客户端应用程序修改的cookie中更可取。</p>
</div></details>

<h3 id="LogoutFilter"><a href="#LogoutFilter" class="headerlink" title="LogoutFilter"></a>LogoutFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.logout.LogoutFilter</span></span></p>
<p>Logs a principal out.<br>Polls a series of LogoutHandlers. The handlers should be specified in the order they are required. Generally you will want to call logout handlers TokenBasedRememberMeServices and SecurityContextLogoutHandler (in that order).<br>After logout, a redirect will be performed to the URL determined by either the configured LogoutSuccessHandler or the logoutSuccessUrl, depending on which constructor was used.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>注销委托人。<br>轮询一系列LogoutHandler。应按照所需的顺序指定处理程序。通常，您需要调用注销处理程序TokenBasedRememberMeServices和SecurityContextLogoutHandler（按顺序）。<br>注销后，将根据使用的构造函数，重定向到由配置的LogoutSuccessHandler或LogoutSucceUrl确定的URL。</p>
</div></details>

<h3 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span></span></p>
<p>Processes an authentication form submission. Called AuthenticationProcessingFilter prior to Spring Security 3.0.<br>Login forms must present two parameters to this filter: a username and password. The default parameter names to use are contained in the static fields SPRING_SECURITY_FORM_USERNAME_KEY and SPRING_SECURITY_FORM_PASSWORD_KEY. The parameter names can also be changed by setting the usernameParameter and passwordParameter properties.<br>This filter by default responds to the URL /login.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>处理身份验证表单提交。在Spring Security 3.0之前调用AuthenticationProcessingFilter。<br>登录表单必须为此筛选器提供两个参数：用户名和密码。要使用的默认参数名包含在静态字段SPRING_SECURITY_FORM_USERNAME_KEY和SPRING_SETURITY_FFORM_PASSWORD_KEY中。还可以通过设置usernameParameter和passwordParameter属性来更改参数名称。<br>默认情况下，此筛选器响应URL/登录。</p>
</div></details>

<h3 id="DefaultLoginPageGeneratingFilter"><a href="#DefaultLoginPageGeneratingFilter" class="headerlink" title="DefaultLoginPageGeneratingFilter"></a>DefaultLoginPageGeneratingFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter</span></span></p>
<p>For internal use with namespace configuration in the case where a user doesn’t configure a login page. The configuration code will insert this filter in the chain instead. Will only work if a redirect is used to the login page.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>在用户未配置登录页面的情况下，用于内部命名空间配置。配置代码将在链中插入此筛选器。仅当重定向到登录页面时才有效。</p>
</div></details>

<h3 id="DefaultLogoutPageGeneratingFilter"><a href="#DefaultLogoutPageGeneratingFilter" class="headerlink" title="DefaultLogoutPageGeneratingFilter"></a>DefaultLogoutPageGeneratingFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter</span></span></p>
<p>Generates a default log out page.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>生成默认注销页面。</p>
</div></details>

<h3 id="BasicAuthenticationFilter"><a href="#BasicAuthenticationFilter" class="headerlink" title="BasicAuthenticationFilter"></a>BasicAuthenticationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.authentication.<a href="http://www.basicauthenticationfilter/">www.BasicAuthenticationFilter</a></span></span></p>
<p>Processes a HTTP request’s BASIC authorization headers, putting the result into the SecurityContextHolder.<br>For a detailed background on what this filter is designed to process, refer to RFC 1945, Section 11.1 . Any realm name presented in the HTTP request is ignored.<br>In summary, this filter is responsible for processing any request that has a HTTP request header of Authorization with an authentication scheme of Basic and a Base64-encoded username:password token. For example, to authenticate user “Aladdin” with password “open sesame” the following header would be presented:<br>    Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==<br>This filter can be used to provide BASIC authentication services to both remoting protocol clients (such as Hessian and SOAP) as well as standard user agents (such as Internet Explorer and Netscape).<br>If authentication is successful, the resulting Authentication object will be placed into the SecurityContextHolder.<br>If authentication fails and ignoreFailure is false (the default), an AuthenticationEntryPoint implementation is called (unless the ignoreFailure property is set to true). Usually this should be BasicAuthenticationEntryPoint, which will prompt the user to authenticate again via BASIC authentication.<br>Basic authentication is an attractive protocol because it is simple and widely deployed. However, it still transmits a password in clear text and as such is undesirable in many situations. Digest authentication is also provided by Spring Security and should be used instead of Basic authentication wherever possible. See DigestAuthenticationFilter.<br>Note that if a RememberMeServices is set, this filter will automatically send back remember-me details to the client. Therefore, subsequent requests will not need to present a BASIC authentication header as they will be authenticated using the remember-me mechanism.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>处理HTTP请求的BASIC授权头，将结果放入SecurityContextHolder。<br>有关此筛选器设计处理的详细背景信息，请参阅RFC 1945第11.1节。HTTP请求中出现的任何领域名称都将被忽略。<br>总之，此筛选器负责处理具有HTTP请求头Authorization、身份验证方案为Basic和Base64编码的用户名：密码令牌的任何请求。例如，要使用密码“open芝麻”验证用户“Aladdin”，将显示以下标头：<br>授权：基本QWxhZGRpbjpvcGVuIHNlc2FtZQ==<br>此筛选器可用于向远程协议客户端（如Hessian和SOAP）以及标准用户代理（如Internet Explorer和Netscape）提供BASIC身份验证服务。<br>如果身份验证成功，则生成的身份验证对象将被放置到SecurityContextHolder中。<br>如果身份验证失败且ignoreFailure为false（默认值），则调用AuthenticationEntryPoint实现（除非ignoreFailion属性设置为true）。通常这应该是BasicAuthenticationEntryPoint，它将提示用户通过BASIC身份验证再次进行身份验证。<br>基本身份验证是一个有吸引力的协议，因为它简单且部署广泛。然而，它仍然以明文形式传输密码，因此在许多情况下是不可取的。摘要式身份验证也由SpringSecurity提供，应尽可能使用它来代替基本身份验证。请参阅DigestAuthenticationFilter。<br>请注意，如果设置了RememberMeServices，则此过滤器将自动向客户端发回记住我的详细信息。因此，后续请求不需要呈现BASIC认证头，因为它们将使用记住我的机制进行认证。</p>
</div></details>

<h3 id="RequestCacheAwareFilter"><a href="#RequestCacheAwareFilter" class="headerlink" title="RequestCacheAwareFilter"></a>RequestCacheAwareFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.savedrequest.RequestCacheAwareFilter</span></span></p>
<p>Responsible for reconstituting the saved request if one is cached and it matches the current request.<br>It will call getMatchingRequest on the configured RequestCache. If the method returns a value (a wrapper of the saved request), it will pass this to the filter chain’s doFilter method. If null is returned by the cache, the original request is used and the filter has no effect.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>负责重新构建保存的请求，如果其中一个请求被缓存并且与当前请求匹配。<br>它将在配置的RequestCache上调用getMatchingRequest。如果该方法返回一个值（保存的请求的包装器），它会将其传递给过滤器链的doFilter方法。如果缓存返回null，则使用原始请求，过滤器无效。</p>
</div></details>

<h3 id="SecurityContextHolderAwareRequestFilter"><a href="#SecurityContextHolderAwareRequestFilter" class="headerlink" title="SecurityContextHolderAwareRequestFilter"></a>SecurityContextHolderAwareRequestFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter</span></span></p>
<p>A Filter which populates the ServletRequest with a request wrapper which implements the servlet API security methods.<br>SecurityContextHolderAwareRequestWrapper is extended to provide the following additional methods:</p>
<ul>
<li>HttpServletRequest.authenticate(HttpServletResponse) - Allows the user to determine if they are authenticated and if not send the user to the login page. See setAuthenticationEntryPoint(AuthenticationEntryPoint).</li>
<li>HttpServletRequest.login(String, String) - Allows the user to authenticate using the AuthenticationManager. See setAuthenticationManager(AuthenticationManager).</li>
<li>HttpServletRequest.logout() - Allows the user to logout using the LogoutHandlers configured in Spring Security. See setLogoutHandlers(List).</li>
<li>AsyncContext.start(Runnable) - Automatically copy the SecurityContext from the SecurityContextHolder found on the Thread that invoked AsyncContext.start(Runnable) to the Thread that processes the Runnable.</li>
</ul>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>一个过滤器，用实现servlet API安全方法的请求包装器填充ServletRequest。<br>SecurityContextHolderAwareRequestWrapper被扩展以提供以下附加方法：</p>
<ul>
<li>HttpServletRequest.authenticate（HttpServletResponse）-允许用户确定他们是否经过身份验证，如果没有，则将用户发送到登录页面。请参见setAuthenticationEntryPoint（AuthenticationEntrePoint）。  </li>
<li>HttpServletRequest.login（String，String）-允许用户使用AuthenticationManager进行身份验证。请参阅setAuthenticationManager（AuthenticationManager）。  </li>
<li>HttpServletRequest.logout（）-允许用户使用Spring Security中配置的LogoutHandlers注销。请参见setLogoutHandlers（列表）。  </li>
<li>AsyncContext.start（Runnable）-自动从调用AsyncContext的线程上找到的SecurityContextHolder复制SecurityContext。启动（Runnable）到处理Runnable的线程。</li>
</ul>
</div></details>
 
<h3 id="AnonymousAuthenticationFilter"><a href="#AnonymousAuthenticationFilter" class="headerlink" title="AnonymousAuthenticationFilter"></a>AnonymousAuthenticationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">rg.springframework.security.web.authentication.AnonymousAuthenticationFilter</span></span></p>
<p>Detects if there is no Authentication object in the SecurityContextHolder, and populates it with one if needed.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>检测SecurityContextHolder中是否没有身份验证对象，并在需要时用一个身份验证对象填充。</p>
</div></details>

<h3 id="SessionManagementFilter"><a href="#SessionManagementFilter" class="headerlink" title="SessionManagementFilter"></a>SessionManagementFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.session.SessionManagementFilter</span></span></p>
<p>Detects that a user has been authenticated since the start of the request and, if they have, calls the configured SessionAuthenticationStrategy to perform any session-related activity such as activating session-fixation protection mechanisms or checking for multiple concurrent logins.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>检测用户自请求开始以来是否已通过身份验证，如果已通过，则调用配置的SessionAuthenticationStrategy以执行任何与会话相关的活动，例如激活会话固定保护机制或检查多个并发登录。</p>
</div></details>

<h3 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.access.ExceptionTranslationFilter</span></span></p>
<p>Handles any AccessDeniedException and AuthenticationException thrown within the filter chain.<br>This filter is necessary because it provides the bridge between Java exceptions and HTTP responses. It is solely concerned with maintaining the user interface. This filter does not do any actual security enforcement.<br>If an AuthenticationException is detected, the filter will launch the authenticationEntryPoint. This allows common handling of authentication failures originating from any subclass of org.springframework.security.access.intercept.AbstractSecurityInterceptor.<br>If an AccessDeniedException is detected, the filter will determine whether or not the user is an anonymous user. If they are an anonymous user, the authenticationEntryPoint will be launched. If they are not an anonymous user, the filter will delegate to the AccessDeniedHandler. By default the filter will use AccessDeniedHandlerImpl.<br>To use this filter, it is necessary to specify the following properties:</p>
<ul>
<li>authenticationEntryPoint indicates the handler that should commence the authentication process if an AuthenticationException is detected. Note that this may also switch the current protocol from http to https for an SSL login.</li>
<li>requestCache determines the strategy used to save a request during the authentication process in order that it may be retrieved and reused once the user has authenticated. The default implementation is HttpSessionRequestCache.</li>
</ul>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>处理筛选器链中引发的任何AccessDeniedException和AuthenticationException。<br>这个过滤器是必要的，因为它提供了Java异常和HTTP响应之间的桥梁。它只关心维护用户界面。此筛选器不执行任何实际的安全强制。<br>如果检测到AuthenticationException，则过滤器将启动authenticationEntryPoint。这允许对源自org.springframework.security.access.intercept.AbstractSecurityInterceptor的任何子类的身份验证失败进行常见处理。<br>如果检测到AccessDeniedException，则筛选器将确定用户是否为匿名用户。如果他们是匿名用户，将启动authenticationEntryPoint。如果他们不是匿名用户，则筛选器将委托给AccessDeniedHandler。默认情况下，过滤器将使用AccessDeniedHandlerImpl。<br>要使用此筛选器，必须指定以下属性：</p>
<ul>
<li>authenticationEntryPoint指示在检测到AuthenticationException时应开始身份验证过程的处理程序。注意，对于SSL登录，这也可能会将当前协议从http切换为https。</li>
<li>requestCache确定用于在身份验证过程中保存请求的策略，以便在用户进行身份验证后可以检索和重用该请求。默认实现是HttpSessionRequestCache。</li>
</ul>
</div></details>

<h3 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h3><p><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名<br>  </button><span class="hide-content">org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span></span></p>
<p>Performs security handling of HTTP resources via a filter implementation.<br>The SecurityMetadataSource required by this security interceptor is of type FilterInvocationSecurityMetadataSource.<br>Refer to AbstractSecurityInterceptor for details on the workflow.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>通过过滤器实现执行HTTP资源的安全处理。<br>此安全拦截器所需的SecurityMetadataSource的类型为FilterInvocationSecurityMetadataSource。<br>有关工作流的详细信息，请参阅AbstractSecurityInterceptor。</p>
</div></details></div></div>

<h2 id="实现自定义的账号密码验证逻辑"><a href="#实现自定义的账号密码验证逻辑" class="headerlink" title="实现自定义的账号密码验证逻辑"></a>实现自定义的账号密码验证逻辑</h2><h3 id="创建UsernamePasswordAuthenticationFilter子类"><a href="#创建UsernamePasswordAuthenticationFilter子类" class="headerlink" title="创建UsernamePasswordAuthenticationFilter子类"></a>创建UsernamePasswordAuthenticationFilter子类</h3><p>重写下列方法</p>
<ul>
<li>Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)</li>
<li>void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</li>
<li>void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</li>
</ul>
<div class="hide-block"><button type="button" class="hide-button" style="">查看方法详情
    </button><div class="hide-content"><h4 id="attemptAuthentication方法"><a href="#attemptAuthentication方法" class="headerlink" title="attemptAuthentication方法"></a>attemptAuthentication方法</h4><p>Performs actual authentication.<br>The implementation should do one of the following:<br>-Return a populated authentication token for the authenticated user, indicating successful authentication<br>-Return null, indicating that the authentication process is still in progress. Before returning, the implementation should perform any additional work required to complete the process.<br>-Throw an AuthenticationException if the authentication process fails</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>执行实际身份验证。<br>实施应执行以下操作之一：</p>
<ul>
<li>为经过身份验证的用户返回填充的身份验证令牌，表示身份验证成功</li>
<li>返回null，表示身份验证过程仍在进行中。在返回之前，实施应执行完成流程所需的任何额外工作。</li>
<li>如果身份验证过程失败，则引发AuthenticationException</li>
</ul>
</div></details>

<h4 id="successfulAuthentication方法"><a href="#successfulAuthentication方法" class="headerlink" title="successfulAuthentication方法"></a>successfulAuthentication方法</h4><p>Default behaviour for successful authentication:</p>
<ul>
<li>Sets the successful Authentication object on the SecurityContextHolder  </li>
<li>Informs the configured RememberMeServices of the successful login  </li>
<li>Fires an InteractiveAuthenticationSuccessEvent via the configured ApplicationEventPublisher  </li>
<li>Delegates additional behaviour to the AuthenticationSuccessHandler.<br>Subclasses can override this method to continue the FilterChain after successful authentication.</li>
</ul>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>成功身份验证的默认行为:</p>
<ul>
<li>在SecurityContextHolder上设置成功的身份验证对象</li>
<li>通知已配置的RememberMeServices成功登录</li>
<li>通过配置的ApplicationEventPublisher激发InteractiveAuthenticationSuccessEvent</li>
<li>将其他行为委托给AuthenticationSuccessHandler。<br>子类可以重写此方法以在成功身份验证后继续FilterChain。</li>
</ul>
</div></details>

<h4 id="unsuccessfulAuthentication方法"><a href="#unsuccessfulAuthentication方法" class="headerlink" title="unsuccessfulAuthentication方法"></a>unsuccessfulAuthentication方法</h4><p>Default behaviour for unsuccessful authentication:<br>    Clears the SecurityContextHolder<br>    Stores the exception in the session (if it exists or allowSesssionCreation is set to true)<br>    Informs the configured RememberMeServices of the failed login<br>    Delegates additional behaviour to the AuthenticationFailureHandler.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>身份验证失败的默认行为:</p>
<ul>
<li>清除SecurityContextHolder</li>
<li>将异常存储在会话中（如果它存在或allowSesssionCreation设置为true）</li>
<li>通知配置的RememberMeServices登录失败</li>
<li>将其他行为委托给AuthenticationFailureHandler。</li>
</ul>
</div></details></div></div>

<h3 id="实现-UserDetailsService-接口"><a href="#实现-UserDetailsService-接口" class="headerlink" title="实现 UserDetailsService 接口"></a>实现 UserDetailsService 接口</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.core.userdetails.UserDetailsService</span></span>

<h4 id="oadUserByUsername方法"><a href="#oadUserByUsername方法" class="headerlink" title="oadUserByUsername方法"></a>oadUserByUsername方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">UserDetails loadUserByUsername(String username)</span></span>

<p>Locates the user based on the username. In the actual implementation, the search may possibly be case sensitive, or case insensitive depending on how the implementation instance is configured. In this case, the UserDetails object that comes back may have a username that is of a different case than what was actually requested..</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>根据用户名查找用户。在实际实现中，搜索可能区分大小写，或者不区分大小写（取决于实现实例的配置方式）。在这种情况下，返回的UserDetails对象的用户名可能与实际请求的用户名不同。</p>
</div></details>

<h3 id="实现-PasswordEncoder-接口"><a href="#实现-PasswordEncoder-接口" class="headerlink" title="实现 PasswordEncoder 接口"></a>实现 PasswordEncoder 接口</h3><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看类全名
  </button><span class="hide-content">org.springframework.security.crypto.password.PasswordEncoder</span></span>

<h4 id="encode方法"><a href="#encode方法" class="headerlink" title="encode方法"></a>encode方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">String encode(CharSequence rawPassword)</span></span>

<p>Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or greater hash combined with an 8-byte or greater randomly generated salt.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>对原始密码进行编码。通常，一个好的编码算法应用SHA-1或更大的散列，并结合8字节或更大随机生成的盐。</p>
</div></details>

<h4 id="matches方法"><a href="#matches方法" class="headerlink" title="matches方法"></a>matches方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">boolean matches(CharSequence rawPassword‚ String encodedPassword)</span></span>

<p>Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded. Returns true if the passwords match, false if they do not. The stored password itself is never decoded.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>验证从存储中获得的编码密码与提交的原始密码是否匹配。如果密码匹配，则返回true，否则返回false。存储的密码本身永远不会被解码。</p>
</div></details>

<h4 id="upgradeEncoding方法"><a href="#upgradeEncoding方法" class="headerlink" title="upgradeEncoding方法"></a>upgradeEncoding方法</h4><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  #808080;color:  #ffffff"> 查看完整方法签名
  </button><span class="hide-content">boolean upgradeEncoding(String encodedPassword)</span></span>

<p>Returns true if the encoded password should be encoded again for better security, else false. The default implementation always returns false.</p>
<details class="toggle"><summary class="toggle-button" style="">翻译</summary><div class="toggle-content"><p>如果为了更好的安全性，应再次对编码的密码进行编码，则返回true，否则返回false。默认实现始终返回false。</p>
</div></details>

<h2 id="设置登录的用户名和密码"><a href="#设置登录的用户名和密码" class="headerlink" title="设置登录的用户名和密码"></a><strong>设置登录的用户名和密码</strong></h2><p>设置用户名和密码一般有配置文件和配置类两种方法. 需要连接数据库时, 需要使用配置类</p>
<div class="tabs" id="set-username-password"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#set-username-password-1">配置文件</button></li><li class="tab"><button type="button" data-href="#set-username-password-2">配置类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="set-username-password-1"><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">password</span></span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="set-username-password-2"><p>继承自<del>org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</del>类的配置类，现在已弃用。现在推荐配置UserDetailsService的Bean</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 配置用户名和密码</span></span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">        users.createUser(User.withUsername(<span class="string">"user"</span>).password(<span class="string">"password"</span>).roles(<span class="string">"admin"</span>).build());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置加密器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance(); <span class="comment">// 不加密. 加密器详情见 PasswordEncoder 子类, 常用 BC 加密器</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="访问权限配置"><a href="#访问权限配置" class="headerlink" title="访问权限配置"></a>访问权限配置</h2><p>配置SecurityFilterChain的Bean, 若配置发生冲突, 则以先匹配到的规则为准:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span>() {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .formLogin() <span class="comment">// 登录设置</span></span><br><span class="line">                .loginPage(<span class="string">"/common/login"</span>) <span class="comment">// 配置登录页面路径</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 登录数据处理路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/common/index"</span>) <span class="comment">// 登录成功后跳转路径</span></span><br><span class="line"></span><br><span class="line">                .and().logout().logoutUrl(<span class="string">"/destroy"</span>) <span class="comment">// 设置注销接口路径</span></span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/common/index"</span>)<span class="comment">// 设置注销成功后跳转页面</span></span><br><span class="line">                .permitAll()</span><br><span class="line"></span><br><span class="line">                .and().authorizeRequests() <span class="comment">//配置页面访问权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/common/index"</span>, <span class="string">"/common/login"</span>).permitAll() <span class="comment">// 设置可直接访问的路径</span></span><br><span class="line"></span><br><span class="line">                .antMatchers(<span class="string">"/authority/boom"</span>).hasAuthority(<span class="string">"boom"</span>) <span class="comment">//根据权限配置可访问路径</span></span><br><span class="line">                .antMatchers(<span class="string">"/authority/read"</span>).hasAuthority(<span class="string">"read"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/authority/write"</span>).hasAuthority(<span class="string">"write"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/authority/read/write"</span>).hasAnyAuthority(<span class="string">"read"</span>, <span class="string">"write"</span>)</span><br><span class="line"></span><br><span class="line">                .antMatchers(<span class="string">"/role/boss"</span>).hasRole(<span class="string">"boss"</span>) <span class="comment">//根据角色配置可访问路径</span></span><br><span class="line">                .antMatchers(<span class="string">"/role/worker"</span>).hasAuthority(<span class="string">"ROLE_worker"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/role/root"</span>).hasRole(<span class="string">"root"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/role/boss/worker"</span>).hasAnyRole(<span class="string">"boss"</span>, <span class="string">"worker"</span>)</span><br><span class="line"></span><br><span class="line">                .antMatchers(<span class="string">"/ip/localhost"</span>).hasIpAddress(<span class="string">"192.168.0.0/16"</span>) <span class="comment">//根据IP配置可访问路径</span></span><br><span class="line">                .antMatchers(<span class="string">"/ip/localhost"</span>).hasIpAddress(<span class="string">"127.0.0.0/8"</span>)</span><br><span class="line"></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 其他所有页面皆为认证用户访问</span></span><br><span class="line"></span><br><span class="line">                .and().exceptionHandling().accessDeniedPage(<span class="string">"/error/403.html"</span>)<span class="comment">// 配置 403 路径</span></span><br><span class="line"></span><br><span class="line">                .and().csrf().disable() <span class="comment">// 关闭CSRF防护</span></span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><p>必须提交POST表单, 默认情况下, 用户名的name为username, 密码的name为password</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>先开在启动类开启 @EnableGlobalMethodSecurity</p>
<ul>
<li>@Secured<br>  先开在启动类开启 @EnableGlobalMethodSecurity(securedEnabled = true),对角色进行访问控制, 使用时对角色前加ROLE_前缀, 不支持对资源进行访问控制<br>  例如<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Secured({"ROLE_worker", "ROLE_boss"})</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>@PreAuthorize<br>  先开在启动类开启 @EnableGlobalMethodSecurity(prePostEnabled=true),提供了基于表达式的访问控制<br>  例如:<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize("hasAnyRole('worker','boss')")</span></span><br><span class="line"><span class="meta">@PreAuthorize("hasRole('worker') AND hasRole('boss')")</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>@PostAuthorize:<br>  先开在启动类开启 @EnableGlobalMethodSecurity(prePostEnabled=true),在方法执行后再进行权限验证, 适合验证带有返回值的权限, Spring EL 提供 返回对象能够在表达式语言中获取返回的对象returnObject, 提供了基于表达式的访问控制<br>  例如<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize(" returnObject != null &amp;&amp;  returnObject.username == authentication.name")</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>@PostFilter<br>  对返回数据过滤<br>  例如</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PostFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">controllerTest</span>() {</span><br><span class="line">    <span class="meta">@GetMapping("/post/filter")</span></span><br><span class="line">    <span class="meta">@PostFilter("filterObject.username == '1'")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">PostFilter</span><span class="params">()</span> {</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>().setUsername(<span class="string">"1"</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>().setUsername(<span class="string">"2"</span>));</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回数据</span></span><br><span class="line">        <span class="comment">// [{</span></span><br><span class="line">        <span class="comment">// "deleteFlag":null,</span></span><br><span class="line">        <span class="comment">// "lockFlag":null,</span></span><br><span class="line">        <span class="comment">// "userId":null,</span></span><br><span class="line">        <span class="comment">// "username":"1",</span></span><br><span class="line">        <span class="comment">// "password":null,</span></span><br><span class="line">        <span class="comment">// "authorities":null,</span></span><br><span class="line">        <span class="comment">// "enabled":false,</span></span><br><span class="line">        <span class="comment">// "credentialsNonExpired":false,</span></span><br><span class="line">        <span class="comment">// "accountNonExpired":false,</span></span><br><span class="line">        <span class="comment">// "accountNonLocked":false</span></span><br><span class="line">        <span class="comment">// }]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>@PreFilter<br>  对传入参数过滤<br>  例如<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PostFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">controllerTest</span>() {</span><br><span class="line">    <span class="meta">@PostMapping("/pre/filter")</span></span><br><span class="line">    <span class="meta">@PostFilter("filterObject.username == '1'")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">PreFilter</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span>{</span><br><span class="line">        <span class="comment">// 传入数据</span></span><br><span class="line">        <span class="comment">//[{</span></span><br><span class="line">        <span class="comment">//    "username": "1"</span></span><br><span class="line">        <span class="comment">//},{</span></span><br><span class="line">        <span class="comment">//    "username": "2"</span></span><br><span class="line">        <span class="comment">//},{</span></span><br><span class="line">        <span class="comment">//    "username": "3"</span></span><br><span class="line">        <span class="comment">//}]</span></span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回数据</span></span><br><span class="line">        <span class="comment">//[</span></span><br><span class="line">        <span class="comment">//    {</span></span><br><span class="line">        <span class="comment">//        "deleteFlag": null,</span></span><br><span class="line">        <span class="comment">//        "lockFlag": null,</span></span><br><span class="line">        <span class="comment">//        "userId": null,</span></span><br><span class="line">        <span class="comment">//        "username": "1",</span></span><br><span class="line">        <span class="comment">//        "password": null,</span></span><br><span class="line">        <span class="comment">//        "authorities": null,</span></span><br><span class="line">        <span class="comment">//        "enabled": false,</span></span><br><span class="line">        <span class="comment">//        "credentialsNonExpired": false,</span></span><br><span class="line">        <span class="comment">//        "accountNonExpired": false,</span></span><br><span class="line">        <span class="comment">//        "accountNonLocked": false</span></span><br><span class="line">        <span class="comment">//    }</span></span><br><span class="line">        <span class="comment">//]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><p>配置自动登录Service</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span>() {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PersistentTokenRepository <span class="title function_">persistentTokenRepository</span><span class="params">(DataSource dataSource)</span> {</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// jdbcTokenRepository.setCreateTableOnStartup(true); // 自动创建所需要的表</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http,</span></span><br><span class="line"><span class="params">                                    PersistentTokenRepository persistentTokenRepository,</span></span><br><span class="line"><span class="params">                                    UserDetailsService userDetailsService)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> http.rememberMe().tokenRepository(persistentTokenRepository) <span class="comment">// 配置自动登录</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">60</span>)<span class="comment">// 自动登录有效时常</span></span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<div class="flink"><div class="flink-name">Spring security 相关文档</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://spring.io/projects/spring-security" title="Spring security Documentation" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://spring.io/images/spring-logo-2022-dark-2f10e8055653ec50e693eb444291d742.svg" onerror="this.onerror=null;this.src=&quot;/img/friend_404.gif&quot;" alt="Spring security Documentation">
              </div>
              <div class="flink-item-name">Spring security Documentation</div> 
              <div class="flink-item-desc" title="Spring security 官方文档">Spring security 官方文档</div>
            </a>
          </div></div></div>]]></content>
      <categories>
        <category>Note</category>
        <category>Spring</category>
        <category>Spring boot</category>
        <category>Spring security</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Spring boot</tag>
        <tag>Microservices</tag>
        <tag>Spring security</tag>
        <tag>Securitu</tag>
      </tags>
  </entry>
  <entry>
    <title>Union-find 算法笔记</title>
    <url>/2022/12/16/08-36-38/</url>
    <content><![CDATA[<h1 id="Union-find-算法笔记"><a href="#Union-find-算法笔记" class="headerlink" title="Union-find 算法笔记"></a><strong>Union-find</strong> 算法笔记</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>问题的输入是一列整数对, 其中每个整数都有表示一个某种类型的对象, 一对整数 p, q 可以理解为” p 和 q 是相连的”. 假设, 相连是一种等价关系, 它具有:</p>
<ul>
<li><mark class="hl-label blue">自反性</mark> : p 和 p是相连的</li>
<li><mark class="hl-label blue">对称性</mark> : 若 p 和 q 相连, 则 q 和 p 也相连</li>
<li><mark class="hl-label blue">传递性</mark> : 若 p 和 q 相连, 且 q 和 r 相连, 则 p 和 r 相连
现在, 给定点的数目和一些坐标点矩阵(x, y) 其中 x, y ∈ Z 代表 x 和 y 相连, 要求找出整个点矩阵拥有的连通分量数目, 例如:<br>输入: <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">8 </span><br><span class="line">0 1</span><br><span class="line">2 3</span><br><span class="line">0 4</span><br><span class="line">2 6</span><br><span class="line">3 7</span><br><span class="line">4 5</span><br><span class="line">6 7</span><br></pre></td></tr></tbody></table></figure>
输出:<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></tbody></table></figure>
解释:<br>按要求画出连通图<div class="mermaid-wrap"><pre class="mermaid-src" hidden="">  flowchart TD
    0 --- 1
    2 --- 3
    0 --- 4
    2 --- 6
    3 --- 7
    4 --- 5
    6 --- 7
  </pre></div>
其中 6, 7 之间连通是不必要的, 且此点阵 0, 1, 4, 5 间连通, 2, 3, 6, 7 间连通, 拥有两个连通分量<div class="note info simple"><p>输入样本:<br><a href="https://algs4.cs.princeton.edu/15uf/tinyUF.txt">10个点</a><br><a href="https://algs4.cs.princeton.edu/15uf/mediumUF.txt">625个点</a><br><a href="https://algs4.cs.princeton.edu/15uf/largeUF.txt">1000000个点</a></p>
</div></li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>程序将按以下的 API 编写</p>
<table>
<thead>
<tr>
<th>方法签名</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>UnionFind (int N)</td>
<td>初始化 N 个点</td>
</tr>
<tr>
<td>void union (int p, int q)</td>
<td>将 p 和 q 连通</td>
</tr>
<tr>
<td>int find (int p)</td>
<td>找出点 p 所属的分量标识</td>
</tr>
<tr>
<td>boolean connected (int p, int q)</td>
<td>判断 p 和 q 之间是否连通</td>
</tr>
<tr>
<td>int count ()</td>
<td>连通分量数量</td>
</tr>
</tbody></table>
<h3 id="Quick-find"><a href="#Quick-find" class="headerlink" title="Quick-find"></a>Quick-find</h3><p>这种算法维护着一个整形数组 id[], 数组下标是点的序号, 值为点所属的分量标识.<br>刚开始是每个点都是一个连通分量, 当要连接两个连通分量时, 需要把一个连通分量中的所有点所属的分量标识改为与另一个连通分量相同.</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count; <span class="comment">// 连通分量数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> number)</span> {</span><br><span class="line">        id = <span class="keyword">new</span> <span class="title class_">int</span>[number];</span><br><span class="line">        count = number;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++) {</span><br><span class="line">            id[i] = i;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isConnected(p, q)) {</span><br><span class="line">            <span class="type">var</span> <span class="variable">qId</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="type">var</span> <span class="variable">pId</span> <span class="operator">=</span> find(p);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">                <span class="keyword">if</span> (id[i] == qId)</span><br><span class="line">                    id[i] = pId;</span><br><span class="line"></span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span> {</span><br><span class="line">        <span class="keyword">return</span> id[p];          </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>这种算法的时间复杂度为:</p>
<ul>
<li>构造函数: O(N) = N</li>
<li>union(): O(N) = N</li>
<li>find(): O(N) = 1<br>这种算法中的 union() 方法的数组访问次数最坏是 N^2 次, 当解决输入规模较大的问题时将会非常吃力</li>
</ul>
<h3 id="Quick-union-算法"><a href="#Quick-union-算法" class="headerlink" title="Quick-union 算法"></a>Quick-union 算法</h3><p>这种算法维护着一个整形数组 id[], 数组下标是点的序号, 值为比这个点序号大, 同时属于同一个连通分量的点的序号.<br>一个连通分量中序号最大的点的值指向自己.<br>刚开始是每个点都是一个连通分量, 当要连接两个连通分量时, 需要把一个连通分量序号最大的点的值改为另一个连通分量中任意点的序号.</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count; <span class="comment">// 连通分量数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> number)</span> {</span><br><span class="line">        id = <span class="keyword">new</span> <span class="title class_">int</span>[number];</span><br><span class="line">        count = number;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++) {</span><br><span class="line">            id[i] = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="keyword">if</span> (!isConnected(p, q)) { </span><br><span class="line">            <span class="type">var</span> <span class="variable">qId</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="type">var</span> <span class="variable">pId</span> <span class="operator">=</span> find(p);</span><br><span class="line"></span><br><span class="line">            id[pId] = qId;</span><br><span class="line"></span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span> {</span><br><span class="line">        <span class="keyword">while</span> (p != id[p]){</span><br><span class="line">            id[p] = id[id[p]];</span><br><span class="line">            p = id[p];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label purple">例1</mark> 当输入:
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">10</span><br><span class="line">4 3</span><br><span class="line">3 8</span><br><span class="line">6 5</span><br><span class="line">9 4</span><br><span class="line">2 1</span><br><span class="line">5 0</span><br><span class="line">7 2</span><br></pre></td></tr></tbody></table></figure>
<p>后树为</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden="">  flowchart TD
    0 --- 5
    5 --- 6
    1 --- 2
    1 --- 7
    8 --- 3
    3 --- 4
    8 --- 9
  </pre></div>
<p>再次输入 <code>6 1</code> 后</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden="">  flowchart TD
    1 --- 0
    0 --- 5
    5 --- 6
    1 --- 2
    1 --- 7
    8 --- 3
    3 --- 4
    8 --- 9
  </pre></div>
<p>这种算法的时间复杂度为:</p>
<ul>
<li>构造函数: O(N) = N</li>
<li>union(): O(N) = 树高</li>
<li>find(): O(N) = 树高<br>这种算法的 find() 方法数组访问次数最坏是 N^2 次, 仍然不适合解决输入较大的问题</li>
</ul>
<h3 id="加权-Quick-union-算法"><a href="#加权-Quick-union-算法" class="headerlink" title="加权 Quick-union 算法"></a>加权 Quick-union 算法</h3><p>这种算法和 Quick-union 算法思想基本相同. 不一样的地方在于, 在连接两个树是, 总是将深度小的树连接到深度大的树上</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] size; <span class="comment">// 各树对应的深度, 下标为点序号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count; <span class="comment">// 连通分量数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> number)</span> {</span><br><span class="line">        id = <span class="keyword">new</span> <span class="title class_">int</span>[number];</span><br><span class="line">        size = <span class="keyword">new</span> <span class="title class_">int</span>[number];</span><br><span class="line">        count = number;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++) {</span><br><span class="line">            id[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isConnected(p, q)) {</span><br><span class="line">            <span class="type">var</span> <span class="variable">qId</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="type">var</span> <span class="variable">pId</span> <span class="operator">=</span> find(p);</span><br><span class="line">            <span class="keyword">if</span>(size[pId] &lt; size[qId]) {</span><br><span class="line">                id[pId] = qId;</span><br><span class="line">                size[qId] = Math.max(size[qId], size[pId] + <span class="number">1</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                id[qId] = pId;</span><br><span class="line">                size[pId] = Math.max(size[qId] + <span class="number">1</span>, size[pId]);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span> {</span><br><span class="line">        <span class="keyword">while</span> (p != id[p]){</span><br><span class="line">            p = id[p];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>以 Quick-union 算法中的 <mark class="hl-label purple">例1</mark>  为例, 当最后输入 <code>6 1</code> 后, 树图为</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden="">  flowchart TD
    0 --- 1
    0 --- 5
    5 --- 6
    1 --- 2
    1 --- 7
    8 --- 3
    3 --- 4
    8 --- 9
  </pre></div>
<p>这种算法的时间复杂度为:</p>
<ul>
<li>构造函数: O(N) = N</li>
<li>union(): O(N) = lbN</li>
<li>find(): O(N) = lbN<br>这个算法在处理 N 个点 M条连接时, 最多访问 cMlbN (c为常数) 次数组, 能在合理的时间内解决大规模的输入问题</li>
</ul>
<h3 id="压缩加权-Quick-union-算法"><a href="#压缩加权-Quick-union-算法" class="headerlink" title="压缩加权 Quick-union 算法"></a>压缩加权 Quick-union 算法</h3><p>这种算法和加权 Quick-union 算法思想基本相同. 不一样的地方在于, 在 find() 方法中会将所有点直接连接到根节点上, 将树压缩</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] size; <span class="comment">// 各树对应的深度, 下标为点序号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count; <span class="comment">// 连通分量数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> number)</span> {</span><br><span class="line">        id = <span class="keyword">new</span> <span class="title class_">int</span>[number];</span><br><span class="line">        size = <span class="keyword">new</span> <span class="title class_">int</span>[number];</span><br><span class="line">        count = number;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++) {</span><br><span class="line">            id[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isConnected(p, q)) {</span><br><span class="line">            <span class="type">var</span> <span class="variable">qId</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="type">var</span> <span class="variable">pId</span> <span class="operator">=</span> find(p);</span><br><span class="line">            <span class="keyword">if</span>(size[pId] &lt; size[qId]) {</span><br><span class="line">                id[pId] = qId;</span><br><span class="line">                size[qId] = Math.max(size[qId], size[pId] + <span class="number">1</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                id[qId] = pId;</span><br><span class="line">                size[pId] = Math.max(size[qId] + <span class="number">1</span>, size[pId]);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span> {</span><br><span class="line">        <span class="keyword">while</span> (p != id[p]){</span><br><span class="line">            p = id[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> p;</span><br><span class="line">        <span class="keyword">while</span> (p != id[p]){</span><br><span class="line">            id[p] = result;</span><br><span class="line">            p = id[p];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>相比加权 Quick-union 算法, 这个算法对性能提升并不大.</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Algorithm</category>
        <category>Union-find</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Union-find</tag>
      </tags>
  </entry>
</search>
